{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * ============================================================================\n * CENTRALIZED ENVIRONMENT CONFIGURATION\n * ============================================================================\n * \n * Type-safe environment variable management for the entire monorepo.\n * Single source of truth for all apps (client, admin, API).\n * \n * Usage:\n *   import { env } from '@rentalshop/env';\n *   const dbUrl = env.DATABASE_URL; // Type-safe!\n * \n * Best Practices:\n * - All environment variables are validated on import\n * - Type-safe access throughout the application\n * - Fails fast with clear error messages\n * - Production validation ensures security\n */\n\nimport { z } from 'zod';\n\n// ============================================================================\n// ENVIRONMENT SCHEMA\n// ============================================================================\n\nconst envSchema = z.object({\n  // Node Environment\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  \n  // Database\n  DATABASE_URL: z.string().min(1, 'DATABASE_URL is required'),\n  \n  // JWT\n  JWT_SECRET: z.string().min(1, 'JWT_SECRET is required'),\n  JWT_EXPIRES_IN: z.string().default('7d'),\n  \n  // NextAuth\n  NEXTAUTH_SECRET: z.string().min(1, 'NEXTAUTH_SECRET is required'),\n  NEXTAUTH_URL: z.string().url('NEXTAUTH_URL must be a valid URL'),\n  \n  // API URLs\n  CLIENT_URL: z.string().url('CLIENT_URL must be a valid URL'),\n  ADMIN_URL: z.string().url('ADMIN_URL must be a valid URL'),\n  API_URL: z.string().url('API_URL must be a valid URL'),\n  \n  // CORS\n  CORS_ORIGINS: z.string().default(''),\n  \n  // File Upload\n  UPLOAD_PROVIDER: z.enum(['local', 'cloudinary', 's3']).default('local'),\n  UPLOAD_PATH: z.string().optional(),\n  MAX_FILE_SIZE: z.string().transform(val => parseInt(val, 10)).default('10485760'),\n  \n  // Cloudinary (optional)\n  CLOUDINARY_CLOUD_NAME: z.string().optional(),\n  CLOUDINARY_API_KEY: z.string().optional(),\n  CLOUDINARY_API_SECRET: z.string().optional(),\n  \n  // Email\n  EMAIL_PROVIDER: z.enum(['console', 'ses']).default('console'),\n  EMAIL_FROM: z.string().email('EMAIL_FROM must be a valid email').default('noreply@example.com'),\n  // AWS SES (uses existing AWS credentials from S3)\n  AWS_SES_REGION: z.string().default('us-east-1'),\n  \n  // Redis (optional)\n  REDIS_URL: z.string().optional(),\n  \n  // Logging\n  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),\n  LOG_FORMAT: z.enum(['pretty', 'json']).default('json'),\n  \n  // Feature Flags\n  ENABLE_EMAIL_VERIFICATION: z.string().transform(val => val === 'true').default('false'),\n  ENABLE_ANALYTICS: z.string().transform(val => val === 'true').default('false'),\n  ENABLE_DEBUG_LOGS: z.string().transform(val => val === 'true').default('false'),\n  \n  // Rate Limiting\n  RATE_LIMIT_WINDOW: z.string().default('15m'),\n  RATE_LIMIT_MAX: z.string().transform(val => parseInt(val, 10)).default('100'),\n  \n  // Stripe (optional)\n  STRIPE_PUBLISHABLE_KEY: z.string().optional(),\n  STRIPE_SECRET_KEY: z.string().optional(),\n  STRIPE_WEBHOOK_SECRET: z.string().optional(),\n  \n  // Monitoring (optional)\n  SENTRY_DSN: z.string().optional(),\n  SENTRY_ENVIRONMENT: z.string().optional(),\n});\n\n// ============================================================================\n// PARSE AND VALIDATE ENVIRONMENT\n// ============================================================================\n\nfunction parseEnvironment() {\n  try {\n    // SKIP_ENV_VALIDATION defaults to false - always validate by default\n    // Only skip EMAIL_FROM email format validation when explicitly set to 'true' (useful during build time)\n    const skipValidation = process.env.SKIP_ENV_VALIDATION === 'true';\n    \n    if (skipValidation) {\n      // Create a relaxed schema that doesn't validate EMAIL_FROM email format\n      // but still validates all other fields\n      const buildSchema = envSchema.extend({\n        EMAIL_FROM: z.string().default('noreply@anyrent.shop'), // No .email() validation when skipping\n      });\n      \n      const buildEnv: Record<string, string | undefined> = {\n        ...process.env,\n        // Ensure EMAIL_FROM has a valid default if not provided\n        EMAIL_FROM: process.env.EMAIL_FROM || 'noreply@anyrent.shop',\n      };\n      \n      // Parse with relaxed schema (no email format validation for EMAIL_FROM)\n      const parsed = buildSchema.safeParse(buildEnv);\n      \n      if (parsed.success) {\n        console.log('‚ö†Ô∏è  EMAIL_FROM validation skipped for build - using default if needed');\n        return parsed.data;\n      }\n      \n      // If still fails, use minimal validation approach\n      console.warn('‚ö†Ô∏è  Using minimal validation for build - some env vars may use defaults');\n      \n      return {\n        NODE_ENV: (buildEnv.NODE_ENV as any) || 'production',\n        DATABASE_URL: buildEnv.DATABASE_URL || '',\n        JWT_SECRET: buildEnv.JWT_SECRET || 'build-time-secret',\n        JWT_EXPIRES_IN: buildEnv.JWT_EXPIRES_IN || '7d',\n        NEXTAUTH_SECRET: buildEnv.NEXTAUTH_SECRET || 'build-time-secret',\n        NEXTAUTH_URL: buildEnv.NEXTAUTH_URL || 'http://localhost:3000',\n        CLIENT_URL: buildEnv.CLIENT_URL || 'http://localhost:3000',\n        ADMIN_URL: buildEnv.ADMIN_URL || 'http://localhost:3001',\n        API_URL: buildEnv.API_URL || 'http://localhost:3002',\n        CORS_ORIGINS: buildEnv.CORS_ORIGINS || '',\n        UPLOAD_PROVIDER: (buildEnv.UPLOAD_PROVIDER as any) || 'local',\n        UPLOAD_PATH: buildEnv.UPLOAD_PATH,\n        MAX_FILE_SIZE: parseInt(buildEnv.MAX_FILE_SIZE || '10485760', 10),\n        CLOUDINARY_CLOUD_NAME: buildEnv.CLOUDINARY_CLOUD_NAME,\n        CLOUDINARY_API_KEY: buildEnv.CLOUDINARY_API_KEY,\n        CLOUDINARY_API_SECRET: buildEnv.CLOUDINARY_API_SECRET,\n        EMAIL_PROVIDER: (buildEnv.EMAIL_PROVIDER as any) || 'console',\n        EMAIL_FROM: buildEnv.EMAIL_FROM || 'noreply@anyrent.shop',\n        AWS_SES_REGION: buildEnv.AWS_SES_REGION || 'us-east-1',\n        REDIS_URL: buildEnv.REDIS_URL,\n        LOG_LEVEL: (buildEnv.LOG_LEVEL as any) || 'info',\n        LOG_FORMAT: (buildEnv.LOG_FORMAT as any) || 'json',\n        ENABLE_EMAIL_VERIFICATION: buildEnv.ENABLE_EMAIL_VERIFICATION === 'true',\n        ENABLE_ANALYTICS: buildEnv.ENABLE_ANALYTICS === 'true',\n        ENABLE_DEBUG_LOGS: buildEnv.ENABLE_DEBUG_LOGS === 'true',\n        RATE_LIMIT_WINDOW: buildEnv.RATE_LIMIT_WINDOW || '15m',\n        RATE_LIMIT_MAX: parseInt(buildEnv.RATE_LIMIT_MAX || '100', 10),\n        STRIPE_PUBLISHABLE_KEY: buildEnv.STRIPE_PUBLISHABLE_KEY,\n        STRIPE_SECRET_KEY: buildEnv.STRIPE_SECRET_KEY,\n        STRIPE_WEBHOOK_SECRET: buildEnv.STRIPE_WEBHOOK_SECRET,\n        SENTRY_DSN: buildEnv.SENTRY_DSN,\n        SENTRY_ENVIRONMENT: buildEnv.SENTRY_ENVIRONMENT,\n      } as any;\n    }\n    \n    const parsed = envSchema.safeParse(process.env);\n    \n    if (!parsed.success) {\n      console.error('‚ùå Environment validation failed:');\n      console.error(parsed.error.format());\n      throw new Error('Invalid environment configuration. Check the errors above.');\n    }\n    \n    const env = parsed.data;\n    \n    // Additional production validation\n    if (env.NODE_ENV === 'production') {\n      // Ensure secrets are not default/weak values\n      if (env.JWT_SECRET.includes('local') || env.JWT_SECRET.includes('DO-NOT-USE')) {\n        throw new Error('JWT_SECRET must be changed for production! Generate with: openssl rand -hex 32');\n      }\n      \n      if (env.NEXTAUTH_SECRET.includes('local') || env.NEXTAUTH_SECRET.includes('DO-NOT-USE')) {\n        throw new Error('NEXTAUTH_SECRET must be changed for production! Generate with: openssl rand -hex 32');\n      }\n      \n      // Ensure production URLs use HTTPS\n      if (!env.CLIENT_URL.startsWith('https://')) {\n        throw new Error('CLIENT_URL must use HTTPS in production');\n      }\n      \n      if (!env.API_URL.startsWith('https://')) {\n        throw new Error('API_URL must use HTTPS in production');\n      }\n      \n      // Warn about missing optional but recommended configs\n      if (!env.REDIS_URL) {\n        console.warn('‚ö†Ô∏è  REDIS_URL not set - caching will be disabled');\n      }\n      \n      if (!env.SENTRY_DSN) {\n        console.warn('‚ö†Ô∏è  SENTRY_DSN not set - error monitoring will be disabled');\n      }\n    }\n    \n    return env;\n  } catch (error) {\n    console.error('üí• Failed to load environment configuration:');\n    console.error(error);\n    process.exit(1);\n  }\n}\n\n// ============================================================================\n// EXPORT VALIDATED ENVIRONMENT\n// ============================================================================\n\n/**\n * Validated and type-safe environment configuration\n * Use this throughout your application instead of process.env\n */\nexport const env = parseEnvironment();\n\n/**\n * Environment type\n */\nexport type Env = z.infer<typeof envSchema>;\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Check if in development mode\n */\nexport const isDevelopment = () => env.NODE_ENV === 'development';\n\n/**\n * Check if in production mode\n */\nexport const isProduction = () => env.NODE_ENV === 'production';\n\n/**\n * Check if in test mode\n */\nexport const isTest = () => env.NODE_ENV === 'test';\n\n/**\n * Get CORS origins as array\n */\nexport function getCorsOrigins(): string[] {\n  return env.CORS_ORIGINS\n    .split(',')\n    .map((origin: string) => origin.trim())\n    .filter(Boolean);\n}\n\n/**\n * Get database URL with proper path resolution\n */\nexport function getDatabaseUrl(): string {\n  const url = env.DATABASE_URL;\n  \n  // If using external database, return as-is\n  if (url.startsWith('postgresql://') || \n      url.startsWith('mysql://') ||\n      url.startsWith('mongodb://')) {\n    return url;\n  }\n  \n  // For SQLite, ensure path is from project root\n  if (url.startsWith('file:')) {\n    return url;\n  }\n  \n  return url;\n}\n\n/**\n * Print environment info (safe - no secrets)\n */\nexport function printEnvironmentInfo(): void {\n  console.log('üîß Environment Configuration:');\n  console.log(`  NODE_ENV: ${env.NODE_ENV}`);\n  console.log(`  DATABASE: ${env.DATABASE_URL.substring(0, 30)}...`);\n  console.log(`  CLIENT_URL: ${env.CLIENT_URL}`);\n  console.log(`  ADMIN_URL: ${env.ADMIN_URL}`);\n  console.log(`  API_URL: ${env.API_URL}`);\n  console.log(`  LOG_LEVEL: ${env.LOG_LEVEL}`);\n  console.log(`  EMAIL_PROVIDER: ${env.EMAIL_PROVIDER}`);\n  console.log(`  UPLOAD_PROVIDER: ${env.UPLOAD_PROVIDER}`);\n  console.log(`  Features: Email=${env.ENABLE_EMAIL_VERIFICATION}, Analytics=${env.ENABLE_ANALYTICS}`);\n  console.log('‚úÖ Environment loaded successfully');\n}\n\n// ============================================================================\n// AUTO-PRINT IN DEVELOPMENT\n// ============================================================================\n\nif (isDevelopment() && env.ENABLE_DEBUG_LOGS) {\n  printEnvironmentInfo();\n}\n\n// Export all for convenience\nexport default env;\n\n"],"mappings":"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","names":["parsed","env"]}
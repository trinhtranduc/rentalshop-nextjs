{"version":3,"sources":["../src/subscription.ts","../src/i18n.ts"],"names":[],"mappings":";AAuGO,IAAM,iBAAiB;AAAA,EAC5B,WAAW;AAAA,IACT,SAAS;AAAA;AAAA,IACT,WAAW;AAAA;AAAA,IACX,WAAW;AAAA;AAAA,IACX,QAAQ;AAAA;AAAA,EACV;AAAA,EACA,WAAW;AAAA,IACT,SAAS,EAAE,UAAU,WAAoB,eAAe,EAAE;AAAA,IAC1D,WAAW,EAAE,UAAU,aAAsB,eAAe,EAAE;AAAA,IAC9D,WAAW,EAAE,UAAU,aAAsB,eAAe,EAAE;AAAA,IAC9D,QAAQ,EAAE,UAAU,UAAmB,eAAe,EAAE;AAAA,EAC1D;AACF;AAGO,SAAS,iBACd,WACA,QACoB;AACpB,MAAI,QAAQ;AAEZ,MAAI,WAAW,GAAG;AAChB,aAAS,eAAe,UAAU;AAClC,eAAW,eAAe,UAAU;AAAA,EACtC,WAAW,WAAW,GAAG;AACvB,aAAS,eAAe,UAAU;AAClC,eAAW,eAAe,UAAU;AAAA,EACtC,WAAW,WAAW,GAAG;AACvB,aAAS,eAAe,UAAU;AAClC,eAAW,eAAe,UAAU;AAAA,EACtC,OAAO;AACL,aAAS,eAAe,UAAU;AAClC,eAAW,eAAe,UAAU;AAAA,EACtC;AAEA,QAAM,cAAc;AACpB,QAAM,iBAAiB,YAAY;AACnC,QAAM,iBAAkB,iBAAiB,WAAY;AACrD,QAAM,aAAa,iBAAiB;AACpC,QAAM,oBAAoB,aAAa;AAEvC,SAAO;AAAA,IACL,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,UAAU,OAAO;AAAA,IACjB,eAAe,OAAO;AAAA,EACxB;AACF;;;AChIO,IAAM,gBAAwB;AAG9B,IAAM,UAA6B,CAAC,MAAM,IAAI","sourcesContent":["// ============================================================================\n// SUBSCRIPTION TYPES (Following Stripe/Shopify Patterns)\n// ============================================================================\n\nimport { Plan } from './plans';\nimport { SubscriptionStatus, BillingInterval } from '@rentalshop/constants';\n\n// Re-export types from centralized constants\nexport type { SubscriptionStatus, BillingInterval };\nexport type BillingPeriod = 1 | 3 | 6 | 12; // months (1=monthly, 3=quarterly, 6=sixMonths, 12=yearly)\n\nexport interface SubscriptionPeriod {\n  startDate: Date;\n  endDate: Date;\n  duration: string;\n  isActive: boolean;\n  daysRemaining: number;\n  nextBillingDate: Date;\n  isTrial?: boolean;\n}\n\nexport interface Subscription {\n  id: number;\n  merchantId: number;\n  planId: number;\n  status: SubscriptionStatus;\n  billingInterval: BillingInterval; // monthly, quarterly, sixMonths, yearly\n  currentPeriodStart: Date;\n  currentPeriodEnd: Date;\n  amount: number; // Calculated price based on plan and interval\n  createdAt: Date;\n  updatedAt: Date;\n  \n  // Enhanced subscription period information\n  subscriptionPeriod?: SubscriptionPeriod;\n  \n  // Relations\n  merchant: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  plan: Plan;\n}\n\nexport interface SubscriptionCreateInput {\n  merchantId: number;\n  planId: number;\n  billingInterval?: BillingInterval; // month, quarter, semiAnnual, year\n  status?: SubscriptionStatus;\n  startDate?: Date;\n}\n\nexport interface SubscriptionUpdateInput {\n  id: number;\n  planId?: number;\n  billingInterval?: BillingInterval;\n  status?: SubscriptionStatus;\n  endDate?: Date | string;\n}\n\nexport interface SubscriptionFilters {\n  merchantId?: number;\n  planId?: number;\n  status?: string;\n  startDate?: Date | string;\n  endDate?: Date | string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface SubscriptionsResponse {\n  data: Subscription[];\n  pagination: {\n    total: number;\n    hasMore: boolean;\n    limit: number;\n    offset: number;\n  };\n}\n\n// Subscription actions\nexport interface SubscriptionAction {\n  type: 'change_plan' | 'pause' | 'resume' | 'cancel' | 'reactivate';\n  planId?: number;\n  reason?: string;\n}\n\n// Plan comparison for upgrades/downgrades\n// PlanComparison interface moved to plans.ts\n\n// Pricing calculation utilities\nexport interface PricingCalculation {\n  basePrice: number;\n  discount: number;\n  finalPrice: number;\n  savings: number;\n  monthlyEquivalent: number;\n  interval: BillingInterval;\n  intervalCount: number;\n}\n\n// Modern SaaS pricing configuration\nexport const PRICING_CONFIG = {\n  DISCOUNTS: {\n    monthly: 0,      // 0% discount\n    quarterly: 10,   // 10% discount\n    sixMonths: 15,   // 15% discount\n    yearly: 20,      // 20% discount\n  },\n  INTERVALS: {\n    monthly: { interval: 'monthly' as const, intervalCount: 1 },\n    quarterly: { interval: 'quarterly' as const, intervalCount: 3 },\n    sixMonths: { interval: 'sixMonths' as const, intervalCount: 6 },\n    yearly: { interval: 'yearly' as const, intervalCount: 1 },\n  }\n} as const;\n\n// Pricing calculation functions\nexport function calculatePricing(\n  basePrice: number, \n  period: BillingPeriod\n): PricingCalculation {\n  let config, discount;\n  \n  if (period === 1) {\n    config = PRICING_CONFIG.INTERVALS.monthly;\n    discount = PRICING_CONFIG.DISCOUNTS.monthly;\n  } else if (period === 3) {\n    config = PRICING_CONFIG.INTERVALS.quarterly;\n    discount = PRICING_CONFIG.DISCOUNTS.quarterly;\n  } else if (period === 6) {\n    config = PRICING_CONFIG.INTERVALS.sixMonths;\n    discount = PRICING_CONFIG.DISCOUNTS.sixMonths;\n  } else {\n    config = PRICING_CONFIG.INTERVALS.yearly;\n    discount = PRICING_CONFIG.DISCOUNTS.yearly;\n  }\n  \n  const totalMonths = period;\n  const totalBasePrice = basePrice * totalMonths;\n  const discountAmount = (totalBasePrice * discount) / 100;\n  const finalPrice = totalBasePrice - discountAmount;\n  const monthlyEquivalent = finalPrice / totalMonths;\n  \n  return {\n    basePrice: totalBasePrice,\n    discount,\n    finalPrice,\n    savings: discountAmount,\n    monthlyEquivalent,\n    interval: config.interval,\n    intervalCount: config.intervalCount\n  };\n}\n\n// Example: calculatePricing(29, 3) = { basePrice: 87, discount: 10, finalPrice: 78.3, savings: 8.7, monthlyEquivalent: 26.1, interval: 'month', intervalCount: 3 }\n","/**\n * i18n Type Definitions\n * \n * Type-safe translations with autocomplete support\n */\n\n// Import English messages as the source of truth for types\ntype Messages = typeof import('../../../locales/en/common.json') & \n  typeof import('../../../locales/en/auth.json') &\n  typeof import('../../../locales/en/dashboard.json') &\n  typeof import('../../../locales/en/orders.json') &\n  typeof import('../../../locales/en/products.json') &\n  typeof import('../../../locales/en/customers.json') &\n  typeof import('../../../locales/en/settings.json') &\n  typeof import('../../../locales/en/validation.json');\n\n// Extend next-intl module for type safety\ndeclare global {\n  // Use type safe message keys with next-intl\n  type IntlMessages = Messages;\n}\n\n// Export locale type\nexport type Locale = 'en' | 'vi';\n\n// Export default locale\nexport const defaultLocale: Locale = 'en';\n\n// Export available locales\nexport const locales: readonly Locale[] = ['en', 'vi'] as const;\n\n"]}
{"version":3,"sources":["../src/hooks/useAuth.ts","../src/hooks/useAuthErrorHandler.ts","../src/hooks/useCanPerform.ts","../src/hooks/useSubscriptionStatusInfo.ts","../src/hooks/useCurrency.tsx","../src/hooks/useCustomerManagement.ts","../src/hooks/usePagination.ts","../src/hooks/useThrottledSearch.ts","../src/hooks/useOrderManagement.ts","../src/hooks/useProductAvailability.ts","../src/hooks/useProductManagement.ts","../src/hooks/useToast.ts","../src/hooks/useSubscriptionError.ts","../src/hooks/useUserManagement.ts","../src/hooks/useUserRole.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { getAuthToken, getStoredUser, clearAuthData, storeAuthData } from '@rentalshop/utils';\nimport type { User } from '@rentalshop/types';\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\nexport interface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport interface LoginResponse {\n  success: boolean;\n  data: {\n    token: string;\n    user: User;\n  };\n  message?: string;\n}\n\n// ============================================================================\n// USE AUTH HOOK\n// ============================================================================\n\nexport function useAuth() {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    loading: true,\n    error: null,\n  });\n\n  // ============================================================================\n  // AUTH FUNCTIONS\n  // ============================================================================\n\n  const login = useCallback(async (email: string, password: string): Promise<boolean> => {\n    try {\n      setState(prev => ({ ...prev, loading: true }));\n\n      // Use centralized API URL configuration\n      const { apiUrls } = await import('@rentalshop/utils');\n      const response = await fetch(apiUrls.auth.login, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      // Handle subscription errors (402 Payment Required)\n      if (response.status === 402) {\n        const errorData = await response.json();\n        setState(prev => ({ \n          ...prev, \n          error: errorData.message || 'Subscription issue detected',\n          loading: false \n        }));\n        return false;\n      }\n\n      // Handle authentication errors (401 Unauthorized)\n      if (response.status === 401) {\n        const errorData = await response.json();\n        setState(prev => ({ \n          ...prev, \n          error: errorData.message || 'Invalid credentials',\n          loading: false \n        }));\n        return false;\n      }\n\n      const data: LoginResponse = await response.json();\n\n      if (data.success && data.data?.token) {\n        // Store auth data using consolidated function\n        storeAuthData(data.data.token, data.data.user);\n        \n        setState(prev => ({ \n          ...prev, \n          user: data.data.user, \n          loading: false \n        }));\n        return true;\n      } else {\n        setState(prev => ({ \n          ...prev, \n          error: data.message || 'Login failed',\n          loading: false \n        }));\n        return false;\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Login failed';\n      setState(prev => ({ \n        ...prev, \n        error: errorMessage,\n        loading: false \n      }));\n      return false;\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    // Use consolidated clearAuthData function\n    clearAuthData();\n    setState({\n      user: null,\n      loading: false,\n      error: null,\n    });\n    // window.location.href = '/login';\n  }, []);\n\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  const refreshUser = useCallback(async () => {\n    try {\n      // Use consolidated getAuthToken function\n      const token = getAuthToken();\n      console.log('🔄 refreshUser called, token exists:', !!token);\n      \n      if (!token) {\n        console.log('❌ No token found, setting user to null');\n        setState(prev => ({ ...prev, user: null, loading: false }));\n        return;\n      }\n\n      console.log('🌐 Fetching user profile from API...');\n      // Use centralized API URL and authenticatedFetch\n      const { apiUrls, authenticatedFetch } = await import('@rentalshop/utils');\n      const response = await authenticatedFetch(apiUrls.settings.user);\n\n      console.log('📥 Profile API response:', {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('📊 Profile API data:', data);\n        \n        if (data.success && data.data) {\n          console.log('✅ Setting user data:', data.data);\n          setState(prev => ({ \n            ...prev, \n            user: data.data,\n            loading: false \n          }));\n          // Don't set localStorage here - it's already handled by storeAuthData\n        } else {\n          console.error('❌ API returned success:false:', data);\n          throw new Error('Failed to refresh user');\n        }\n      } else if (response.status === 402) {\n        // Handle subscription errors (402 Payment Required)\n        try {\n          const errorData = await response.clone().json();\n          console.log('⚠️ Subscription error detected, not logging out');\n          // Don't logout for subscription errors - just show error\n          setState(prev => ({ \n            ...prev, \n            loading: false, \n            error: errorData.message || 'Subscription issue detected' \n          }));\n          return;\n        } catch (parseError) {\n          console.log('🔍 Could not parse 402 error response');\n          setState(prev => ({ \n            ...prev, \n            loading: false, \n            error: 'Subscription issue detected' \n          }));\n          return;\n        }\n      } else if (response.status === 401) {\n        // Handle authentication errors (401 Unauthorized)\n        console.log('🔒 Token expired, logging out and redirecting to login');\n        // Token expired or invalid - logout will clear data\n        logout();\n        // Redirect to login page\n        if (typeof window !== 'undefined') {\n          window.location.href = '/login';\n        }\n      } else {\n        console.error('❌ API error:', response.status, response.statusText);\n        // Don't clear auth data on API errors - keep existing user data\n        console.log('⚠️ API error during refresh, but keeping existing user data');\n        setState(prev => ({ ...prev, loading: false }));\n        // Only clear auth data for critical errors (500, 503, etc.)\n        if (response.status >= 500) {\n          console.log('🔥 Server error, keeping user data but not clearing auth');\n        }\n      }\n    } catch (err) {\n      console.error('💥 Error refreshing user:', err);\n      // Don't clear auth data immediately on refresh error\n      // Keep existing user data and just set loading to false\n      console.log('⚠️ Refresh failed, but keeping existing user data');\n      setState(prev => ({ ...prev, loading: false }));\n      // Only clear auth data if it's a network error or critical failure\n      if (err instanceof Error && (\n        err.message.includes('Failed to fetch') || \n        err.message.includes('Network error') ||\n        err.message.includes('fetch')\n      )) {\n        console.log('🌐 Network error during refresh, keeping user data');\n      }\n    }\n  }, [logout]);\n\n  // ============================================================================\n  // EFFECTS\n  // ============================================================================\n\n  useEffect(() => {\n    // Check for existing auth on mount using consolidated approach\n    const token = getAuthToken();\n    const storedUser = getStoredUser();\n\n    console.log('🔍 useAuth useEffect - localStorage check:', {\n      hasToken: !!token,\n      hasStoredUser: !!storedUser,\n      tokenLength: token?.length,\n      tokenPreview: token ? token.substring(0, 20) + '...' : 'null',\n      storedUserPreview: storedUser ? JSON.stringify(storedUser).substring(0, 100) + '...' : 'null',\n      storedUserFirstName: storedUser?.firstName,\n      storedUserLastName: storedUser?.lastName,\n      storedUserPhone: storedUser?.phone\n    });\n\n    if (token && storedUser) {\n      console.log('✅ Found stored user data:', storedUser);\n      setState(prev => ({ ...prev, user: {\n        ...storedUser,\n        id: storedUser.id, // Keep as number\n      } as User, loading: false }));\n      \n      // Only refresh user data if we don't have complete user info\n      // This prevents unnecessary API calls that might fail\n      if (!storedUser.merchantId && !storedUser.outletId) {\n        console.log('🔄 User data incomplete (missing merchant/outlet IDs) - refreshing from API...');\n        // Don't set loading to true here - keep user visible while refreshing\n        refreshUser();\n      } else if (!storedUser.firstName || !storedUser.lastName) {\n        console.log('🔄 User data incomplete (missing firstName/lastName) - refreshing from API...');\n        // Don't set loading to true here - keep user visible while refreshing\n        refreshUser();\n      } else {\n        console.log('✅ User data complete - no need to refresh');\n      }\n    } else if (token && !storedUser) {\n      console.log('🔄 Token exists but no user data - refreshing from API...');\n      // We have a token but no user data, try to refresh from API\n      refreshUser();\n    } else {\n      console.log('❌ No auth data found - user not authenticated');\n      setState(prev => ({ ...prev, user: null, loading: false }));\n    }\n  }, [refreshUser]);\n\n  // ============================================================================\n  // MODERN PATTERN: Automatic Token Refresh\n  // ============================================================================\n  \n  useEffect(() => {\n    // Modern pattern: Auto-refresh tokens before they expire\n    const checkTokenExpiry = () => {\n      const token = getAuthToken();\n      if (!token) return;\n\n      try {\n        const parts = token.split('.');\n        if (parts.length === 3) {\n          const payload = JSON.parse(atob(parts[1]));\n          const now = Math.floor(Date.now() / 1000);\n          const timeUntilExpiry = payload.exp - now;\n          \n          // Refresh token if it expires in less than 5 minutes\n          if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {\n            console.log('🔄 Token expires soon, refreshing...');\n            refreshUser();\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to check token expiry:', error);\n      }\n    };\n\n    // Check every minute\n    const interval = setInterval(checkTokenExpiry, 60000);\n    \n    // Initial check\n    checkTokenExpiry();\n\n    return () => clearInterval(interval);\n  }, [refreshUser]);\n\n  // ============================================================================\n  // RETURN VALUES\n  // ============================================================================\n\n  return {\n    user: state.user,\n    loading: state.loading,\n    error: state.error,\n    login,\n    logout,\n    refreshUser,\n    clearError,\n  };\n}\n","import { useCallback } from 'react';\nimport { clearAuthData } from '@rentalshop/utils';\n\n/**\n * Custom hook for handling authentication errors\n * Automatically logs out user and redirects to login on auth failures\n */\nexport const useAuthErrorHandler = () => {\n  const handleAuthError = useCallback((error: any) => {\n    console.error('Authentication error detected:', error);\n    \n    // Check if it's an authentication-related error\n    if (\n      error?.message?.includes('Authentication required') ||\n      error?.message?.includes('Unauthorized') ||\n      error?.message?.includes('Invalid token') ||\n      error?.message?.includes('Token expired') ||\n      error?.status === 401\n    ) {\n      console.log('🔄 Authentication error detected, logging out user');\n      \n      // Clear auth data using centralized function\n      clearAuthData();\n      \n      // Redirect to login\n      if (typeof window !== 'undefined') {\n        // window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  return { handleAuthError };\n};\n","\"use client\"\n\nimport { useCallback } from 'react';\nimport { useAuth } from './useAuth';\nimport { useSubscriptionStatusInfo } from './useSubscriptionStatusInfo';\n\n// ============================================================================\n// CAN PERFORM ACTION HOOK\n// ============================================================================\n\nexport type ActionType = \n  | 'create_order'\n  | 'edit_order'\n  | 'delete_order'\n  | 'create_customer'\n  | 'edit_customer'\n  | 'delete_customer'\n  | 'create_product'\n  | 'edit_product'\n  | 'delete_product'\n  | 'view_analytics'\n  | 'manage_users'\n  | 'manage_settings'\n  | 'export_data'\n  | 'bulk_operations'\n  | string; // Allow custom actions\n\nexport interface ActionPermission {\n  action: ActionType;\n  requiresSubscription?: boolean;\n  requiredFeatures?: string[];\n  requiredRole?: string[];\n  customCheck?: (user: any, subscription: any) => boolean;\n}\n\nexport function useCanPerform(action: ActionType): boolean {\n  const { user } = useAuth();\n  const { hasActiveSubscription, isExpired, canAccessFeature } = useSubscriptionStatusInfo();\n\n  const checkPermission = useCallback((action: ActionType): boolean => {\n    // If no user, deny all actions\n    if (!user) {\n      return false;\n    }\n\n    // Define action permissions\n    const actionPermissions: Record<ActionType, ActionPermission> = {\n      // Order actions\n      'create_order': {\n        action: 'create_order',\n        requiresSubscription: true,\n        requiredFeatures: ['orders']\n      },\n      'edit_order': {\n        action: 'edit_order',\n        requiresSubscription: true,\n        requiredFeatures: ['orders']\n      },\n      'delete_order': {\n        action: 'delete_order',\n        requiresSubscription: true,\n        requiredFeatures: ['orders']\n      },\n      \n      // Customer actions\n      'create_customer': {\n        action: 'create_customer',\n        requiresSubscription: true,\n        requiredFeatures: ['customers']\n      },\n      'edit_customer': {\n        action: 'edit_customer',\n        requiresSubscription: true,\n        requiredFeatures: ['customers']\n      },\n      'delete_customer': {\n        action: 'delete_customer',\n        requiresSubscription: true,\n        requiredFeatures: ['customers']\n      },\n      \n      // Product actions\n      'create_product': {\n        action: 'create_product',\n        requiresSubscription: true,\n        requiredFeatures: ['products']\n      },\n      'edit_product': {\n        action: 'edit_product',\n        requiresSubscription: true,\n        requiredFeatures: ['products']\n      },\n      'delete_product': {\n        action: 'delete_product',\n        requiresSubscription: true,\n        requiredFeatures: ['products']\n      },\n      \n      // Analytics and reporting\n      'view_analytics': {\n        action: 'view_analytics',\n        requiresSubscription: true,\n        requiredFeatures: ['analytics']\n      },\n      'export_data': {\n        action: 'export_data',\n        requiresSubscription: true,\n        requiredFeatures: ['analytics', 'export']\n      },\n      \n      // User management\n      'manage_users': {\n        action: 'manage_users',\n        requiresSubscription: true,\n        requiredRole: ['ADMIN', 'MERCHANT', 'OUTLET_ADMIN']\n      },\n      \n      // Settings\n      'manage_settings': {\n        action: 'manage_settings',\n        requiresSubscription: true,\n        requiredRole: ['ADMIN', 'MERCHANT']\n      },\n      \n      // Bulk operations\n      'bulk_operations': {\n        action: 'bulk_operations',\n        requiresSubscription: true,\n        requiredFeatures: ['bulk_operations']\n      }\n    };\n\n    const permission = actionPermissions[action];\n    \n    // If no specific permission defined, allow for now (backward compatibility)\n    if (!permission) {\n      return true;\n    }\n\n    // Check subscription requirements\n    if (permission.requiresSubscription) {\n      if (!hasActiveSubscription || isExpired) {\n        return false;\n      }\n    }\n\n    // Check required features\n    if (permission.requiredFeatures) {\n      for (const feature of permission.requiredFeatures) {\n        if (!canAccessFeature(feature)) {\n          return false;\n        }\n      }\n    }\n\n    // Check required roles\n    if (permission.requiredRole) {\n      if (!permission.requiredRole.includes(user.role)) {\n        return false;\n      }\n    }\n\n    // Custom check\n    if (permission.customCheck) {\n      return permission.customCheck(user, { hasActiveSubscription, isExpired });\n    }\n\n    return true;\n  }, [user, hasActiveSubscription, isExpired, canAccessFeature]);\n\n  return checkPermission(action);\n}\n","\"use client\"\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './useAuth';\n\n// ============================================================================\n// SUBSCRIPTION STATUS INFO HOOK\n// ============================================================================\n\nexport interface SubscriptionStatusInfo {\n  // Original interface\n  loading: boolean;\n  hasActiveSubscription: boolean;\n  isExpired: boolean;\n  isExpiringSoon: boolean;\n  daysUntilExpiry: number | null;\n  subscriptionType: string | null;\n  canAccessFeature: (feature: string) => boolean;\n  refreshStatus: () => Promise<void>;\n  \n  // Extended interface for UI components\n  hasSubscription: boolean;\n  subscription: any;\n  status: string;\n  isTrial: boolean;\n  isActive: boolean;\n  planName: string;\n  error: string | null;\n  \n  // Additional properties for other components\n  statusMessage: string;\n  statusColor: string;\n  hasAccess: boolean;\n  accessLevel: string;\n  requiresPayment: boolean;\n  upgradeRequired: boolean;\n  gracePeriodEnds: Date | null;\n  canExportData: boolean;\n  isRestricted: boolean;\n  isReadOnly: boolean;\n  isLimited: boolean;\n  isDenied: boolean;\n}\n\nexport interface UseSubscriptionStatusInfoOptions {\n  checkInterval?: number; // Check interval in milliseconds (default: 5 minutes)\n}\n\nexport function useSubscriptionStatusInfo(\n  options: UseSubscriptionStatusInfoOptions = {}\n): SubscriptionStatusInfo {\n  const { checkInterval = 5 * 60 * 1000 } = options; // Default 5 minutes\n  const { user } = useAuth();\n  \n  const [loading, setLoading] = useState(true);\n  const [hasActiveSubscription, setHasActiveSubscription] = useState(false);\n  const [isExpired, setIsExpired] = useState(false);\n  const [isExpiringSoon, setIsExpiringSoon] = useState(false);\n  const [daysUntilExpiry, setDaysUntilExpiry] = useState<number | null>(null);\n  const [subscriptionType, setSubscriptionType] = useState<string | null>(null);\n  \n  // Extended state for UI components\n  const [hasSubscription, setHasSubscription] = useState(false);\n  const [subscription, setSubscription] = useState<any>(null);\n  const [status, setStatus] = useState<string>('');\n  const [isTrial, setIsTrial] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n  const [planName, setPlanName] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch subscription status from API\n  const fetchSubscriptionStatus = useCallback(async () => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Import subscriptionsApi dynamically to avoid circular dependencies\n      const { subscriptionsApi } = await import('@rentalshop/utils');\n      const response = await subscriptionsApi.getCurrentUserSubscriptionStatus();\n      \n      if (response.success && response.data) {\n        const data = response.data;\n        \n        // ============================================================================\n        // MAP NEW FLAT RESPONSE STRUCTURE\n        // ============================================================================\n        // Response structure:\n        // {\n        //   status: \"CANCELED\" | \"EXPIRED\" | \"PAST_DUE\" | \"PAUSED\" | \"TRIAL\" | \"ACTIVE\",\n        //   statusReason: \"Canceled on 10/7/2025\",\n        //   hasAccess: false,\n        //   daysRemaining: 31,\n        //   isExpiringSoon: false,\n        //   planName: \"Basic\",\n        //   ...other flat fields\n        // }\n        \n        // Map computed status flags from API\n        const computedStatus = data.status || 'UNKNOWN'; // CANCELED | EXPIRED | PAST_DUE | PAUSED | TRIAL | ACTIVE\n        const apiHasAccess = data.hasAccess ?? false;\n        const apiDaysRemaining = data.daysRemaining ?? null;\n        const apiIsExpiringSoon = data.isExpiringSoon ?? false;\n        \n        // Derive boolean flags from computed status\n        const isActive = computedStatus === 'ACTIVE';\n        const isExpired = computedStatus === 'EXPIRED';\n        const isTrial = computedStatus === 'TRIAL';\n        const isCanceled = computedStatus === 'CANCELED';\n        const isPastDue = computedStatus === 'PAST_DUE';\n        const isPaused = computedStatus === 'PAUSED';\n        \n        // Determine if subscription is active for access (ACTIVE or TRIAL)\n        const hasActive = apiHasAccess; // API already calculated this\n        \n        // Set original state (for backward compatibility)\n        setHasActiveSubscription(hasActive);\n        setIsExpired(isExpired);\n        setIsExpiringSoon(apiIsExpiringSoon);\n        setDaysUntilExpiry(apiDaysRemaining);\n        setSubscriptionType(data.planName || computedStatus);\n        \n        // Set extended state for UI components\n        setHasSubscription(true);\n        setSubscription(data); // Store full response data\n        setStatus(computedStatus);\n        setIsTrial(isTrial);\n        setIsActive(isActive);\n        setPlanName(data.planName || 'Unknown Plan');\n        setError(null);\n        \n        console.log('✅ Subscription status mapped:', {\n          computedStatus,\n          hasAccess: apiHasAccess,\n          daysRemaining: apiDaysRemaining,\n          isExpiringSoon: apiIsExpiringSoon,\n          statusReason: data.statusReason\n        });\n        \n      } else {\n        // No subscription found\n        setHasActiveSubscription(false);\n        setIsExpired(true);\n        setIsExpiringSoon(false);\n        setDaysUntilExpiry(null);\n        setSubscriptionType(null);\n        \n        // Set extended state for UI components\n        setHasSubscription(false);\n        setSubscription(null);\n        setStatus('NO_SUBSCRIPTION');\n        setIsTrial(false);\n        setIsActive(false);\n        setPlanName('');\n        setError('No subscription found');\n      }\n      \n    } catch (error) {\n      console.error('Error fetching subscription status:', error);\n      setHasActiveSubscription(false);\n      setIsExpired(true);\n      setIsExpiringSoon(false);\n      setDaysUntilExpiry(null);\n      setSubscriptionType(null);\n      \n      // Set extended state for UI components\n      setHasSubscription(false);\n      setSubscription(null);\n      setStatus('ERROR');\n      setIsTrial(false);\n      setIsActive(false);\n      setPlanName('');\n      setError(error instanceof Error ? error.message : 'Failed to fetch subscription');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  // Check if user can access a specific feature\n  const canAccessFeature = useCallback((feature: string): boolean => {\n    if (!hasActiveSubscription || isExpired) {\n      return false;\n    }\n    \n    // TODO: Replace with actual feature checking logic\n    // For now, allow all features if subscription is active\n    return true;\n  }, [hasActiveSubscription, isExpired]);\n\n  // Refresh subscription status\n  const refreshStatus = useCallback(async () => {\n    await fetchSubscriptionStatus();\n  }, [fetchSubscriptionStatus]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchSubscriptionStatus();\n  }, [fetchSubscriptionStatus]);\n\n  // Set up interval for periodic checks\n  useEffect(() => {\n    if (!user) return;\n\n    const interval = setInterval(fetchSubscriptionStatus, checkInterval);\n    return () => clearInterval(interval);\n  }, [user, fetchSubscriptionStatus, checkInterval]);\n\n  // Calculate additional properties for other components\n  // Use subscription.statusReason if available (from API), otherwise fallback to computed message\n  const statusMessage = subscription?.statusReason || \n                       (isExpired ? 'Subscription expired' : \n                        isExpiringSoon ? `Expires in ${daysUntilExpiry} days` :\n                        isTrial ? `Trial (${daysUntilExpiry} days left)` :\n                        isActive ? 'Active subscription' : 'No subscription');\n  \n  // Map status to color\n  const statusColor = status === 'EXPIRED' ? 'red' :\n                     status === 'CANCELED' ? 'red' :\n                     status === 'PAST_DUE' ? 'orange' :\n                     status === 'PAUSED' ? 'yellow' :\n                     isExpiringSoon ? 'orange' :\n                     status === 'TRIAL' ? 'yellow' :\n                     status === 'ACTIVE' ? 'green' : 'gray';\n  \n  // Use hasAccess from API (already calculated there)\n  const hasAccess = subscription?.hasAccess ?? (hasActiveSubscription && !isExpired);\n  \n  const accessLevel = status === 'EXPIRED' || status === 'CANCELED' ? 'denied' : \n                     status === 'PAST_DUE' ? 'readonly' :\n                     status === 'PAUSED' ? 'readonly' :\n                     status === 'TRIAL' ? 'limited' :\n                     status === 'ACTIVE' ? 'full' : 'denied';\n  \n  const requiresPayment = status === 'EXPIRED' || status === 'PAST_DUE' || isExpiringSoon;\n  const upgradeRequired = status === 'EXPIRED' || status === 'CANCELED';\n  const gracePeriodEnds = isExpiringSoon && daysUntilExpiry ? new Date(Date.now() + daysUntilExpiry * 24 * 60 * 60 * 1000) : null;\n  const canExportData = hasAccess;\n  const isRestricted = !hasAccess || status === 'TRIAL' || status === 'PAUSED';\n  const isReadOnly = status === 'EXPIRED' || status === 'PAST_DUE' || status === 'PAUSED';\n  const isLimited = status === 'TRIAL';\n  const isDenied = status === 'EXPIRED' || status === 'CANCELED' || !hasActiveSubscription;\n\n  return {\n    // Original interface\n    loading,\n    hasActiveSubscription,\n    isExpired,\n    isExpiringSoon,\n    daysUntilExpiry,\n    subscriptionType,\n    canAccessFeature,\n    refreshStatus,\n    \n    // Extended interface for UI components\n    hasSubscription,\n    subscription,\n    status,\n    isTrial,\n    isActive,\n    planName,\n    error,\n    \n    // Additional properties for other components\n    statusMessage,\n    statusColor,\n    hasAccess,\n    accessLevel,\n    requiresPayment,\n    upgradeRequired,\n    gracePeriodEnds,\n    canExportData,\n    isRestricted,\n    isReadOnly,\n    isLimited,\n    isDenied\n  };\n}\n","'use client';\n\n// ============================================================================\n// CURRENCY HOOK\n// ============================================================================\n\nimport { createContext, useContext, useState, useCallback, useEffect, ReactNode } from 'react';\nimport { \n  CurrencyCode, \n  CurrencySettings, \n  Currency \n} from '@rentalshop/types';\nimport { \n  DEFAULT_CURRENCY_SETTINGS, \n  getCurrency, \n  getCurrentCurrency \n} from '@rentalshop/utils';\n\n// ============================================================================\n// CURRENCY CONTEXT\n// ============================================================================\n\ninterface CurrencyContextType {\n  /** Current currency settings */\n  settings: CurrencySettings;\n  /** Current currency configuration */\n  currentCurrency: Currency;\n  /** Change the current currency */\n  setCurrency: (currency: CurrencyCode) => void;\n  /** Toggle currency symbol visibility */\n  toggleSymbol: () => void;\n  /** Toggle currency code visibility */\n  toggleCode: () => void;\n  /** Get currency by code */\n  getCurrencyByCode: (code: CurrencyCode) => Currency | undefined;\n  /** Convert amount between currencies */\n  convertAmount: (amount: number, from: CurrencyCode, to: CurrencyCode) => number;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\n// ============================================================================\n// CURRENCY PROVIDER\n// ============================================================================\n\ninterface CurrencyProviderProps {\n  children: ReactNode;\n  /** Initial currency settings (optional) */\n  initialSettings?: Partial<CurrencySettings>;\n}\n\nexport function CurrencyProvider({ \n  children, \n  initialSettings = {} \n}: CurrencyProviderProps) {\n  // Initialize settings with defaults and any overrides\n  const [settings, setSettings] = useState<CurrencySettings>({\n    ...DEFAULT_CURRENCY_SETTINGS,\n    ...initialSettings,\n  });\n\n  // Get current currency configuration\n  const currentCurrency = getCurrentCurrency(settings);\n\n  // Change current currency\n  const setCurrency = useCallback((currencyCode: CurrencyCode) => {\n    setSettings(prev => ({\n      ...prev,\n      currentCurrency: currencyCode,\n    }));\n    \n    // Save to localStorage for persistence\n    localStorage.setItem('rentalshop-currency', currencyCode);\n  }, []);\n\n  // Toggle currency symbol visibility\n  const toggleSymbol = useCallback(() => {\n    setSettings(prev => ({\n      ...prev,\n      showSymbol: !prev.showSymbol,\n    }));\n    \n    // Save to localStorage for persistence\n    localStorage.setItem('rentalshop-show-symbol', (!settings.showSymbol).toString());\n  }, [settings.showSymbol]);\n\n  // Toggle currency code visibility\n  const toggleCode = useCallback(() => {\n    setSettings(prev => ({\n      ...prev,\n      showCode: !prev.showCode,\n    }));\n    \n    // Save to localStorage for persistence\n    localStorage.setItem('rentalshop-show-code', (!settings.showCode).toString());\n  }, [settings.showCode]);\n\n  // Get currency by code\n  const getCurrencyByCode = useCallback((code: CurrencyCode) => {\n    return getCurrency(code);\n  }, []);\n\n  // Convert amount between currencies\n  const convertAmount = useCallback((amount: number, from: CurrencyCode, to: CurrencyCode) => {\n    if (from === to) return amount;\n    \n    const fromCurrency = getCurrency(from);\n    const toCurrency = getCurrency(to);\n    \n    if (!fromCurrency || !toCurrency) {\n      throw new Error(`Invalid currency code: ${from} or ${to}`);\n    }\n    \n    // Convert to base currency (USD) first, then to target currency\n    const amountInUSD = amount / fromCurrency.exchangeRate;\n    return amountInUSD * toCurrency.exchangeRate;\n  }, []);\n\n  // Load saved settings from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedCurrency = localStorage.getItem('rentalshop-currency') as CurrencyCode;\n      const savedShowSymbol = localStorage.getItem('rentalshop-show-symbol');\n      const savedShowCode = localStorage.getItem('rentalshop-show-code');\n      \n      if (savedCurrency && isValidCurrencyCode(savedCurrency)) {\n        setSettings(prev => ({ ...prev, currentCurrency: savedCurrency }));\n      }\n      \n      if (savedShowSymbol !== null) {\n        setSettings(prev => ({ ...prev, showSymbol: savedShowSymbol === 'true' }));\n      }\n      \n      if (savedShowCode !== null) {\n        setSettings(prev => ({ ...prev, showCode: savedShowCode === 'true' }));\n      }\n    } catch (error) {\n      console.warn('Failed to load currency settings from localStorage:', error);\n    }\n  }, []);\n\n  const contextValue: CurrencyContextType = {\n    settings,\n    currentCurrency,\n    setCurrency,\n    toggleSymbol,\n    toggleCode,\n    getCurrencyByCode,\n    convertAmount,\n  };\n\n  return (\n    <CurrencyContext.Provider value={contextValue}>\n      {children}\n    </CurrencyContext.Provider>\n  );\n}\n\n// ============================================================================\n// CURRENCY HOOK\n// ============================================================================\n\nexport function useCurrency(): CurrencyContextType {\n  const context = useContext(CurrencyContext);\n  \n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  \n  return context;\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\nfunction isValidCurrencyCode(code: string): code is CurrencyCode {\n  return ['USD', 'VND'].includes(code as CurrencyCode);\n}\n","\"use client\"\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { usePagination } from './usePagination';\nimport { useThrottledSearch } from './useThrottledSearch';\nimport { customersApi } from '@rentalshop/utils';\nimport { PAGINATION } from '@rentalshop/constants';\nimport type { Customer, CustomerFilters as CustomerFiltersType, CustomerCreateInput, CustomerUpdateInput, CustomerInput } from '@rentalshop/types';\n\nexport interface UseCustomerManagementOptions {\n  initialLimit?: number;\n  useSearchCustomers?: boolean; // true for admin (searchCustomers), false for client (getCustomersPaginated)\n  enableStats?: boolean; // true for admin, false for client\n  merchantId?: number; // Optional merchant ID for filtering\n  outletId?: number; // Optional outlet ID for filtering\n}\n\nexport interface UseCustomerManagementReturn {\n  // State\n  customers: Customer[];\n  loading: boolean;\n  searchTerm: string;\n  cityFilter: string;\n  stateFilter: string;\n  countryFilter: string;\n  idTypeFilter: string;\n  statusFilter: string;\n  selectedCustomer: Customer | null;\n  showCustomerDetail: boolean;\n  showCreateForm: boolean;\n  showEditDialog: boolean;\n  pagination: any;\n  \n  // Actions\n  setSearchTerm: (term: string) => void;\n  setCityFilter: (city: string) => void;\n  setStateFilter: (state: string) => void;\n  setCountryFilter: (country: string) => void;\n  setIdTypeFilter: (idType: string) => void;\n  setStatusFilter: (status: string) => void;\n  setSelectedCustomer: (customer: Customer | null) => void;\n  setShowCustomerDetail: (show: boolean) => void;\n  setShowCreateForm: (show: boolean) => void;\n  setShowEditDialog: (show: boolean) => void;\n  \n  // Handlers\n  fetchCustomers: (page?: number) => Promise<void>;\n  handleViewCustomer: (customer: Customer) => void;\n  handleEditCustomer: (customer: Customer) => void;\n  handleToggleStatus: (customer: Customer) => void;\n  handleCustomerUpdated: (updatedCustomer: Customer) => void;\n  handleCustomerError: (error: string) => void;\n  handleCustomerRowAction: (action: string, customerId: number) => void;\n  handleAddCustomer: () => void;\n  handleExportCustomers: () => void;\n  handleFiltersChange: (newFilters: CustomerFiltersType) => void;\n  handleSearchChange: (searchValue: string) => void;\n  handleClearFilters: () => void;\n  handlePageChangeWithFetch: (page: number) => void;\n  handleCustomerCreated: (customerData: CustomerCreateInput) => Promise<void>;\n  handleCustomerUpdatedAsync: (customerData: CustomerUpdateInput) => Promise<void>;\n  \n  // Computed values\n  filteredCustomers: Customer[];\n  filters: CustomerFiltersType;\n  stats?: any;\n}\n\nexport const useCustomerManagement = (options: UseCustomerManagementOptions = {}): UseCustomerManagementReturn => {\n  const router = useRouter();\n  const {\n    initialLimit = PAGINATION.DEFAULT_PAGE_SIZE,\n    useSearchCustomers = false,\n    enableStats = false,\n    merchantId,\n    outletId\n  } = options;\n\n  // State\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [cityFilter, setCityFilter] = useState<string>('');\n  const [stateFilter, setStateFilter] = useState<string>('');\n  const [countryFilter, setCountryFilter] = useState<string>('');\n  const [idTypeFilter, setIdTypeFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [showCustomerDetail, setShowCustomerDetail] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  \n  // Pagination state using shared hook\n  const { pagination, handlePageChange, updatePaginationFromResponse } = usePagination({\n    initialLimit\n  });\n\n  // Throttled search for better performance\n  const { query: searchTerm, handleSearchChange: throttledSearchChange } = useThrottledSearch({\n    delay: 300,\n    minLength: 0,\n    onSearch: (query: string) => {\n      // Trigger search when throttled search completes\n      fetchCustomers(1, query, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter);\n    }\n  });\n\n  // Fetch customers function - stable reference to prevent multiple calls\n  const fetchCustomers = useCallback(async (page: number = pagination.currentPage, searchQuery: string = '', city: string = '', state: string = '', country: string = '', idType: string = 'all', status: string = 'all') => {\n    try {\n      setLoading(true);\n      \n      let response;\n      \n      if (useSearchCustomers) {\n        // Admin page uses searchCustomers with filters\n        const filters: CustomerFiltersType = {\n          search: searchQuery || undefined,\n          city: city || undefined,\n          state: state || undefined,\n          country: country || undefined,\n          idType: idType !== 'all' ? (idType as any) : undefined,\n          isActive: status !== 'all' ? (status === 'active') : undefined,\n          merchantId: merchantId,\n          outletId: outletId,\n          // Add pagination parameters\n          page: page,\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit\n        };\n        \n        response = await customersApi.searchCustomers(filters);\n      } else {\n        // Client page uses getCustomersPaginated\n        response = await customersApi.getCustomersPaginated(page, pagination.limit);\n      }\n      \n      if (response.success && response.data) {\n        if (useSearchCustomers) {\n          // searchCustomers now returns CustomerSearchResponse with pagination info\n          const searchResponse = response.data as any;\n          const customersData = searchResponse.customers || [];\n          const total = searchResponse.total || 0;\n          const totalPagesCount = searchResponse.totalPages || 1;\n          const currentPage = searchResponse.page || 1;\n          const hasMore = searchResponse.hasMore || false;\n          \n          setCustomers(customersData);\n          \n          // Update pagination state with proper search response data\n          updatePaginationFromResponse({\n            total,\n            limit: pagination.limit,\n            offset: (currentPage - 1) * pagination.limit,\n            hasMore\n          });\n        } else {\n          // getCustomersPaginated returns CustomersResponse with nested structure\n          const customersResponse = response.data as any;\n          const customersData = customersResponse.customers || [];\n          const total = customersResponse.total || 0;\n          const totalPagesCount = customersResponse.totalPages || 1;\n          \n          setCustomers(customersData);\n          \n          // Update pagination state using the hook\n          updatePaginationFromResponse({\n            total,\n            limit: pagination.limit,\n            offset: (page - 1) * pagination.limit,\n            hasMore: page < totalPagesCount\n          });\n        }\n      } else {\n        console.error('API Error:', response.error);\n        setCustomers([]);\n      }\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      setCustomers([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [pagination.currentPage, pagination.limit, useSearchCustomers, merchantId, outletId, updatePaginationFromResponse]);\n\n  // Initial fetch and refetch when filters change\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      handlePageChange(1);\n      fetchCustomers(1, searchTerm, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter);\n    }, 300); // Debounce search\n\n    return () => clearTimeout(timeoutId);\n  }, [cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter, handlePageChange]);\n\n  // Filter customers based on current filters\n  const filteredCustomers = useMemo(() => {\n    if (useSearchCustomers) {\n      // Admin page: API handles filtering, return all customers\n      return customers;\n    } else {\n      // Client page: Apply local filtering\n      return (customers || []).filter(customer => {\n        if (!customer || typeof customer !== 'object') {\n          return false;\n        }\n        \n        const fullName = `${customer.firstName || ''} ${customer.lastName || ''}`.trim();\n        const matchesSearch = fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (customer.email || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (customer.phone || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (customer.address || '').toLowerCase().includes(searchTerm.toLowerCase());\n        \n        const matchesCity = !cityFilter || (customer.city || '').toLowerCase().includes(cityFilter.toLowerCase());\n        const matchesState = !stateFilter || (customer.state || '').toLowerCase().includes(stateFilter.toLowerCase());\n        const matchesCountry = !countryFilter || (customer.country || '').toLowerCase().includes(countryFilter.toLowerCase());\n        const matchesIdType = idTypeFilter === 'all' || customer.idType === idTypeFilter;\n        const matchesStatus = statusFilter === 'all' || \n                             (statusFilter === 'active' && customer.isActive) ||\n                             (statusFilter === 'inactive' && !customer.isActive);\n        \n        return matchesSearch && matchesCity && matchesState && matchesCountry && \n               matchesIdType && matchesStatus;\n      });\n    }\n  }, [customers, searchTerm, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter, useSearchCustomers]);\n\n  // Calculate stats if enabled\n  const stats = useMemo(() => {\n    if (!enableStats) return undefined;\n    \n    const customersArray = customers || [];\n    const totalCustomers = customersArray.length;\n    const activeCustomers = customersArray.filter(c => c.isActive).length;\n    const inactiveCustomers = customersArray.filter(c => !c.isActive).length;\n    const customersWithEmail = customersArray.filter(c => c.email && c.email.trim() !== '').length;\n    const customersWithAddress = customersArray.filter(c => c.address && c.address.trim() !== '').length;\n    \n    return { \n      totalCustomers, \n      activeCustomers, \n      inactiveCustomers, \n      customersWithEmail,\n      customersWithAddress\n    };\n  }, [customers, enableStats]);\n\n  // Create filters object for components\n  const filters: CustomerFiltersType = useMemo(() => ({\n    search: searchTerm,\n    city: cityFilter || undefined,\n    state: stateFilter || undefined,\n    country: countryFilter || undefined,\n    idType: idTypeFilter !== 'all' ? idTypeFilter as any : undefined,\n    isActive: statusFilter !== 'all' ? (statusFilter === 'active') : undefined,\n    merchantId: merchantId,\n    outletId: outletId\n  }), [searchTerm, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter, merchantId, outletId]);\n\n  // Event handlers\n  const handleViewCustomer = useCallback((customer: Customer) => {\n    setSelectedCustomer(customer);\n    setShowCustomerDetail(true);\n  }, []);\n\n  const handleEditCustomer = useCallback((customer: Customer) => {\n    setSelectedCustomer(customer);\n    setShowEditDialog(true);\n  }, []);\n\n  const handleToggleStatus = useCallback(async (customer: Customer) => {\n    try {\n      // Use updateCustomer to toggle the isActive status\n      const response = await customersApi.updateCustomer(customer.id, {\n        id: customer.id,\n        isActive: !customer.isActive\n      });\n      \n      if (response.success) {\n        fetchCustomers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update customer status');\n      }\n    } catch (error) {\n      console.error('Error updating customer status:', error);\n    }\n  }, [fetchCustomers]);\n\n  const handleCustomerUpdated = useCallback((updatedCustomer: Customer) => {\n    setShowEditDialog(false);\n    setShowCustomerDetail(false);\n    fetchCustomers(); // Refresh the list to get the latest data\n  }, [fetchCustomers]);\n\n  const handleCustomerError = useCallback((error: string) => {\n    console.error('Customer operation error:', error);\n  }, []);\n\n  const handleCustomerRowAction = useCallback((action: string, customerId: number) => {\n    // Find customer by id (number) - Frontend always uses id\n    const customer = customers.find(c => c.id === customerId);\n    if (!customer) return;\n\n    switch (action) {\n      case 'view':\n        handleViewCustomer(customer);\n        break;\n      case 'edit':\n        handleEditCustomer(customer);\n        break;\n      case 'viewOrders':\n        // Navigate to customer orders page using id\n        console.log('🔄 Navigating to customer orders page:', `/customers/${customerId}/orders`);\n        router.push(`/customers/${customerId}/orders`);\n        break;\n      case 'activate':\n      case 'deactivate':\n        handleToggleStatus(customer);\n        break;\n      case 'delete':\n        // Handle delete action using id\n        console.log('Delete customer:', customerId);\n        break;\n      default:\n        console.log('Unknown action:', action);\n    }\n  }, [customers, handleViewCustomer, handleEditCustomer, handleToggleStatus, router]);\n\n  const handleAddCustomer = useCallback(() => {\n    setShowCreateForm(true);\n  }, []);\n\n  const handleExportCustomers = useCallback(() => {\n    // TODO: Implement export functionality\n    console.log('Export functionality coming soon!');\n  }, []);\n\n  const handleFiltersChange = useCallback((newFilters: CustomerFiltersType) => {\n    setCityFilter(newFilters.city || '');\n    setStateFilter(newFilters.state || '');\n    setCountryFilter(newFilters.country || '');\n    setIdTypeFilter(newFilters.idType || 'all');\n    setStatusFilter(newFilters.isActive !== undefined ? (newFilters.isActive ? 'active' : 'inactive') : 'all');\n    handlePageChange(1);\n  }, [handlePageChange]);\n\n  const handleSearchChange = useCallback((searchValue: string) => {\n    throttledSearchChange(searchValue);\n  }, [throttledSearchChange]);\n\n  const handleClearFilters = useCallback(() => {\n    throttledSearchChange('');\n    setCityFilter('');\n    setStateFilter('');\n    setCountryFilter('');\n    setIdTypeFilter('all');\n    setStatusFilter('all');\n    handlePageChange(1);\n  }, [throttledSearchChange, handlePageChange]);\n\n  const handlePageChangeWithFetch = useCallback((page: number) => {\n    handlePageChange(page);\n    fetchCustomers(page, searchTerm, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter);\n  }, [handlePageChange, fetchCustomers, searchTerm, cityFilter, stateFilter, countryFilter, idTypeFilter, statusFilter]);\n\n  const handleCustomerCreated = useCallback(async (customerData: CustomerCreateInput) => {\n    try {\n      // Convert CustomerCreateInput to CustomerInput by adding merchantId\n      const customerInput: CustomerInput = {\n        ...customerData,\n        merchantId: 1 // TODO: Get from user context or props\n      };\n      \n      const response = await customersApi.createCustomer(customerInput);\n      if (response.success) {\n        setShowCreateForm(false);\n        fetchCustomers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to create customer');\n      }\n    } catch (error) {\n      console.error('Error creating customer:', error);\n      throw error; // Re-throw to let the form handle the error\n    }\n  }, [fetchCustomers]);\n\n  const handleCustomerUpdatedAsync = useCallback(async (customerData: CustomerUpdateInput) => {\n    if (!selectedCustomer) return;\n    \n    try {\n      const response = await customersApi.updateCustomer(selectedCustomer.id, customerData);\n      if (response.success) {\n        setShowEditDialog(false);\n        fetchCustomers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update customer');\n      }\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      throw error; // Re-throw to let the form handle the error\n    }\n  }, [selectedCustomer, fetchCustomers]);\n\n  return {\n    // State\n    customers,\n    loading,\n    searchTerm,\n    cityFilter,\n    stateFilter,\n    countryFilter,\n    idTypeFilter,\n    statusFilter,\n    selectedCustomer,\n    showCustomerDetail,\n    showCreateForm,\n    showEditDialog,\n    pagination,\n    \n    // Actions\n    setSearchTerm: throttledSearchChange, // Use throttled search for better performance\n    setCityFilter,\n    setStateFilter,\n    setCountryFilter,\n    setIdTypeFilter,\n    setStatusFilter,\n    setSelectedCustomer,\n    setShowCustomerDetail,\n    setShowCreateForm,\n    setShowEditDialog,\n    \n    // Handlers\n    fetchCustomers,\n    handleViewCustomer,\n    handleEditCustomer,\n    handleToggleStatus,\n    handleCustomerUpdated,\n    handleCustomerError,\n    handleCustomerRowAction,\n    handleAddCustomer,\n    handleExportCustomers,\n    handleFiltersChange,\n    handleSearchChange,\n    handleClearFilters,\n    handlePageChangeWithFetch,\n    handleCustomerCreated,\n    handleCustomerUpdatedAsync,\n    \n    // Computed values\n    filteredCustomers,\n    filters,\n    stats\n  };\n};\n","\"use client\"\n\nimport { useState, useCallback } from 'react';\nimport { PAGINATION } from '@rentalshop/constants';\n\nexport interface PaginationState {\n  total: number;\n  limit: number;\n  offset: number;\n  hasMore: boolean;\n  currentPage: number;\n  totalPages: number;\n}\n\nexport interface PaginationConfig {\n  initialLimit?: number;\n  initialOffset?: number;\n}\n\nexport interface UsePaginationReturn {\n  pagination: PaginationState;\n  setPagination: (pagination: Partial<PaginationState>) => void;\n  handlePageChange: (page: number) => void;\n  resetPagination: () => void;\n  updatePaginationFromResponse: (response: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore?: boolean;\n  }) => void;\n}\n\nexport function usePagination(config: PaginationConfig = {}): UsePaginationReturn {\n  const { initialLimit = PAGINATION.DEFAULT_PAGE_SIZE, initialOffset = 0 } = config;\n  \n  const [pagination, setPaginationState] = useState<PaginationState>({\n    total: 0,\n    limit: initialLimit,\n    offset: initialOffset,\n    hasMore: false,\n    currentPage: 1,\n    totalPages: 1\n  });\n\n  const setPagination = useCallback((newPagination: Partial<PaginationState>) => {\n    setPaginationState(prev => ({\n      ...prev,\n      ...newPagination,\n      currentPage: Math.floor((newPagination.offset ?? prev.offset) / (newPagination.limit ?? prev.limit)) + 1,\n      totalPages: Math.ceil((newPagination.total ?? prev.total) / (newPagination.limit ?? prev.limit))\n    }));\n  }, []);\n\n  const handlePageChange = useCallback((page: number) => {\n    const newOffset = (page - 1) * pagination.limit;\n    setPagination({\n      offset: newOffset,\n      currentPage: page\n    });\n  }, [pagination.limit, setPagination]);\n\n\n\n  const resetPagination = useCallback(() => {\n    setPagination({\n      total: 0,\n      offset: initialOffset,\n      hasMore: false,\n      currentPage: 1,\n      totalPages: 1\n    });\n  }, [initialOffset, setPagination]);\n\n  const updatePaginationFromResponse = useCallback((response: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore?: boolean;\n  }) => {\n    setPagination({\n      total: response.total,\n      limit: response.limit,\n      offset: response.offset,\n      hasMore: response.hasMore ?? (response.offset + response.limit < response.total),\n      currentPage: Math.floor(response.offset / response.limit) + 1,\n      totalPages: Math.ceil(response.total / response.limit)\n    });\n  }, [setPagination]);\n\n  return {\n    pagination,\n    setPagination,\n    handlePageChange,\n    resetPagination,\n    updatePaginationFromResponse\n  };\n}\n","'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\nexport interface ThrottledSearchOptions {\n  delay: number;\n  minLength: number;\n  onSearch: (query: string) => void;\n}\n\nexport interface ThrottledSearchReturn {\n  query: string;\n  isSearching: boolean;\n  handleSearchChange: (value: string) => void;\n  clearSearch: () => void;\n  cleanup: () => void;\n  setQuery: (value: string) => void;\n}\n\n// ============================================================================\n// USE THROTTLED SEARCH HOOK\n// ============================================================================\n\nexport function useThrottledSearch(options: ThrottledSearchOptions): ThrottledSearchReturn {\n  const { delay, minLength, onSearch } = options;\n  \n  const [query, setQuery] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const isSearchingRef = useRef(false);\n  const isInitialRender = useRef(true); // Track initial render\n\n  // ============================================================================\n  // SEARCH FUNCTIONS\n  // ============================================================================\n\n  const handleSearchChange = useCallback((value: string) => {\n    console.log('🔍 useThrottledSearch: handleSearchChange called with:', value);\n    setQuery(value);\n    \n    // Clear existing timeout\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    // Only search if query meets minimum length\n    if (value.length >= minLength) {\n      console.log('🔍 useThrottledSearch: Query meets minLength, setting up timeout');\n      setIsSearching(true);\n      isSearchingRef.current = true;\n      \n      // Set new timeout for debounced search\n      timeoutRef.current = setTimeout(() => {\n        console.log('🔍 useThrottledSearch: Timeout executing, calling onSearch with:', value);\n        onSearch(value);\n        setIsSearching(false);\n        isSearchingRef.current = false;\n      }, delay);\n    } else if (value.length === 0) {\n      console.log('🔍 useThrottledSearch: Query is empty, clearing search');\n      // Clear search when query is empty\n      setIsSearching(false);\n      isSearchingRef.current = false;\n      if (!isInitialRender.current) {\n        onSearch('');\n      }\n    } else {\n      console.log('🔍 useThrottledSearch: Query too short, not searching');\n      // Query too short, not searching\n      setIsSearching(false);\n      isSearchingRef.current = false;\n    }\n  }, [delay, minLength, onSearch]);\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    setIsSearching(false);\n    isSearchingRef.current = false;\n    \n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    if (!isInitialRender.current) {\n        onSearch('');\n      }\n  }, [onSearch]);\n\n  const cleanup = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n  }, []);\n\n  // ============================================================================\n  // EFFECTS\n  // ============================================================================\n\n  useEffect(() => {\n    // Mark that initial render is complete\n    isInitialRender.current = false;\n    \n    \n    // Cleanup on unmount\n    return cleanup;\n  }, [cleanup]);\n\n  // ============================================================================\n  // RETURN VALUES\n  // ============================================================================\n\n  return {\n    query,\n    isSearching,\n    handleSearchChange,\n    clearSearch,\n    cleanup,\n    setQuery,\n  };\n}\n","\"use client\"\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { usePagination } from './usePagination';\nimport { useThrottledSearch } from './useThrottledSearch';\nimport { useSimpleErrorHandler } from './useToast';\nimport { ordersApi } from '@rentalshop/utils';\nimport { PAGINATION } from '@rentalshop/constants';\nimport type { Order, OrderWithDetails, OrderFilters, OrderCreateInput, OrderUpdateInput, OrderType, OrderStatus } from '@rentalshop/types';\n\nexport interface UseOrderManagementOptions {\n  initialLimit?: number;\n  useSearchOrders?: boolean; // true for admin (searchOrders), false for client (getOrdersPaginated)\n  enableStats?: boolean; // true for admin, false for client\n  merchantId?: number; // For merchant-specific order management\n  outletId?: number; // For outlet-specific order management\n}\n\nexport interface UseOrderManagementReturn {\n  // State\n  orders: OrderWithDetails[];\n  loading: boolean;\n  searchTerm: string;\n  statusFilter: string;\n  orderTypeFilter: string;\n  outletFilter: string;\n  dateRangeFilter: { start: string; end: string };\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n  selectedOrder: Order | OrderWithDetails | null;\n  showOrderDetail: boolean;\n  showCreateForm: boolean;\n  showEditDialog: boolean;\n  pagination: any;\n  stats: any;\n  \n  // Actions\n  setSearchTerm: (term: string) => void;\n  setStatusFilter: (status: string) => void;\n  setOrderTypeFilter: (orderType: string) => void;\n  setOutletFilter: (outlet: string) => void;\n  setDateRangeFilter: (dateRange: { start: string; end: string }) => void;\n  setSortBy: (sortBy: string) => void;\n  setSortOrder: (sortOrder: 'asc' | 'desc') => void;\n  setSelectedOrder: (order: Order | null) => void;\n  setShowOrderDetail: (show: boolean) => void;\n  setShowCreateForm: (show: boolean) => void;\n  setShowEditDialog: (show: boolean) => void;\n  \n  // Handlers\n  fetchOrders: (page?: number, searchQuery?: string, status?: string, orderType?: string, outlet?: string, dateRange?: { start: string; end: string }, sortBy?: string, sortOrder?: 'asc' | 'desc') => Promise<void>;\n  handleViewOrder: (order: Order) => void;\n  handleEditOrder: (order: Order) => void;\n  handlePickupOrder: (orderId: number) => Promise<{ success: boolean; error?: string }>;\n  handleReturnOrder: (orderId: number) => Promise<{ success: boolean; error?: string }>;\n  handleCancelOrder: (orderId: number) => Promise<{ success: boolean; error?: string }>;\n  handlePageChange: (page: number) => void;\n  handleSearchChange: (searchValue: string) => void;\n  handleFiltersChange: (filters: Partial<OrderFilters>) => void;\n  handleClearFilters: () => void;\n  handleSort: (column: string) => void;\n  refreshOrders: () => Promise<void>;\n  refreshStats: () => Promise<void>;\n}\n\nexport function useOrderManagement(options: UseOrderManagementOptions = {}): UseOrderManagementReturn {\n  const {\n    initialLimit = PAGINATION.DEFAULT_PAGE_SIZE,\n    useSearchOrders = true,\n    enableStats = false,\n    merchantId,\n    outletId\n  } = options;\n\n  // State\n  const [orders, setOrders] = useState<OrderWithDetails[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [orderTypeFilter, setOrderTypeFilter] = useState('all');\n  const [outletFilter, setOutletFilter] = useState('all');\n  const [dateRangeFilter, setDateRangeFilter] = useState<{ start: string; end: string }>({ start: '', end: '' });\n  const [sortBy, setSortBy] = useState('createdAt');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [selectedOrder, setSelectedOrder] = useState<Order | OrderWithDetails | null>(null);\n  const [showOrderDetail, setShowOrderDetail] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [stats, setStats] = useState<any>(null);\n\n  // Pagination hook\n  const { pagination, handlePageChange: paginationPageChange, updatePaginationFromResponse } = usePagination({\n    initialLimit,\n    initialOffset: 0\n  });\n\n  // Throttled search hook\n  const { handleSearchChange: throttledSearchChange } = useThrottledSearch({\n    minLength: 0,\n    delay: 300,\n    onSearch: (query: string) => {\n      // Trigger search when throttled search completes\n      fetchOrders(1, query, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n    }\n  });\n\n  // Fetch orders function - stable reference to prevent multiple calls\n  const fetchOrders = useCallback(async (page: number = 1, searchQuery: string = '', status: string = 'all', orderType: string = 'all', outlet: string = 'all', dateRange: { start: string; end: string } = { start: '', end: '' }, sortByParam: string = 'createdAt', sortOrderParam: 'asc' | 'desc' = 'desc') => {\n    try {\n      setLoading(true);\n      \n      let response;\n      \n      if (useSearchOrders) {\n        // Admin page uses searchOrders with filters\n        const filters: OrderFilters = {\n          search: searchQuery || undefined,\n          status: status !== 'all' ? (status as OrderStatus) : undefined,\n          orderType: orderType !== 'all' ? (orderType as OrderType) : undefined,\n          outletId: outlet !== 'all' ? parseInt(outlet) : undefined,\n          startDate: dateRange.start || undefined,\n          endDate: dateRange.end || undefined,\n          // Add pagination parameters\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit,\n          page: page\n        };\n        \n        console.log('🔍 fetchOrders - Calling API with filters:', {\n          outletParam: outlet,\n          outletId: filters.outletId,\n          status: filters.status,\n          orderType: filters.orderType\n        });\n        \n        response = await ordersApi.searchOrders(filters);\n      } else {\n        // Client page uses getOrdersPaginated\n        response = await ordersApi.getOrdersPaginated(page, pagination.limit);\n      }\n      \n      if (response.success && response.data) {\n        // Handle different response structures\n        let ordersData: OrderWithDetails[];\n        let total: number;\n        let totalPagesCount: number;\n        \n        if (Array.isArray(response.data)) {\n          // Direct array response\n          ordersData = response.data as OrderWithDetails[];\n          total = response.data.length;\n          totalPagesCount = 1;\n        } else if (response.data.orders) {\n          // Nested response structure\n          ordersData = response.data.orders as unknown as OrderWithDetails[];\n          total = response.data.total || 0;\n          totalPagesCount = response.data.totalPages || 1;\n        } else {\n          ordersData = [];\n          total = 0;\n          totalPagesCount = 1;\n        }\n        \n        setOrders(ordersData);\n        \n        // Update pagination from response\n        updatePaginationFromResponse({\n          total,\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit,\n          hasMore: page < totalPagesCount\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      // Let component handle error notification\n    } finally {\n      setLoading(false);\n    }\n  }, [pagination.limit, useSearchOrders, updatePaginationFromResponse]);\n\n  // Fetch stats function\n  const fetchStats = useCallback(async () => {\n    if (!enableStats) return;\n    \n    try {\n      console.log('Fetching order stats...');\n      const response = await ordersApi.getOrderStats();\n      console.log('Order stats response:', response);\n      \n      if (response.success && response.data) {\n        console.log('Setting stats:', response.data);\n        setStats(response.data);\n      } else {\n        console.error('Stats API failed:', response);\n      }\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      // Let component handle error notification\n    }\n  }, [enableStats]);\n\n  // Effect for initial load and filter changes\n  useEffect(() => {\n    fetchOrders(1, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n  }, [searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder]);\n\n  // Effect for stats\n  useEffect(() => {\n    if (enableStats) {\n      fetchStats();\n    }\n  }, [enableStats, fetchStats]);\n\n  // Handlers\n  const handleViewOrder = useCallback((order: Order) => {\n    setSelectedOrder(order);\n    setShowOrderDetail(true);\n  }, []);\n\n  const handleEditOrder = useCallback((order: Order) => {\n    setSelectedOrder(order);\n    setShowEditDialog(true);\n  }, []);\n\n  const handlePickupOrder = useCallback(async (orderId: number) => {\n    try {\n      const response = await ordersApi.pickupOrder(orderId);\n      \n      if (response.success) {\n        await fetchOrders(pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n        if (enableStats) {\n          await fetchStats();\n        }\n        return { success: true };\n      } else {\n        throw new Error(response.error || 'Failed to pickup order');\n      }\n    } catch (error) {\n      console.error('Error picking up order:', error);\n      return { success: false, error: (error as Error).message };\n    }\n  }, [fetchOrders, fetchStats, pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder, enableStats]);\n\n  const handleReturnOrder = useCallback(async (orderId: number) => {\n    try {\n      const response = await ordersApi.returnOrder(orderId);\n      \n      if (response.success) {\n        await fetchOrders(pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n        if (enableStats) {\n          await fetchStats();\n        }\n        return { success: true };\n      } else {\n        throw new Error(response.error || 'Failed to return order');\n      }\n    } catch (error) {\n      console.error('Error returning order:', error);\n      return { success: false, error: (error as Error).message };\n    }\n  }, [fetchOrders, fetchStats, pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder, enableStats]);\n\n  const handleCancelOrder = useCallback(async (orderId: number) => {\n    try {\n      const response = await ordersApi.cancelOrder(orderId);\n      \n      if (response.success) {\n        await fetchOrders(pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n        if (enableStats) {\n          await fetchStats();\n        }\n        return { success: true };\n      } else {\n        throw new Error(response.error || 'Failed to cancel order');\n      }\n    } catch (error) {\n      console.error('Error cancelling order:', error);\n      return { success: false, error: (error as Error).message };\n    }\n  }, [fetchOrders, fetchStats, pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder, enableStats]);\n\n  const handlePageChange = useCallback((page: number) => {\n    paginationPageChange(page);\n    fetchOrders(page, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n  }, [paginationPageChange, fetchOrders, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder]);\n\n  const handleSearchChange = useCallback((searchValue: string) => {\n    setSearchTerm(searchValue);\n    throttledSearchChange(searchValue);\n  }, [throttledSearchChange]);\n\n  const handleFiltersChange = useCallback((newFilters: Partial<OrderFilters>) => {\n    console.log('🔧 handleFiltersChange called with:', newFilters);\n    \n    if ('status' in newFilters) {\n      // Handle 'all' case for UI filter state (not part of OrderStatus type)\n      // Use 'in' operator to detect undefined values as well\n      const statusValue = newFilters.status as any;\n      const newStatusFilter = statusValue === undefined || statusValue === 'all' ? 'all' : (Array.isArray(newFilters.status) ? newFilters.status[0] : newFilters.status) as string;\n      console.log('🔧 Setting statusFilter:', newStatusFilter);\n      setStatusFilter(newStatusFilter);\n    }\n    if ('orderType' in newFilters) {\n      // Handle 'all' case for UI filter state (not part of OrderType type)\n      // Use 'in' operator to detect undefined values as well\n      const orderTypeValue = newFilters.orderType as any;\n      const newOrderTypeFilter = orderTypeValue === undefined || orderTypeValue === 'all' ? 'all' : newFilters.orderType as string;\n      console.log('🔧 Setting orderTypeFilter:', newOrderTypeFilter);\n      setOrderTypeFilter(newOrderTypeFilter);\n    }\n    if ('outletId' in newFilters) {\n      // Handle 'all' case for UI filter state (outletId is number, not string)\n      // Use 'in' operator to detect undefined values as well\n      const outletIdValue = newFilters.outletId as any;\n      const newOutletFilter = outletIdValue === undefined || outletIdValue === 'all' || outletIdValue === null ? 'all' : (newFilters.outletId?.toString() || 'all');\n      console.log('🔧 Setting outletFilter:', newOutletFilter, 'from:', newFilters.outletId);\n      setOutletFilter(newOutletFilter);\n    }\n    if (newFilters.startDate !== undefined || newFilters.endDate !== undefined) {\n      setDateRangeFilter({\n        start: newFilters.startDate?.toString() || '',\n        end: newFilters.endDate?.toString() || ''\n      });\n    }\n    if (newFilters.sortBy !== undefined) {\n      setSortBy(newFilters.sortBy);\n    }\n    if (newFilters.sortOrder !== undefined) {\n      setSortOrder(newFilters.sortOrder);\n    }\n  }, []);\n\n  const handleClearFilters = useCallback(() => {\n    setSearchTerm('');\n    setStatusFilter('all');\n    setOrderTypeFilter('all');\n    setOutletFilter('all');\n    setDateRangeFilter({ start: '', end: '' });\n    setSortBy('createdAt');\n    setSortOrder('desc');\n    throttledSearchChange('');\n    paginationPageChange(1);\n  }, [throttledSearchChange, paginationPageChange]);\n\n  const handleSort = useCallback((column: string) => {\n    const columnMapping: Record<string, string> = {\n      'orderNumber': 'orderNumber',\n      'customerName': 'customerName',\n      'orderType': 'orderType',\n      'status': 'status',\n      'totalAmount': 'totalAmount',\n      'pickupPlanAt': 'pickupPlanAt',\n      'returnPlanAt': 'returnPlanAt',\n      'createdAt': 'createdAt'\n    };\n    \n    const newSortBy = columnMapping[column] || 'createdAt';\n    const newSortOrder = sortBy === newSortBy && sortOrder === 'asc' ? 'desc' : 'asc';\n    \n    setSortBy(newSortBy);\n    setSortOrder(newSortOrder);\n    paginationPageChange(1);\n  }, [sortBy, sortOrder, paginationPageChange]);\n\n  const refreshOrders = useCallback(async () => {\n    await fetchOrders(pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder);\n  }, [fetchOrders, pagination.currentPage, searchTerm, statusFilter, orderTypeFilter, outletFilter, dateRangeFilter, sortBy, sortOrder]);\n\n  const refreshStats = useCallback(async () => {\n    if (enableStats) {\n      await fetchStats();\n    }\n  }, [fetchStats, enableStats]);\n\n  return {\n    // State\n    orders,\n    loading,\n    searchTerm,\n    statusFilter,\n    orderTypeFilter,\n    outletFilter,\n    dateRangeFilter,\n    sortBy,\n    sortOrder,\n    selectedOrder,\n    showOrderDetail,\n    showCreateForm,\n    showEditDialog,\n    pagination,\n    stats,\n    \n    // Actions\n    setSearchTerm: throttledSearchChange,\n    setStatusFilter,\n    setOrderTypeFilter,\n    setOutletFilter,\n    setDateRangeFilter,\n    setSortBy,\n    setSortOrder,\n    setSelectedOrder,\n    setShowOrderDetail,\n    setShowCreateForm,\n    setShowEditDialog,\n    \n    // Handlers\n    fetchOrders,\n    handleViewOrder,\n    handleEditOrder,\n    handlePickupOrder,\n    handleReturnOrder,\n    handleCancelOrder,\n    handlePageChange,\n    handleSearchChange,\n    handleFiltersChange,\n    handleClearFilters,\n    handleSort,\n    refreshOrders,\n    refreshStats\n  };\n}\n","'use client';\n\nimport { useCallback } from 'react';\nimport type { Product } from '@rentalshop/types';\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\n// Product interface is now imported from @rentalshop/types\n\nexport interface Order {\n  id: number;\n  orderType: string;\n  status: string;\n  pickupPlanAt: string;\n  returnPlanAt: string;\n  orderItems: Array<{\n    productId: number;\n    quantity: number;\n    name: string;\n  }>;\n}\n\nexport interface AvailabilityStatus {\n  available: boolean;\n  availableQuantity: number;\n  conflicts: Order[];\n  message: string;\n}\n\n// ============================================================================\n// USE PRODUCT AVAILABILITY HOOK\n// ============================================================================\n\nexport function useProductAvailability() {\n  // ============================================================================\n  // AVAILABILITY CALCULATION\n  // ============================================================================\n\n  const calculateAvailability = useCallback((\n    product: Product,\n    pickupDate: string,\n    returnDate: string,\n    requestedQuantity: number,\n    existingOrders: Order[] = []\n  ): AvailabilityStatus => {\n    // Convert dates to Date objects\n    const pickup = new Date(pickupDate);\n    const return_ = new Date(returnDate);\n    \n    // Validate dates\n    if (pickup >= return_) {\n      return {\n        available: false,\n        availableQuantity: 0,\n        conflicts: [],\n        message: 'Return date must be after pickup date'\n      };\n    }\n\n    // Find conflicting orders for this product\n    const conflicts = existingOrders.filter(order => {\n      // Only check RENT orders\n      if (order.orderType !== 'RENT') return false;\n      \n      // Check if order is active (not completed/cancelled)\n      const activeStatuses = ['RESERVED', 'PICKUPED'];\n      if (!activeStatuses.includes(order.status)) return false;\n      \n      // Check if order items contain this product\n      const hasProduct = order.orderItems.some(item => item.productId === product.id);\n      if (!hasProduct) return false;\n      \n      // Check date overlap\n      const orderPickup = new Date(order.pickupPlanAt);\n      const orderReturn = new Date(order.returnPlanAt);\n      \n      // Check if dates overlap\n      return (\n        (pickup <= orderReturn && return_ >= orderPickup) ||\n        (orderPickup <= return_ && orderReturn >= pickup)\n      );\n    });\n\n    // Calculate total quantity needed during the requested period\n    const conflictingQuantity = conflicts.reduce((total, order) => {\n      const orderItem = order.orderItems.find(item => item.productId === product.id);\n      return total + (orderItem?.quantity || 0);\n    }, 0);\n\n    // Calculate available quantity\n    const availableQuantity = Math.max(0, product.available - conflictingQuantity);\n    const available = availableQuantity >= requestedQuantity;\n\n    // Generate message\n    let message = '';\n    if (available) {\n      message = `Available: ${availableQuantity} units`;\n    } else {\n      message = `Only ${availableQuantity} units available (requested: ${requestedQuantity})`;\n    }\n\n    return {\n      available,\n      availableQuantity,\n      conflicts,\n      message,\n    };\n  }, []);\n\n  // ============================================================================\n  // QUICK AVAILABILITY CHECK\n  // ============================================================================\n\n  const isProductAvailable = useCallback((\n    product: Product,\n    pickupDate: string,\n    returnDate: string,\n    requestedQuantity: number,\n    existingOrders: Order[] = []\n  ): boolean => {\n    const status = calculateAvailability(product, pickupDate, returnDate, requestedQuantity, existingOrders);\n    return status.available;\n  }, [calculateAvailability]);\n\n  // ============================================================================\n  // AVAILABILITY FOR DATE RANGE\n  // ============================================================================\n\n  const getAvailabilityForDateRange = useCallback((\n    product: Product,\n    startDate: string,\n    endDate: string,\n    existingOrders: Order[] = []\n  ): Array<{ date: string; available: number; conflicts: Order[] }> => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const results = [];\n    \n    // Check availability for each day in the range\n    for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n      const dateStr = date.toISOString().split('T')[0];\n      const status = calculateAvailability(\n        product, \n        dateStr, \n        dateStr, \n        1, \n        existingOrders\n      );\n      \n      results.push({\n        date: dateStr,\n        available: status.availableQuantity,\n        conflicts: status.conflicts,\n      });\n    }\n    \n    return results;\n  }, [calculateAvailability]);\n\n  // ============================================================================\n  // RETURN VALUES\n  // ============================================================================\n\n  return {\n    calculateAvailability,\n    isProductAvailable,\n    getAvailabilityForDateRange,\n  };\n}\n","\"use client\"\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { usePagination } from './usePagination';\nimport { useThrottledSearch } from './useThrottledSearch';\nimport { useSimpleErrorHandler } from './useToast';\nimport { productsApi, isErrorResponse } from '@rentalshop/utils';\nimport { PAGINATION } from '@rentalshop/constants';\nimport type { Product, ProductWithDetails, ProductWithStock, ProductFilters, ProductCreateInput, ProductUpdateInput } from '@rentalshop/types';\n\nexport interface UseProductManagementOptions {\n  initialLimit?: number;\n  useSearchProducts?: boolean; // true for admin (searchProducts), false for client (getProductsPaginated)\n  enableStats?: boolean; // true for admin, false for client\n  merchantId?: number; // For merchant-specific product management\n  outletId?: number; // For outlet-specific product management\n}\n\nexport interface UseProductManagementReturn {\n  // State\n  products: Product[];\n  loading: boolean;\n  searchTerm: string;\n  categoryFilter: string;\n  outletFilter: string;\n  availabilityFilter: string;\n  statusFilter: string;\n  selectedProduct: Product | ProductWithStock | null;\n  showProductDetail: boolean;\n  showCreateForm: boolean;\n  showEditDialog: boolean;\n  showOrdersDialog: boolean;\n  showDeleteDialog: boolean;\n  pagination: any;\n  \n  // Actions\n  setSearchTerm: (term: string) => void;\n  setCategoryFilter: (category: string) => void;\n  setOutletFilter: (outlet: string) => void;\n  setAvailabilityFilter: (availability: string) => void;\n  setStatusFilter: (status: string) => void;\n  setSelectedProduct: (product: Product | null) => void;\n  setShowProductDetail: (show: boolean) => void;\n  setShowCreateForm: (show: boolean) => void;\n  setShowEditDialog: (show: boolean) => void;\n  setShowOrdersDialog: (show: boolean) => void;\n  setShowDeleteDialog: (show: boolean) => void;\n  \n  // Handlers\n  fetchProducts: (page?: number) => Promise<void>;\n  handleViewProduct: (product: Product) => void;\n  handleEditProduct: (product: Product) => void;\n  handleToggleStatus: (product: Product) => void;\n  handleProductUpdated: (updatedProduct: Product) => void;\n  handleProductError: (error: string) => void;\n  handleProductRowAction: (action: string, productId: number) => void;\n  handleAddProduct: () => void;\n  handleExportProducts: () => void;\n  handleFiltersChange: (newFilters: ProductFilters) => void;\n  handleSearchChange: (searchValue: string) => void;\n  handleClearFilters: () => void;\n  handlePageChangeWithFetch: (page: number) => void;\n  handleProductCreated: (productData: ProductCreateInput) => Promise<void>;\n  handleProductUpdatedAsync: (productData: ProductUpdateInput) => Promise<void>;\n  handleDeleteProduct: (productId: number) => Promise<void>;\n  \n  // Computed values\n  filteredProducts: Product[];\n  filters: ProductFilters;\n  stats?: any;\n}\n\nexport const useProductManagement = (options: UseProductManagementOptions = {}): UseProductManagementReturn => {\n  const {\n    initialLimit = PAGINATION.DEFAULT_PAGE_SIZE,\n    useSearchProducts = false,\n    enableStats = false,\n    merchantId,\n    outletId\n  } = options;\n\n  // Add error handling\n  const { handleError } = useSimpleErrorHandler();\n\n  // State\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [outletFilter, setOutletFilter] = useState<string>('all');\n  const [availabilityFilter, setAvailabilityFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedProduct, setSelectedProduct] = useState<Product | ProductWithStock | null>(null);\n  const [showProductDetail, setShowProductDetail] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showOrdersDialog, setShowOrdersDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  \n  // Pagination state using shared hook\n  const { pagination, handlePageChange, updatePaginationFromResponse } = usePagination({\n    initialLimit\n  });\n\n  // Throttled search for better performance\n  const { query: searchTerm, handleSearchChange: throttledSearchChange } = useThrottledSearch({\n    delay: 300,\n    minLength: 0,\n    onSearch: (query: string) => {\n      // Trigger search when throttled search completes\n      fetchProducts(1, query, categoryFilter, outletFilter, availabilityFilter, statusFilter);\n    }\n  });\n\n  // Fetch products function - stable reference to prevent multiple calls\n  const fetchProducts = useCallback(async (page: number = pagination.currentPage, searchQuery: string = '', category: string = 'all', outlet: string = 'all', availability: string = 'all', status: string = 'all') => {\n    try {\n      setLoading(true);\n      \n      let response;\n      \n      if (useSearchProducts) {\n        // Admin page uses searchMerchantProducts with filters\n        const filters: ProductFilters = {\n          search: searchQuery || undefined,\n          categoryId: category !== 'all' ? parseInt(category) : undefined,\n          outletId: outlet !== 'all' ? parseInt(outlet) : undefined,\n          available: availability === 'in-stock' ? true : \n                    availability === 'out-of-stock' ? false : undefined,\n          status: status !== 'all' ? (status as 'active' | 'inactive') : undefined,\n          // Add pagination parameters\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit,\n          page: page\n        };\n        \n        // Use merchant-specific API for admin context\n        if (merchantId) {\n          response = await productsApi.searchMerchantProducts(merchantId, filters);\n        } else {\n          // Fallback to regular searchProducts for client context\n          response = await productsApi.searchProducts(filters);\n        }\n      } else {\n        // Client page uses getProductsPaginated\n        response = await productsApi.getProductsPaginated(page, pagination.limit);\n      }\n      \n      if (response.success && response.data) {\n        // Handle different response structures\n        let productsData: Product[];\n        let total: number;\n        let totalPagesCount: number;\n        \n        if (Array.isArray(response.data)) {\n          // Direct array response\n          productsData = response.data;\n          total = response.data.length;\n          totalPagesCount = 1;\n        } else if (response.data.products) {\n          // Nested response structure\n          productsData = response.data.products;\n          total = response.data.total || 0;\n          totalPagesCount = response.data.totalPages || 1;\n        } else {\n          // Fallback\n          productsData = [];\n          total = 0;\n          totalPagesCount = 1;\n        }\n        \n        setProducts(productsData);\n        \n        // Update pagination state using the hook\n        updatePaginationFromResponse({\n          total,\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit,\n          hasMore: page < totalPagesCount\n        });\n      } else if (isErrorResponse(response)) {\n        console.error('API Error:', response.message);\n        setProducts([]);\n      }\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      setProducts([]);\n      // Let component handle error notification\n    } finally {\n      setLoading(false);\n    }\n  }, [pagination.limit, useSearchProducts, updatePaginationFromResponse, merchantId]);\n\n  // Initial fetch and refetch when filters change\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      handlePageChange(1);\n      fetchProducts(1, searchTerm, categoryFilter, outletFilter, availabilityFilter, statusFilter);\n    }, 300); // Debounce search\n\n    return () => clearTimeout(timeoutId);\n  }, [categoryFilter, outletFilter, availabilityFilter, statusFilter, handlePageChange]);\n\n  // Filter products based on current filters\n  const filteredProducts = useMemo(() => {\n    if (useSearchProducts) {\n      // Admin page: API handles filtering, return all products\n      return products;\n    } else {\n      // Client page: Apply local filtering\n      return (products || []).filter(product => {\n        if (!product || typeof product !== 'object') {\n          return false;\n        }\n        \n        const matchesSearch = (product.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (product.description || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (product.barcode || '').toLowerCase().includes(searchTerm.toLowerCase());\n        \n        // Check category - use categoryId for Product, category.id for ProductWithDetails\n        const productCategoryId = 'category' in product ? (product as any).category?.id : product.categoryId;\n        const matchesCategory = categoryFilter === 'all' || \n                               (productCategoryId && productCategoryId.toString() === categoryFilter);\n        \n        // Check outlet - only available in ProductWithDetails\n        const productOutletId = 'outlet' in product ? (product as any).outlet?.id : undefined;\n        const matchesOutlet = outletFilter === 'all' || \n                             (productOutletId && productOutletId.toString() === outletFilter);\n        \n        const matchesAvailability = availabilityFilter === 'all' ||\n                                   (availabilityFilter === 'in-stock' && product.available > 0) ||\n                                   (availabilityFilter === 'out-of-stock' && product.available === 0) ||\n                                   (availabilityFilter === 'low-stock' && product.available > 0 && product.available < 5);\n        \n        const matchesStatus = statusFilter === 'all' || \n                             (statusFilter === 'active' && product.isActive) ||\n                             (statusFilter === 'inactive' && !product.isActive);\n        \n        return matchesSearch && matchesCategory && matchesOutlet && matchesAvailability && matchesStatus;\n      });\n    }\n  }, [products, searchTerm, categoryFilter, outletFilter, availabilityFilter, statusFilter, useSearchProducts]);\n\n  // Calculate stats if enabled\n  const stats = useMemo(() => {\n    if (!enableStats) return undefined;\n    \n    const productsArray = products || [];\n    const totalProducts = productsArray.length;\n    const activeProducts = productsArray.filter(p => p.isActive).length;\n    const inactiveProducts = productsArray.filter(p => !p.isActive).length;\n    const inStockProducts = productsArray.filter(p => p.available > 0).length;\n    const outOfStockProducts = productsArray.filter(p => p.available === 0).length;\n    const lowStockProducts = productsArray.filter(p => p.available > 0 && p.available < 5).length;\n    \n    // Calculate total stock value\n    const totalStockValue = productsArray.reduce((sum, product) => {\n      const stockValue = product.available * (product.rentPrice || 0);\n      return sum + stockValue;\n    }, 0);\n    \n    // Calculate average price\n    const productsWithPrice = productsArray.filter(p => p.rentPrice && p.rentPrice > 0);\n    const averagePrice = productsWithPrice.length > 0 \n      ? productsWithPrice.reduce((sum, p) => sum + (p.rentPrice || 0), 0) / productsWithPrice.length\n      : 0;\n    \n    return { \n      totalProducts, \n      activeProducts, \n      inactiveProducts, \n      inStockProducts,\n      outOfStockProducts,\n      lowStockProducts,\n      totalStockValue,\n      averagePrice\n    };\n  }, [products, enableStats]);\n\n  // Create filters object for components\n  const filters: ProductFilters = useMemo(() => ({\n    search: searchTerm,\n    categoryId: categoryFilter === 'all' ? undefined : parseInt(categoryFilter),\n    available: availabilityFilter === 'in-stock' ? true : \n               availabilityFilter === 'out-of-stock' ? false : undefined,\n    status: statusFilter === 'all' ? undefined : statusFilter as any\n  }), [searchTerm, categoryFilter, availabilityFilter, statusFilter]);\n\n  // Event handlers\n  const handleViewProduct = useCallback(async (product: Product) => {\n    try {\n      setLoading(true);\n      // Fetch full product details with outlet stock information\n      const response = await productsApi.getProduct(product.id);\n      if (response.success && response.data) {\n        setSelectedProduct(response.data);\n        setShowProductDetail(true);\n      } else if (isErrorResponse(response)) {\n        console.error('Failed to fetch product details:', response.message);\n        // Fallback to basic product info\n        setSelectedProduct(product);\n        setShowProductDetail(true);\n      }\n    } catch (error) {\n      console.error('Error fetching product details:', error);\n      // Fallback to basic product info\n      setSelectedProduct(product);\n      // Let component handle error notification\n      setShowProductDetail(true);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const handleEditProduct = useCallback((product: Product) => {\n    setSelectedProduct(product);\n    setShowEditDialog(true);\n  }, []);\n\n  const handleToggleStatus = useCallback(async (product: Product) => {\n    try {\n      const updateData: ProductUpdateInput = {\n        id: product.id,\n        isActive: !product.isActive\n      };\n      \n      const response = await productsApi.updateProduct(product.id, updateData);\n      \n      if (response.success) {\n        fetchProducts(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update product status');\n      }\n    } catch (error) {\n      console.error('Error updating product status:', error);\n      // Let component handle error notification\n    }\n  }, [fetchProducts]);\n\n  const handleProductUpdated = useCallback((updatedProduct: Product) => {\n    setShowEditDialog(false);\n    setShowProductDetail(false);\n    fetchProducts(); // Refresh the list to get the latest data\n  }, [fetchProducts]);\n\n  const handleProductError = useCallback((error: string) => {\n    console.error('Product operation error:', error);\n  }, []);\n\n  const handleProductRowAction = useCallback((action: string, productId: number) => {\n    const product = products.find(p => p.id === productId);\n    if (!product) return;\n\n    switch (action) {\n      case 'view':\n        handleViewProduct(product);\n        break;\n      case 'view-orders':\n        // Navigate to product orders page instead of opening dialog\n        if (typeof window !== 'undefined') {\n          const currentPath = window.location.pathname;\n          \n          // Check if we're in admin/merchant context\n          const merchantMatch = currentPath.match(/\\/merchants\\/(\\d+)/);\n          if (merchantMatch) {\n            // Admin/merchant context - navigate to merchant route\n            const merchantId = merchantMatch[1];\n            window.location.href = `/merchants/${merchantId}/products/${productId}/orders`;\n          } else {\n            // Client context - navigate to client route\n            window.location.href = `/products/${productId}/orders`;\n          }\n        }\n        break;\n      case 'edit':\n        handleEditProduct(product);\n        break;\n      case 'activate':\n      case 'deactivate':\n        handleToggleStatus(product);\n        break;\n      case 'delete':\n        // Set selected product and show delete confirmation dialog\n        setSelectedProduct(product);\n        setShowDeleteDialog(true);\n        break;\n      default:\n        console.log('Unknown action:', action);\n    }\n  }, [products, handleViewProduct, handleEditProduct, handleToggleStatus]);\n\n  const handleAddProduct = useCallback(() => {\n    setShowCreateForm(true);\n  }, []);\n\n  const handleExportProducts = useCallback(() => {\n    // TODO: Implement export functionality\n    console.log('Export functionality coming soon!');\n  }, []);\n\n  const handleFiltersChange = useCallback((newFilters: ProductFilters) => {\n    setCategoryFilter(newFilters.categoryId?.toString() || 'all');\n    setOutletFilter(newFilters.outletId?.toString() || 'all');\n    setAvailabilityFilter(\n      newFilters.available === true ? 'in-stock' :\n      newFilters.available === false ? 'out-of-stock' : 'all'\n    );\n    setStatusFilter(newFilters.status || 'all');\n    handlePageChange(1);\n  }, [handlePageChange]);\n\n  const handleSearchChange = useCallback((searchValue: string) => {\n    throttledSearchChange(searchValue);\n  }, [throttledSearchChange]);\n\n  const handleClearFilters = useCallback(() => {\n    throttledSearchChange('');\n    setCategoryFilter('all');\n    setOutletFilter('all');\n    setAvailabilityFilter('all');\n    setStatusFilter('all');\n    handlePageChange(1);\n  }, [throttledSearchChange, handlePageChange]);\n\n  const handlePageChangeWithFetch = useCallback((page: number) => {\n    handlePageChange(page);\n    fetchProducts(page, searchTerm, categoryFilter, outletFilter, availabilityFilter, statusFilter);\n  }, [handlePageChange, fetchProducts, searchTerm, categoryFilter, outletFilter, availabilityFilter, statusFilter]);\n\n  const handleProductCreated = useCallback(async (productData: ProductCreateInput) => {\n    try {\n      const response = await productsApi.createProduct(productData);\n      if (response.success) {\n        setShowCreateForm(false);\n        fetchProducts(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to create product');\n      }\n    } catch (error) {\n      console.error('Error creating product:', error);\n      throw error; // Let component handle error notification\n    }\n  }, [fetchProducts]);\n\n  const handleProductUpdatedAsync = useCallback(async (productData: ProductUpdateInput) => {\n    if (!selectedProduct) return;\n    \n    try {\n      const response = await productsApi.updateProduct(selectedProduct.id, productData);\n      if (response.success) {\n        setShowEditDialog(false);\n        fetchProducts(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update product');\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error; // Re-throw to let the form handle the error\n    }\n  }, [selectedProduct, fetchProducts]);\n\n  const handleDeleteProduct = useCallback(async (productId: number) => {\n    try {\n      setLoading(true);\n      const response = await productsApi.deleteProduct(productId);\n      \n      if (response.success) {\n        // Remove the product from the local state\n        setProducts(prev => prev.filter(p => p.id !== productId));\n        setShowDeleteDialog(false);\n        setSelectedProduct(null);\n        // Refresh the list to ensure consistency\n        fetchProducts();\n      } else {\n        throw new Error(response.error || 'Failed to delete product');\n      }\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      handleError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchProducts, handleError]);\n\n  return {\n    // State\n    products,\n    loading,\n    searchTerm,\n    categoryFilter,\n    outletFilter,\n    availabilityFilter,\n    statusFilter,\n    selectedProduct,\n    showProductDetail,\n    showCreateForm,\n    showEditDialog,\n    showOrdersDialog,\n    showDeleteDialog,\n    pagination,\n    \n    // Actions\n    setSearchTerm: throttledSearchChange, // Use throttled search for better performance\n    setCategoryFilter,\n    setOutletFilter,\n    setAvailabilityFilter,\n    setStatusFilter,\n    setSelectedProduct,\n    setShowProductDetail,\n    setShowCreateForm,\n    setShowEditDialog,\n    setShowOrdersDialog,\n    setShowDeleteDialog,\n    \n    // Handlers\n    fetchProducts,\n    handleViewProduct,\n    handleEditProduct,\n    handleToggleStatus,\n    handleProductUpdated,\n    handleProductError,\n    handleProductRowAction,\n    handleAddProduct,\n    handleExportProducts,\n    handleFiltersChange,\n    handleSearchChange,\n    handleClearFilters,\n    handlePageChangeWithFetch,\n    handleProductCreated,\n    handleProductUpdatedAsync,\n    handleDeleteProduct,\n    \n    // Computed values\n    filteredProducts,\n    filters,\n    stats\n  };\n};\n","'use client';\n\nimport { useState, useCallback } from 'react';\nimport { \n  analyzeError, \n  handleApiErrorForUI, \n  withErrorHandlingForUI,\n  getToastType,\n  type ErrorInfo \n} from '@rentalshop/utils';\nimport { useToasts } from '@rentalshop/ui';\n\n/**\n * Toast Management Hooks\n * \n * This file contains hooks for managing toast notifications and error handling:\n * - useErrorHandler: Full-featured error handling with retry and login functionality\n * - useSimpleErrorHandler: Basic error handling with toast notifications\n * - useToastHandler: General toast functionality for both errors and success messages\n */\n\nexport interface UseErrorHandlerOptions {\n  onLogin?: () => void;\n  onRetry?: () => void;\n  onDismiss?: () => void;\n  autoHandleAuth?: boolean;\n}\n\nexport interface UseErrorHandlerReturn {\n  isLoading: boolean;\n  handleError: (error: any) => ErrorInfo;\n  handleApiCall: <T>(apiCall: () => Promise<T>) => Promise<{ data?: T; error?: ErrorInfo }>;\n  retry: () => void;\n  login: () => void;\n  showErrorToast: (error: any) => void;\n}\n\n/**\n * Hook for handling errors with toast notifications and user actions\n * \n * Features:\n * - Automatic error analysis and categorization\n * - Toast notifications for all error types\n * - Built-in retry and login functionality\n * - Loading state management\n * - Easy integration with API calls\n */\nexport const useErrorHandler = (options: UseErrorHandlerOptions = {}): UseErrorHandlerReturn => {\n  const {\n    onLogin,\n    onRetry,\n    onDismiss,\n    autoHandleAuth = true\n  } = options;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const { addToast } = useToasts();\n\n  const handleError = useCallback((error: any): ErrorInfo => {\n    const errorInfo = analyzeError(error);\n    return errorInfo;\n  }, []);\n\n  const showErrorToast = useCallback((error: any) => {\n    const errorInfo = analyzeError(error);\n    const toastType = getToastType(errorInfo.type);\n    \n    // Create toast message with specific action guidance\n    let toastMessage = errorInfo.message;\n    \n    if (errorInfo.showLoginButton) {\n      if (errorInfo.type === 'auth') {\n        toastMessage += ' Click to log in again.';\n      } else if (errorInfo.type === 'permission') {\n        toastMessage += ' Click to log in with a different account.';\n      } else if (errorInfo.type === 'subscription') {\n        toastMessage += ' Click to log in and upgrade your plan.';\n      } else {\n        toastMessage += ' Click to log in.';\n      }\n    }\n    \n    addToast(toastType, errorInfo.title, toastMessage, 0); // No auto-hide for errors\n  }, [addToast]);\n\n  const handleApiCall = useCallback(async <T>(apiCall: () => Promise<T>) => {\n    setIsLoading(true);\n    \n    try {\n      const result = await withErrorHandlingForUI(apiCall);\n      \n      if (result.error) {\n        showErrorToast(result.error);\n      }\n      \n      return result;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showErrorToast]);\n\n  const retry = useCallback(() => {\n    if (onRetry) {\n      onRetry();\n    }\n  }, [onRetry]);\n\n  const login = useCallback(() => {\n    if (onLogin) {\n      onLogin();\n    } else if (typeof window !== 'undefined') {\n      // Default login behavior - redirect to login page\n    //   window.location.href = '/login';\n    }\n  }, [onLogin]);\n\n  return {\n    isLoading,\n    handleError,\n    handleApiCall,\n    retry,\n    login,\n    showErrorToast\n  };\n};\n\n/**\n * Simplified hook for basic error handling with toasts\n */\nexport const useSimpleErrorHandler = () => {\n  const { addToast } = useToasts();\n\n  const handleError = useCallback((error: any) => {\n    const errorInfo = analyzeError(error);\n    const toastType = getToastType(errorInfo.type);\n    \n    let toastMessage = errorInfo.message;\n    if (errorInfo.showLoginButton) {\n      if (errorInfo.type === 'auth') {\n        toastMessage += ' Click to log in again.';\n      } else if (errorInfo.type === 'permission') {\n        toastMessage += ' Click to log in with a different account.';\n      } else if (errorInfo.type === 'subscription') {\n        toastMessage += ' Click to log in and upgrade your plan.';\n      } else {\n        toastMessage += ' Click to log in.';\n      }\n    }\n    \n    addToast(toastType, errorInfo.title, toastMessage, 0);\n    return errorInfo;\n  }, [addToast]);\n\n  return {\n    handleError\n  };\n};\n\n/**\n * Toast handler hook that provides both error and success toast functionality\n * This is the recommended way to handle toasts in components\n */\nexport const useToastHandler = () => {\n  const { addToast } = useToasts();\n\n  const showError = useCallback((title: string, message?: string) => {\n    addToast('error', title, message, 0); // No auto-hide for errors\n  }, [addToast]);\n\n  const showSuccess = useCallback((title: string, message?: string) => {\n    addToast('success', title, message, 5000); // 5 second auto-hide for success\n  }, [addToast]);\n\n  const showWarning = useCallback((title: string, message?: string) => {\n    addToast('warning', title, message, 5000);\n  }, [addToast]);\n\n  const showInfo = useCallback((title: string, message?: string) => {\n    addToast('info', title, message, 5000);\n  }, [addToast]);\n\n  const handleError = useCallback((error: any) => {\n    const errorInfo = analyzeError(error);\n    const toastType = getToastType(errorInfo.type);\n    \n    let toastMessage = errorInfo.message;\n    if (errorInfo.showLoginButton) {\n      if (errorInfo.type === 'auth') {\n        toastMessage += ' Click to log in again.';\n      } else if (errorInfo.type === 'permission') {\n        toastMessage += ' Click to log in with a different account.';\n      } else if (errorInfo.type === 'subscription') {\n        toastMessage += ' Click to log in and upgrade your plan.';\n      } else {\n        toastMessage += ' Click to log in.';\n      }\n    }\n    \n    addToast(toastType, errorInfo.title, toastMessage, 0);\n    return errorInfo;\n  }, [addToast]);\n\n  return {\n    showError,\n    showSuccess,\n    showWarning,\n    showInfo,\n    handleError\n  };\n};\n","'use client';\n\n// ============================================================================\n// SUBSCRIPTION ERROR HANDLER HOOK\n// ============================================================================\n\nimport { useState, useCallback } from 'react';\nimport { useToasts } from '@rentalshop/ui';\n\nexport interface SubscriptionError {\n  message: string;\n  subscriptionStatus?: string;\n  merchantStatus?: string;\n  code?: string;\n}\n\nexport interface UseSubscriptionErrorReturn {\n  handleSubscriptionError: (error: any) => void;\n  showSubscriptionError: (error: SubscriptionError) => void;\n  clearError: () => void;\n  error: SubscriptionError | null;\n}\n\n/**\n * Hook for handling subscription-related errors\n * Provides centralized error handling and user feedback\n */\nexport function useSubscriptionError(): UseSubscriptionErrorReturn {\n  const [error, setError] = useState<SubscriptionError | null>(null);\n  const { addToast } = useToasts();\n\n  const handleSubscriptionError = useCallback((error: any) => {\n    console.error('Subscription error:', error);\n\n    // Check if it's a subscription error\n    if (error?.error === 'SUBSCRIPTION_ERROR' || error?.code === 'SUBSCRIPTION_REQUIRED') {\n      const subscriptionError: SubscriptionError = {\n        message: error.message || 'Subscription error occurred',\n        subscriptionStatus: error.subscriptionStatus,\n        merchantStatus: error.merchantStatus,\n        code: error.code\n      };\n\n      setError(subscriptionError);\n      showSubscriptionError(subscriptionError);\n    } else {\n      // Handle other errors normally\n      addToast('error', 'Error', error?.message || 'An error occurred');\n    }\n  }, [addToast]);\n\n  const showSubscriptionError = useCallback((error: SubscriptionError) => {\n    const { subscriptionStatus, merchantStatus } = error;\n\n    let message = error.message;\n    let action = '';\n\n    // Customize message based on status\n    if (subscriptionStatus === 'paused') {\n      message = 'Your subscription is paused. Some features may be limited.';\n      action = 'Resume your subscription to access all features.';\n    } else if (subscriptionStatus === 'expired') {\n      message = 'Your subscription has expired. Please renew to continue.';\n      action = 'Choose a new plan to continue using the service.';\n    } else if (subscriptionStatus === 'cancelled') {\n      message = 'Your subscription has been cancelled.';\n      action = 'Choose a new plan to reactivate your account.';\n    } else if (subscriptionStatus === 'past_due') {\n      message = 'Payment is past due. Please update your payment method.';\n      action = 'Update your payment information to avoid service interruption.';\n    } else if (merchantStatus && !['active'].includes(merchantStatus)) {\n      message = `Your merchant account is ${merchantStatus}. Please contact support.`;\n      action = 'Contact support to resolve account issues.';\n    }\n\n    // Show error toast with action\n    addToast('error', 'Subscription Error', action ? `${message}\\n\\n${action}` : message, 8000);\n  }, [addToast]);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    handleSubscriptionError,\n    showSubscriptionError,\n    clearError,\n    error\n  };\n}\n\nexport default useSubscriptionError;\n","\"use client\"\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { usePagination } from './usePagination';\nimport { useThrottledSearch } from './useThrottledSearch';\nimport { useSimpleErrorHandler } from './useToast';\nimport { usersApi } from '@rentalshop/utils';\nimport { PAGINATION } from '@rentalshop/constants';\nimport type { User, UserFilters as UserFiltersType, UserCreateInput, UserUpdateInput } from '@rentalshop/types';\n\nexport interface UseUserManagementOptions {\n  initialLimit?: number;\n  useSearchUsers?: boolean; // true for admin (searchUsers), false for client (getUsersPaginated)\n  enableStats?: boolean; // true for admin, false for client\n}\n\nexport interface UseUserManagementReturn {\n  // State\n  users: User[];\n  loading: boolean;\n  searchTerm: string;\n  roleFilter: string;\n  statusFilter: string;\n  selectedUser: User | null;\n  showUserDetail: boolean;\n  showCreateForm: boolean;\n  showEditDialog: boolean;\n  pagination: any;\n  \n  // Actions\n  setSearchTerm: (term: string) => void;\n  setRoleFilter: (role: string) => void;\n  setStatusFilter: (status: string) => void;\n  setSelectedUser: (user: User | null) => void;\n  setShowUserDetail: (show: boolean) => void;\n  setShowCreateForm: (show: boolean) => void;\n  setShowEditDialog: (show: boolean) => void;\n  \n  // Handlers\n  fetchUsers: (page?: number) => Promise<void>;\n  handleViewUser: (user: User) => void;\n  handleEditUser: (user: User) => void;\n  handleToggleStatus: (user: User) => void;\n  handleUserUpdated: (updatedUser: User) => void;\n  handleUserError: (error: string) => void;\n  handleUserRowAction: (action: string, userId: number) => void;\n  handleAddUser: () => void;\n  handleExportUsers: () => void;\n  handleFiltersChange: (newFilters: UserFiltersType) => void;\n  handleSearchChange: (searchValue: string) => void;\n  handleClearFilters: () => void;\n  handlePageChangeWithFetch: (page: number) => void;\n  handleUserCreated: (userData: UserCreateInput) => Promise<void>;\n  handleUserUpdatedAsync: (userData: UserUpdateInput) => Promise<void>;\n  \n  // Computed values\n  filteredUsers: User[];\n  filters: UserFiltersType;\n  stats?: any;\n}\n\nexport const useUserManagement = (options: UseUserManagementOptions = {}): UseUserManagementReturn => {\n  console.log('🔍 useUserManagement: Hook called with options:', options);\n  const {\n    initialLimit = PAGINATION.DEFAULT_PAGE_SIZE,\n    useSearchUsers = false,\n    enableStats = false\n  } = options;\n\n  // Add error handling\n  const { handleError } = useSimpleErrorHandler();\n\n  // State\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [roleFilter, setRoleFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [showUserDetail, setShowUserDetail] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  \n  // Pagination state using shared hook\n  const { pagination, handlePageChange, updatePaginationFromResponse } = usePagination({\n    initialLimit\n  });\n\n  // Throttled search for better performance\n  const { query: searchTerm, handleSearchChange: throttledSearchChange } = useThrottledSearch({\n    delay: 300,\n    minLength: 0,\n    onSearch: (query: string) => {\n      console.log('🔍 useUserManagement: onSearch called with query:', query);\n      console.log('🔍 useUserManagement: current filters:', { roleFilter, statusFilter });\n      console.log('🔍 useUserManagement: useSearchUsers flag:', useSearchUsers);\n      // Trigger search when throttled search completes\n      fetchUsers(1, query, roleFilter, statusFilter);\n    }\n  });\n\n  // Log state changes\n  console.log('🔍 useUserManagement: Current state:', { \n    usersCount: users.length, \n    loading, \n    roleFilter, \n    statusFilter,\n    searchTerm \n  });\n\n  // Fetch users function - stable reference to prevent multiple calls\n  const fetchUsers = useCallback(async (page: number = 1, searchQuery: string = '', role: string = 'all', status: string = 'all') => {\n    console.log('🔍 useUserManagement: fetchUsers called with params:', { page, searchQuery, role, status });\n    console.log('🔍 useUserManagement: current pagination:', pagination);\n    console.log('🔍 useUserManagement: useSearchUsers flag in fetchUsers:', useSearchUsers);\n    try {\n      setLoading(true);\n      console.log('🔍 useUserManagement: setLoading(true) called');\n      \n      let response;\n      \n      if (useSearchUsers) {\n        // Admin page uses searchUsers with filters\n        const filters: UserFiltersType = {\n          search: searchQuery || undefined,\n          role: role !== 'all' ? (role as any) : undefined,\n          status: status !== 'all' ? (status as 'active' | 'inactive') : undefined,\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit\n        };\n        \n        console.log('🔍 useUserManagement: Calling searchUsers with filters:', filters);\n        console.log('🔍 useUserManagement: searchQuery value:', searchQuery);\n        console.log('🔍 useUserManagement: searchQuery type:', typeof searchQuery);\n        console.log('🔍 useUserManagement: searchQuery length:', searchQuery?.length);\n        response = await usersApi.searchUsers(filters);\n      } else {\n        // Client page uses getUsersPaginated\n        response = await usersApi.getUsersPaginated(page, pagination.limit);\n      }\n      \n      if (response.success && response.data) {\n        console.log('🔍 useUserManagement: API response success, data:', response.data);\n        \n        // Handle different response structures\n        let usersData, total, totalPagesCount;\n        \n        if (Array.isArray(response.data)) {\n          // Direct array response (from /api/users)\n          usersData = response.data;\n          total = (response as any).pagination?.total || usersData.length;\n          totalPagesCount = (response as any).pagination?.totalPages || Math.ceil(total / pagination.limit);\n        } else {\n          // Nested response structure (from searchUsers)\n          usersData = response.data.users || [];\n          total = response.data.total || 0;\n          totalPagesCount = response.data.totalPages || 1;\n        }\n        \n        console.log('🔍 useUserManagement: setting users data:', { \n          usersCount: usersData.length, \n          total, \n          totalPagesCount,\n          responseStructure: Array.isArray(response.data) ? 'direct-array' : 'nested-object'\n        });\n        setUsers(usersData);\n        \n        // Update pagination state using the hook\n        updatePaginationFromResponse({\n          total,\n          limit: pagination.limit,\n          offset: (page - 1) * pagination.limit,\n          hasMore: page < totalPagesCount\n        });\n      } else {\n        console.error('API Error:', response.error);\n        setUsers([]);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setUsers([]);\n      // Let component handle error notification\n    } finally {\n      console.log('🔍 useUserManagement: fetchUsers completed, setLoading(false)');\n      setLoading(false);\n    }\n  }, [pagination.limit, useSearchUsers, updatePaginationFromResponse]);\n\n  // Single effect to handle all data fetching\n  useEffect(() => {\n    console.log('🔍 useUserManagement: useEffect triggered with dependencies:', { searchTerm, roleFilter, statusFilter });\n    const timeoutId = setTimeout(() => {\n      console.log('🔍 useUserManagement: useEffect timeout executing fetchUsers');\n      // Fetch users with current filters\n      fetchUsers(1, searchTerm, roleFilter, statusFilter);\n    }, 300); // Debounce search\n\n    return () => {\n      console.log('🔍 useUserManagement: useEffect cleanup - clearing timeout');\n      clearTimeout(timeoutId);\n    };\n  }, [searchTerm, roleFilter, statusFilter]);\n\n  // Filter users based on current filters\n  const filteredUsers = useMemo(() => {\n    if (useSearchUsers) {\n      // Admin page: API handles filtering, return all users\n      return users;\n    } else {\n      // Client page: Apply local filtering\n      return (users || []).filter(user => {\n        if (!user || typeof user !== 'object') {\n          return false;\n        }\n        \n        const fullName = `${user.firstName || ''} ${user.lastName || ''}`.trim();\n        const matchesSearch = fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (user.email || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                             (user.merchant?.name && user.merchant.name.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                             (user.outlet?.name && user.outlet.name.toLowerCase().includes(searchTerm.toLowerCase()));\n        \n        const matchesRole = roleFilter === 'all' || user.role === roleFilter;\n        const matchesStatus = statusFilter === 'all' || \n                             (statusFilter === 'ACTIVE' && user.isActive) ||\n                             (statusFilter === 'INACTIVE' && !user.isActive);\n        \n        return matchesSearch && matchesRole && matchesStatus;\n      });\n    }\n  }, [users, searchTerm, roleFilter, statusFilter, useSearchUsers]);\n\n  // Calculate stats if enabled\n  const stats = useMemo(() => {\n    if (!enableStats) return undefined;\n    \n    const usersArray = users || [];\n    const totalUsers = usersArray.length;\n    const activeUsers = usersArray.filter(u => u.isActive).length;\n    const inactiveUsers = usersArray.filter(u => !u.isActive).length;\n    const verifiedUsers = usersArray.filter(u => u.emailVerified).length;\n    const unverifiedUsers = usersArray.filter(u => !u.emailVerified).length;\n    \n    return { totalUsers, activeUsers, inactiveUsers, verifiedUsers, unverifiedUsers };\n  }, [users, enableStats]);\n\n  // Create filters object for components\n  const filters: UserFiltersType = useMemo(() => ({\n    search: searchTerm,\n    role: roleFilter === 'all' ? undefined : roleFilter as any,\n    status: statusFilter === 'all' ? undefined : statusFilter as any\n  }), [searchTerm, roleFilter, statusFilter]);\n\n  // Event handlers\n  const handleViewUser = useCallback((user: User) => {\n    setSelectedUser(user);\n    setShowUserDetail(true);\n  }, []);\n\n  const handleEditUser = useCallback((user: User) => {\n    setSelectedUser(user);\n    setShowEditDialog(true);\n  }, []);\n\n  const handleToggleStatus = useCallback(async (user: User) => {\n    try {\n      const response = user.isActive \n        ? await usersApi.deactivateUserByPublicId(user.id)\n        : await usersApi.activateUserByPublicId(user.id);\n      \n      if (response.success) {\n        fetchUsers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update user status');\n      }\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      // Let component handle error notification\n    }\n  }, [fetchUsers]);\n\n  const handleUserUpdated = useCallback((updatedUser: User) => {\n    setShowEditDialog(false);\n    setShowUserDetail(false);\n    fetchUsers(); // Refresh the list to get the latest data\n  }, [fetchUsers]);\n\n  const handleUserError = useCallback((error: string) => {\n    console.error('User operation error:', error);\n  }, []);\n\n  const handleUserRowAction = useCallback((action: string, userId: number) => {\n    const user = users.find(u => u.id === userId);\n    if (!user) return;\n\n    switch (action) {\n      case 'view':\n        handleViewUser(user);\n        break;\n      case 'edit':\n        handleEditUser(user);\n        break;\n      case 'activate':\n      case 'deactivate':\n        handleToggleStatus(user);\n        break;\n      default:\n        console.log('Unknown action:', action);\n    }\n  }, [users, handleViewUser, handleEditUser, handleToggleStatus]);\n\n  const handleAddUser = useCallback(() => {\n    setShowCreateForm(true);\n  }, []);\n\n  const handleExportUsers = useCallback(() => {\n    // TODO: Implement export functionality\n    console.log('Export functionality coming soon!');\n  }, []);\n\n  const handleFiltersChange = useCallback((newFilters: UserFiltersType) => {\n    setRoleFilter(newFilters.role || 'all');\n    setStatusFilter(newFilters.status || 'all');\n    handlePageChange(1);\n  }, [handlePageChange]);\n\n  const handleSearchChange = useCallback((searchValue: string) => {\n    console.log('🔍 useUserManagement: handleSearchChange called with:', searchValue);\n    console.log('🔍 useUserManagement: throttledSearchChange function:', typeof throttledSearchChange);\n    throttledSearchChange(searchValue);\n  }, [throttledSearchChange]);\n\n  const handleClearFilters = useCallback(() => {\n    throttledSearchChange('');\n    setRoleFilter('all');\n    setStatusFilter('all');\n    handlePageChange(1);\n  }, [throttledSearchChange, handlePageChange]);\n\n  const handlePageChangeWithFetch = useCallback((page: number) => {\n    handlePageChange(page);\n    fetchUsers(page, searchTerm, roleFilter, statusFilter);\n  }, [handlePageChange, fetchUsers, searchTerm, roleFilter, statusFilter]);\n\n  const handleUserCreated = useCallback(async (userData: UserCreateInput) => {\n    try {\n      const response = await usersApi.createUser(userData);\n      if (response.success) {\n        setShowCreateForm(false);\n        fetchUsers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to create user');\n      }\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error; // Let component handle error notification\n    }\n  }, [fetchUsers]);\n\n  const handleUserUpdatedAsync = useCallback(async (userData: UserUpdateInput) => {\n    if (!selectedUser) return;\n    \n    try {\n      const response = await usersApi.updateUserByPublicId(selectedUser.id, userData);\n      if (response.success) {\n        setShowEditDialog(false);\n        fetchUsers(); // Refresh the list\n      } else {\n        throw new Error(response.error || 'Failed to update user');\n      }\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error; // Let component handle error notification\n    }\n  }, [selectedUser, fetchUsers]);\n\n  return {\n    // State\n    users,\n    loading,\n    searchTerm,\n    roleFilter,\n    statusFilter,\n    selectedUser,\n    showUserDetail,\n    showCreateForm,\n    showEditDialog,\n    pagination,\n    \n    // Actions\n    setSearchTerm: throttledSearchChange, // Use throttled search for better performance\n    setRoleFilter,\n    setStatusFilter,\n    setSelectedUser,\n    setShowUserDetail,\n    setShowCreateForm,\n    setShowEditDialog,\n    \n    // Handlers\n    fetchUsers,\n    handleViewUser,\n    handleEditUser,\n    handleToggleStatus,\n    handleUserUpdated,\n    handleUserError,\n    handleUserRowAction,\n    handleAddUser,\n    handleExportUsers,\n    handleFiltersChange,\n    handleSearchChange,\n    handleClearFilters,\n    handlePageChangeWithFetch,\n    handleUserCreated,\n    handleUserUpdatedAsync,\n    \n    // Computed values\n    filteredUsers,\n    filters,\n    stats\n  };\n};\n","'use client';\n\nimport { useAuth } from './useAuth';\n\n// ============================================================================\n// USER ROLE HOOK - Simplified role checking\n// ============================================================================\n\nexport interface UserRoleInfo {\n  role: string | undefined;\n  isAdmin: boolean;\n  isMerchant: boolean;\n  isOutletAdmin: boolean;\n  isOutletStaff: boolean;\n  canManageUsers: boolean;\n  canManageProducts: boolean;\n  canManageCategories: boolean;\n  canManageOutlets: boolean;\n  canManageSubscriptions: boolean;\n  canViewBilling: boolean;\n  canExportData: boolean;\n}\n\nexport function useUserRole(): UserRoleInfo {\n  const { user } = useAuth();\n  \n  const role = user?.role;\n  \n  return {\n    role,\n    isAdmin: role === 'ADMIN',\n    isMerchant: role === 'MERCHANT',\n    isOutletAdmin: role === 'OUTLET_ADMIN',\n    isOutletStaff: role === 'OUTLET_STAFF',\n    \n    // Permission checks\n    canManageUsers: role === 'ADMIN' || role === 'MERCHANT' || role === 'OUTLET_ADMIN',\n    canManageProducts: role === 'ADMIN' || role === 'MERCHANT' || role === 'OUTLET_ADMIN',\n    canManageCategories: role === 'ADMIN' || role === 'MERCHANT',\n    canManageOutlets: role === 'ADMIN' || role === 'MERCHANT',\n    canManageSubscriptions: role === 'ADMIN' || role === 'MERCHANT',\n    canViewBilling: role === 'ADMIN' || role === 'MERCHANT',\n    canExportData: role === 'ADMIN' || role === 'MERCHANT',\n  };\n}\n\n// ============================================================================\n// CONVENIENCE HOOKS FOR SPECIFIC PERMISSIONS\n// ============================================================================\n\nexport function useCanManageProducts(): boolean {\n  const { canManageProducts } = useUserRole();\n  return canManageProducts;\n}\n\nexport function useCanManageCategories(): boolean {\n  const { canManageCategories } = useUserRole();\n  return canManageCategories;\n}\n\nexport function useCanManageUsers(): boolean {\n  const { canManageUsers } = useUserRole();\n  return canManageUsers;\n}\n\nexport function useCanManageOutlets(): boolean {\n  const { canManageOutlets } = useUserRole();\n  return canManageOutlets;\n}\n\nexport function useCanManageSubscriptions(): boolean {\n  const { canManageSubscriptions } = useUserRole();\n  return canManageSubscriptions;\n}\n\nexport function useCanViewBilling(): boolean {\n  const { canViewBilling } = useUserRole();\n  return canViewBilling;\n}\n\nexport function useCanExportData(): boolean {\n  const { canExportData } = useUserRole();\n  return canExportData;\n}\n"],"mappings":";AAEA,SAAS,UAAU,WAAW,mBAAmB;AACjD,SAAS,cAAc,eAAe,eAAe,qBAAqB;AA0BnE,SAAS,UAAU;AACxB,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAoB;AAAA,IAC5C,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EACT,CAAC;AAMD,QAAM,QAAQ,YAAY,OAAO,OAAe,aAAuC;AACrF,QAAI;AACF,eAAS,WAAS,EAAE,GAAG,MAAM,SAAS,KAAK,EAAE;AAG7C,YAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,mBAAmB;AACpD,YAAM,WAAW,MAAM,MAAM,QAAQ,KAAK,OAAO;AAAA,QAC/C,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,SAAS,CAAC;AAAA,MAC1C,CAAC;AAGD,UAAI,SAAS,WAAW,KAAK;AAC3B,cAAM,YAAY,MAAM,SAAS,KAAK;AACtC,iBAAS,WAAS;AAAA,UAChB,GAAG;AAAA,UACH,OAAO,UAAU,WAAW;AAAA,UAC5B,SAAS;AAAA,QACX,EAAE;AACF,eAAO;AAAA,MACT;AAGA,UAAI,SAAS,WAAW,KAAK;AAC3B,cAAM,YAAY,MAAM,SAAS,KAAK;AACtC,iBAAS,WAAS;AAAA,UAChB,GAAG;AAAA,UACH,OAAO,UAAU,WAAW;AAAA,UAC5B,SAAS;AAAA,QACX,EAAE;AACF,eAAO;AAAA,MACT;AAEA,YAAM,OAAsB,MAAM,SAAS,KAAK;AAEhD,UAAI,KAAK,WAAW,KAAK,MAAM,OAAO;AAEpC,sBAAc,KAAK,KAAK,OAAO,KAAK,KAAK,IAAI;AAE7C,iBAAS,WAAS;AAAA,UAChB,GAAG;AAAA,UACH,MAAM,KAAK,KAAK;AAAA,UAChB,SAAS;AAAA,QACX,EAAE;AACF,eAAO;AAAA,MACT,OAAO;AACL,iBAAS,WAAS;AAAA,UAChB,GAAG;AAAA,UACH,OAAO,KAAK,WAAW;AAAA,UACvB,SAAS;AAAA,QACX,EAAE;AACF,eAAO;AAAA,MACT;AAAA,IACF,SAAS,KAAK;AACZ,YAAM,eAAe,eAAe,QAAQ,IAAI,UAAU;AAC1D,eAAS,WAAS;AAAA,QAChB,GAAG;AAAA,QACH,OAAO;AAAA,QACP,SAAS;AAAA,MACX,EAAE;AACF,aAAO;AAAA,IACT;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,SAAS,YAAY,MAAM;AAE/B,kBAAc;AACd,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,IACT,CAAC;AAAA,EAEH,GAAG,CAAC,CAAC;AAEL,QAAM,aAAa,YAAY,MAAM;AACnC,aAAS,WAAS,EAAE,GAAG,MAAM,OAAO,KAAK,EAAE;AAAA,EAC7C,GAAG,CAAC,CAAC;AAEL,QAAM,cAAc,YAAY,YAAY;AAC1C,QAAI;AAEF,YAAM,QAAQ,aAAa;AAC3B,cAAQ,IAAI,+CAAwC,CAAC,CAAC,KAAK;AAE3D,UAAI,CAAC,OAAO;AACV,gBAAQ,IAAI,6CAAwC;AACpD,iBAAS,WAAS,EAAE,GAAG,MAAM,MAAM,MAAM,SAAS,MAAM,EAAE;AAC1D;AAAA,MACF;AAEA,cAAQ,IAAI,6CAAsC;AAElD,YAAM,EAAE,SAAS,mBAAmB,IAAI,MAAM,OAAO,mBAAmB;AACxE,YAAM,WAAW,MAAM,mBAAmB,QAAQ,SAAS,IAAI;AAE/D,cAAQ,IAAI,mCAA4B;AAAA,QACtC,IAAI,SAAS;AAAA,QACb,QAAQ,SAAS;AAAA,QACjB,YAAY,SAAS;AAAA,MACvB,CAAC;AAED,UAAI,SAAS,IAAI;AACf,cAAM,OAAO,MAAM,SAAS,KAAK;AACjC,gBAAQ,IAAI,+BAAwB,IAAI;AAExC,YAAI,KAAK,WAAW,KAAK,MAAM;AAC7B,kBAAQ,IAAI,6BAAwB,KAAK,IAAI;AAC7C,mBAAS,WAAS;AAAA,YAChB,GAAG;AAAA,YACH,MAAM,KAAK;AAAA,YACX,SAAS;AAAA,UACX,EAAE;AAAA,QAEJ,OAAO;AACL,kBAAQ,MAAM,sCAAiC,IAAI;AACnD,gBAAM,IAAI,MAAM,wBAAwB;AAAA,QAC1C;AAAA,MACF,WAAW,SAAS,WAAW,KAAK;AAElC,YAAI;AACF,gBAAM,YAAY,MAAM,SAAS,MAAM,EAAE,KAAK;AAC9C,kBAAQ,IAAI,2DAAiD;AAE7D,mBAAS,WAAS;AAAA,YAChB,GAAG;AAAA,YACH,SAAS;AAAA,YACT,OAAO,UAAU,WAAW;AAAA,UAC9B,EAAE;AACF;AAAA,QACF,SAAS,YAAY;AACnB,kBAAQ,IAAI,8CAAuC;AACnD,mBAAS,WAAS;AAAA,YAChB,GAAG;AAAA,YACH,SAAS;AAAA,YACT,OAAO;AAAA,UACT,EAAE;AACF;AAAA,QACF;AAAA,MACF,WAAW,SAAS,WAAW,KAAK;AAElC,gBAAQ,IAAI,+DAAwD;AAEpE,eAAO;AAEP,YAAI,OAAO,WAAW,aAAa;AACjC,iBAAO,SAAS,OAAO;AAAA,QACzB;AAAA,MACF,OAAO;AACL,gBAAQ,MAAM,qBAAgB,SAAS,QAAQ,SAAS,UAAU;AAElE,gBAAQ,IAAI,uEAA6D;AACzE,iBAAS,WAAS,EAAE,GAAG,MAAM,SAAS,MAAM,EAAE;AAE9C,YAAI,SAAS,UAAU,KAAK;AAC1B,kBAAQ,IAAI,iEAA0D;AAAA,QACxE;AAAA,MACF;AAAA,IACF,SAAS,KAAK;AACZ,cAAQ,MAAM,oCAA6B,GAAG;AAG9C,cAAQ,IAAI,6DAAmD;AAC/D,eAAS,WAAS,EAAE,GAAG,MAAM,SAAS,MAAM,EAAE;AAE9C,UAAI,eAAe,UACjB,IAAI,QAAQ,SAAS,iBAAiB,KACtC,IAAI,QAAQ,SAAS,eAAe,KACpC,IAAI,QAAQ,SAAS,OAAO,IAC3B;AACD,gBAAQ,IAAI,2DAAoD;AAAA,MAClE;AAAA,IACF;AAAA,EACF,GAAG,CAAC,MAAM,CAAC;AAMX,YAAU,MAAM;AAEd,UAAM,QAAQ,aAAa;AAC3B,UAAM,aAAa,cAAc;AAEjC,YAAQ,IAAI,qDAA8C;AAAA,MACxD,UAAU,CAAC,CAAC;AAAA,MACZ,eAAe,CAAC,CAAC;AAAA,MACjB,aAAa,OAAO;AAAA,MACpB,cAAc,QAAQ,MAAM,UAAU,GAAG,EAAE,IAAI,QAAQ;AAAA,MACvD,mBAAmB,aAAa,KAAK,UAAU,UAAU,EAAE,UAAU,GAAG,GAAG,IAAI,QAAQ;AAAA,MACvF,qBAAqB,YAAY;AAAA,MACjC,oBAAoB,YAAY;AAAA,MAChC,iBAAiB,YAAY;AAAA,IAC/B,CAAC;AAED,QAAI,SAAS,YAAY;AACvB,cAAQ,IAAI,kCAA6B,UAAU;AACnD,eAAS,WAAS,EAAE,GAAG,MAAM,MAAM;AAAA,QACjC,GAAG;AAAA,QACH,IAAI,WAAW;AAAA;AAAA,MACjB,GAAW,SAAS,MAAM,EAAE;AAI5B,UAAI,CAAC,WAAW,cAAc,CAAC,WAAW,UAAU;AAClD,gBAAQ,IAAI,uFAAgF;AAE5F,oBAAY;AAAA,MACd,WAAW,CAAC,WAAW,aAAa,CAAC,WAAW,UAAU;AACxD,gBAAQ,IAAI,sFAA+E;AAE3F,oBAAY;AAAA,MACd,OAAO;AACL,gBAAQ,IAAI,gDAA2C;AAAA,MACzD;AAAA,IACF,WAAW,SAAS,CAAC,YAAY;AAC/B,cAAQ,IAAI,kEAA2D;AAEvE,kBAAY;AAAA,IACd,OAAO;AACL,cAAQ,IAAI,oDAA+C;AAC3D,eAAS,WAAS,EAAE,GAAG,MAAM,MAAM,MAAM,SAAS,MAAM,EAAE;AAAA,IAC5D;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAMhB,YAAU,MAAM;AAEd,UAAM,mBAAmB,MAAM;AAC7B,YAAM,QAAQ,aAAa;AAC3B,UAAI,CAAC,MAAO;AAEZ,UAAI;AACF,cAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,YAAI,MAAM,WAAW,GAAG;AACtB,gBAAM,UAAU,KAAK,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;AACzC,gBAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACxC,gBAAM,kBAAkB,QAAQ,MAAM;AAGtC,cAAI,kBAAkB,OAAO,kBAAkB,GAAG;AAChD,oBAAQ,IAAI,6CAAsC;AAClD,wBAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,KAAK,iCAAiC,KAAK;AAAA,MACrD;AAAA,IACF;AAGA,UAAM,WAAW,YAAY,kBAAkB,GAAK;AAGpD,qBAAiB;AAEjB,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,WAAW,CAAC;AAMhB,SAAO;AAAA,IACL,MAAM,MAAM;AAAA,IACZ,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AC9TA,SAAS,eAAAA,oBAAmB;AAC5B,SAAS,iBAAAC,sBAAqB;AAMvB,IAAM,sBAAsB,MAAM;AACvC,QAAM,kBAAkBD,aAAY,CAAC,UAAe;AAClD,YAAQ,MAAM,kCAAkC,KAAK;AAGrD,QACE,OAAO,SAAS,SAAS,yBAAyB,KAClD,OAAO,SAAS,SAAS,cAAc,KACvC,OAAO,SAAS,SAAS,eAAe,KACxC,OAAO,SAAS,SAAS,eAAe,KACxC,OAAO,WAAW,KAClB;AACA,cAAQ,IAAI,2DAAoD;AAGhE,MAAAC,eAAc;AAGd,UAAI,OAAO,WAAW,aAAa;AAAA,MAEnC;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO,EAAE,gBAAgB;AAC3B;;;AC9BA,SAAS,eAAAC,oBAAmB;;;ACA5B,SAAS,YAAAC,WAAU,aAAAC,YAAW,eAAAC,oBAAmB;AA8C1C,SAAS,0BACd,UAA4C,CAAC,GACrB;AACxB,QAAM,EAAE,gBAAgB,IAAI,KAAK,IAAK,IAAI;AAC1C,QAAM,EAAE,KAAK,IAAI,QAAQ;AAEzB,QAAM,CAAC,SAAS,UAAU,IAAIC,UAAS,IAAI;AAC3C,QAAM,CAAC,uBAAuB,wBAAwB,IAAIA,UAAS,KAAK;AACxE,QAAM,CAAC,WAAW,YAAY,IAAIA,UAAS,KAAK;AAChD,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAwB,IAAI;AAC1E,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,UAAwB,IAAI;AAG5E,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAS,KAAK;AAC5D,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAc,IAAI;AAC1D,QAAM,CAAC,QAAQ,SAAS,IAAIA,UAAiB,EAAE;AAC/C,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAS,KAAK;AAC5C,QAAM,CAAC,UAAU,WAAW,IAAIA,UAAS,KAAK;AAC9C,QAAM,CAAC,UAAU,WAAW,IAAIA,UAAiB,EAAE;AACnD,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI;AAGtD,QAAM,0BAA0BC,aAAY,YAAY;AACtD,QAAI,CAAC,MAAM;AACT,iBAAW,KAAK;AAChB;AAAA,IACF;AAEA,QAAI;AACF,iBAAW,IAAI;AAGf,YAAM,EAAE,iBAAiB,IAAI,MAAM,OAAO,mBAAmB;AAC7D,YAAM,WAAW,MAAM,iBAAiB,iCAAiC;AAEzE,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,cAAM,OAAO,SAAS;AAiBtB,cAAM,iBAAiB,KAAK,UAAU;AACtC,cAAM,eAAe,KAAK,aAAa;AACvC,cAAM,mBAAmB,KAAK,iBAAiB;AAC/C,cAAM,oBAAoB,KAAK,kBAAkB;AAGjD,cAAMC,YAAW,mBAAmB;AACpC,cAAMC,aAAY,mBAAmB;AACrC,cAAMC,WAAU,mBAAmB;AACnC,cAAM,aAAa,mBAAmB;AACtC,cAAM,YAAY,mBAAmB;AACrC,cAAM,WAAW,mBAAmB;AAGpC,cAAM,YAAY;AAGlB,iCAAyB,SAAS;AAClC,qBAAaD,UAAS;AACtB,0BAAkB,iBAAiB;AACnC,2BAAmB,gBAAgB;AACnC,4BAAoB,KAAK,YAAY,cAAc;AAGnD,2BAAmB,IAAI;AACvB,wBAAgB,IAAI;AACpB,kBAAU,cAAc;AACxB,mBAAWC,QAAO;AAClB,oBAAYF,SAAQ;AACpB,oBAAY,KAAK,YAAY,cAAc;AAC3C,iBAAS,IAAI;AAEb,gBAAQ,IAAI,sCAAiC;AAAA,UAC3C;AAAA,UACA,WAAW;AAAA,UACX,eAAe;AAAA,UACf,gBAAgB;AAAA,UAChB,cAAc,KAAK;AAAA,QACrB,CAAC;AAAA,MAEH,OAAO;AAEL,iCAAyB,KAAK;AAC9B,qBAAa,IAAI;AACjB,0BAAkB,KAAK;AACvB,2BAAmB,IAAI;AACvB,4BAAoB,IAAI;AAGxB,2BAAmB,KAAK;AACxB,wBAAgB,IAAI;AACpB,kBAAU,iBAAiB;AAC3B,mBAAW,KAAK;AAChB,oBAAY,KAAK;AACjB,oBAAY,EAAE;AACd,iBAAS,uBAAuB;AAAA,MAClC;AAAA,IAEF,SAASG,QAAO;AACd,cAAQ,MAAM,uCAAuCA,MAAK;AAC1D,+BAAyB,KAAK;AAC9B,mBAAa,IAAI;AACjB,wBAAkB,KAAK;AACvB,yBAAmB,IAAI;AACvB,0BAAoB,IAAI;AAGxB,yBAAmB,KAAK;AACxB,sBAAgB,IAAI;AACpB,gBAAU,OAAO;AACjB,iBAAW,KAAK;AAChB,kBAAY,KAAK;AACjB,kBAAY,EAAE;AACd,eAASA,kBAAiB,QAAQA,OAAM,UAAU,8BAA8B;AAAA,IAClF,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,IAAI,CAAC;AAGT,QAAM,mBAAmBJ,aAAY,CAAC,YAA6B;AACjE,QAAI,CAAC,yBAAyB,WAAW;AACvC,aAAO;AAAA,IACT;AAIA,WAAO;AAAA,EACT,GAAG,CAAC,uBAAuB,SAAS,CAAC;AAGrC,QAAM,gBAAgBA,aAAY,YAAY;AAC5C,UAAM,wBAAwB;AAAA,EAChC,GAAG,CAAC,uBAAuB,CAAC;AAG5B,EAAAK,WAAU,MAAM;AACd,4BAAwB;AAAA,EAC1B,GAAG,CAAC,uBAAuB,CAAC;AAG5B,EAAAA,WAAU,MAAM;AACd,QAAI,CAAC,KAAM;AAEX,UAAM,WAAW,YAAY,yBAAyB,aAAa;AACnE,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,MAAM,yBAAyB,aAAa,CAAC;AAIjD,QAAM,gBAAgB,cAAc,iBACd,YAAY,yBACZ,iBAAiB,cAAc,eAAe,UAC9C,UAAU,UAAU,eAAe,gBACnC,WAAW,wBAAwB;AAGzD,QAAM,cAAc,WAAW,YAAY,QACxB,WAAW,aAAa,QACxB,WAAW,aAAa,WACxB,WAAW,WAAW,WACtB,iBAAiB,WACjB,WAAW,UAAU,WACrB,WAAW,WAAW,UAAU;AAGnD,QAAM,YAAY,cAAc,cAAc,yBAAyB,CAAC;AAExE,QAAM,cAAc,WAAW,aAAa,WAAW,aAAa,WACjD,WAAW,aAAa,aACxB,WAAW,WAAW,aACtB,WAAW,UAAU,YACrB,WAAW,WAAW,SAAS;AAElD,QAAM,kBAAkB,WAAW,aAAa,WAAW,cAAc;AACzE,QAAM,kBAAkB,WAAW,aAAa,WAAW;AAC3D,QAAM,kBAAkB,kBAAkB,kBAAkB,IAAI,KAAK,KAAK,IAAI,IAAI,kBAAkB,KAAK,KAAK,KAAK,GAAI,IAAI;AAC3H,QAAM,gBAAgB;AACtB,QAAM,eAAe,CAAC,aAAa,WAAW,WAAW,WAAW;AACpE,QAAM,aAAa,WAAW,aAAa,WAAW,cAAc,WAAW;AAC/E,QAAM,YAAY,WAAW;AAC7B,QAAM,WAAW,WAAW,aAAa,WAAW,cAAc,CAAC;AAEnE,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ADpPO,SAAS,cAAc,QAA6B;AACzD,QAAM,EAAE,KAAK,IAAI,QAAQ;AACzB,QAAM,EAAE,uBAAuB,WAAW,iBAAiB,IAAI,0BAA0B;AAEzF,QAAM,kBAAkBC,aAAY,CAACC,YAAgC;AAEnE,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,IACT;AAGA,UAAM,oBAA0D;AAAA;AAAA,MAE9D,gBAAgB;AAAA,QACd,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,QAAQ;AAAA,MAC7B;AAAA,MACA,cAAc;AAAA,QACZ,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,QAAQ;AAAA,MAC7B;AAAA,MACA,gBAAgB;AAAA,QACd,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,QAAQ;AAAA,MAC7B;AAAA;AAAA,MAGA,mBAAmB;AAAA,QACjB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,WAAW;AAAA,MAChC;AAAA,MACA,iBAAiB;AAAA,QACf,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,WAAW;AAAA,MAChC;AAAA,MACA,mBAAmB;AAAA,QACjB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,WAAW;AAAA,MAChC;AAAA;AAAA,MAGA,kBAAkB;AAAA,QAChB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,UAAU;AAAA,MAC/B;AAAA,MACA,gBAAgB;AAAA,QACd,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,UAAU;AAAA,MAC/B;AAAA,MACA,kBAAkB;AAAA,QAChB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,UAAU;AAAA,MAC/B;AAAA;AAAA,MAGA,kBAAkB;AAAA,QAChB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,WAAW;AAAA,MAChC;AAAA,MACA,eAAe;AAAA,QACb,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,aAAa,QAAQ;AAAA,MAC1C;AAAA;AAAA,MAGA,gBAAgB;AAAA,QACd,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,cAAc,CAAC,SAAS,YAAY,cAAc;AAAA,MACpD;AAAA;AAAA,MAGA,mBAAmB;AAAA,QACjB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,cAAc,CAAC,SAAS,UAAU;AAAA,MACpC;AAAA;AAAA,MAGA,mBAAmB;AAAA,QACjB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,kBAAkB,CAAC,iBAAiB;AAAA,MACtC;AAAA,IACF;AAEA,UAAM,aAAa,kBAAkBA,OAAM;AAG3C,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AAGA,QAAI,WAAW,sBAAsB;AACnC,UAAI,CAAC,yBAAyB,WAAW;AACvC,eAAO;AAAA,MACT;AAAA,IACF;AAGA,QAAI,WAAW,kBAAkB;AAC/B,iBAAW,WAAW,WAAW,kBAAkB;AACjD,YAAI,CAAC,iBAAiB,OAAO,GAAG;AAC9B,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAGA,QAAI,WAAW,cAAc;AAC3B,UAAI,CAAC,WAAW,aAAa,SAAS,KAAK,IAAI,GAAG;AAChD,eAAO;AAAA,MACT;AAAA,IACF;AAGA,QAAI,WAAW,aAAa;AAC1B,aAAO,WAAW,YAAY,MAAM,EAAE,uBAAuB,UAAU,CAAC;AAAA,IAC1E;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,MAAM,uBAAuB,WAAW,gBAAgB,CAAC;AAE7D,SAAO,gBAAgB,MAAM;AAC/B;;;AErKA,SAAS,eAAe,YAAY,YAAAC,WAAU,eAAAC,cAAa,aAAAC,kBAA4B;AAMvF;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAuBP,IAAM,kBAAkB,cAA+C,MAAS;AAYzE,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA,kBAAkB,CAAC;AACrB,GAA0B;AAExB,QAAM,CAAC,UAAU,WAAW,IAAIF,UAA2B;AAAA,IACzD,GAAG;AAAA,IACH,GAAG;AAAA,EACL,CAAC;AAGD,QAAM,kBAAkB,mBAAmB,QAAQ;AAGnD,QAAM,cAAcC,aAAY,CAAC,iBAA+B;AAC9D,gBAAY,WAAS;AAAA,MACnB,GAAG;AAAA,MACH,iBAAiB;AAAA,IACnB,EAAE;AAGF,iBAAa,QAAQ,uBAAuB,YAAY;AAAA,EAC1D,GAAG,CAAC,CAAC;AAGL,QAAM,eAAeA,aAAY,MAAM;AACrC,gBAAY,WAAS;AAAA,MACnB,GAAG;AAAA,MACH,YAAY,CAAC,KAAK;AAAA,IACpB,EAAE;AAGF,iBAAa,QAAQ,2BAA2B,CAAC,SAAS,YAAY,SAAS,CAAC;AAAA,EAClF,GAAG,CAAC,SAAS,UAAU,CAAC;AAGxB,QAAM,aAAaA,aAAY,MAAM;AACnC,gBAAY,WAAS;AAAA,MACnB,GAAG;AAAA,MACH,UAAU,CAAC,KAAK;AAAA,IAClB,EAAE;AAGF,iBAAa,QAAQ,yBAAyB,CAAC,SAAS,UAAU,SAAS,CAAC;AAAA,EAC9E,GAAG,CAAC,SAAS,QAAQ,CAAC;AAGtB,QAAM,oBAAoBA,aAAY,CAAC,SAAuB;AAC5D,WAAO,YAAY,IAAI;AAAA,EACzB,GAAG,CAAC,CAAC;AAGL,QAAM,gBAAgBA,aAAY,CAAC,QAAgB,MAAoB,OAAqB;AAC1F,QAAI,SAAS,GAAI,QAAO;AAExB,UAAM,eAAe,YAAY,IAAI;AACrC,UAAM,aAAa,YAAY,EAAE;AAEjC,QAAI,CAAC,gBAAgB,CAAC,YAAY;AAChC,YAAM,IAAI,MAAM,0BAA0B,IAAI,OAAO,EAAE,EAAE;AAAA,IAC3D;AAGA,UAAM,cAAc,SAAS,aAAa;AAC1C,WAAO,cAAc,WAAW;AAAA,EAClC,GAAG,CAAC,CAAC;AAGL,EAAAC,WAAU,MAAM;AACd,QAAI;AACF,YAAM,gBAAgB,aAAa,QAAQ,qBAAqB;AAChE,YAAM,kBAAkB,aAAa,QAAQ,wBAAwB;AACrE,YAAM,gBAAgB,aAAa,QAAQ,sBAAsB;AAEjE,UAAI,iBAAiB,oBAAoB,aAAa,GAAG;AACvD,oBAAY,WAAS,EAAE,GAAG,MAAM,iBAAiB,cAAc,EAAE;AAAA,MACnE;AAEA,UAAI,oBAAoB,MAAM;AAC5B,oBAAY,WAAS,EAAE,GAAG,MAAM,YAAY,oBAAoB,OAAO,EAAE;AAAA,MAC3E;AAEA,UAAI,kBAAkB,MAAM;AAC1B,oBAAY,WAAS,EAAE,GAAG,MAAM,UAAU,kBAAkB,OAAO,EAAE;AAAA,MACvE;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,uDAAuD,KAAK;AAAA,IAC3E;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,eAAoC;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SACE,oCAAC,gBAAgB,UAAhB,EAAyB,OAAO,gBAC9B,QACH;AAEJ;AAMO,SAAS,cAAmC;AACjD,QAAM,UAAU,WAAW,eAAe;AAE1C,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MAAM,oDAAoD;AAAA,EACtE;AAEA,SAAO;AACT;AAMA,SAAS,oBAAoB,MAAoC;AAC/D,SAAO,CAAC,OAAO,KAAK,EAAE,SAAS,IAAoB;AACrD;;;AChLA,SAAS,YAAAC,WAAU,aAAAC,YAAW,eAAAC,cAAa,eAAe;AAC1D,SAAS,iBAAiB;;;ACD1B,SAAS,YAAAC,WAAU,eAAAC,oBAAmB;AACtC,SAAS,kBAAkB;AA6BpB,SAAS,cAAc,SAA2B,CAAC,GAAwB;AAChF,QAAM,EAAE,eAAe,WAAW,mBAAmB,gBAAgB,EAAE,IAAI;AAE3E,QAAM,CAAC,YAAY,kBAAkB,IAAID,UAA0B;AAAA,IACjE,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,aAAa;AAAA,IACb,YAAY;AAAA,EACd,CAAC;AAED,QAAM,gBAAgBC,aAAY,CAAC,kBAA4C;AAC7E,uBAAmB,WAAS;AAAA,MAC1B,GAAG;AAAA,MACH,GAAG;AAAA,MACH,aAAa,KAAK,OAAO,cAAc,UAAU,KAAK,WAAW,cAAc,SAAS,KAAK,MAAM,IAAI;AAAA,MACvG,YAAY,KAAK,MAAM,cAAc,SAAS,KAAK,UAAU,cAAc,SAAS,KAAK,MAAM;AAAA,IACjG,EAAE;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,QAAM,mBAAmBA,aAAY,CAAC,SAAiB;AACrD,UAAM,aAAa,OAAO,KAAK,WAAW;AAC1C,kBAAc;AAAA,MACZ,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AAAA,EACH,GAAG,CAAC,WAAW,OAAO,aAAa,CAAC;AAIpC,QAAM,kBAAkBA,aAAY,MAAM;AACxC,kBAAc;AAAA,MACZ,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAAA,EACH,GAAG,CAAC,eAAe,aAAa,CAAC;AAEjC,QAAM,+BAA+BA,aAAY,CAAC,aAK5C;AACJ,kBAAc;AAAA,MACZ,OAAO,SAAS;AAAA,MAChB,OAAO,SAAS;AAAA,MAChB,QAAQ,SAAS;AAAA,MACjB,SAAS,SAAS,WAAY,SAAS,SAAS,SAAS,QAAQ,SAAS;AAAA,MAC1E,aAAa,KAAK,MAAM,SAAS,SAAS,SAAS,KAAK,IAAI;AAAA,MAC5D,YAAY,KAAK,KAAK,SAAS,QAAQ,SAAS,KAAK;AAAA,IACvD,CAAC;AAAA,EACH,GAAG,CAAC,aAAa,CAAC;AAElB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AC9FA,SAAS,YAAAC,WAAU,aAAAC,YAAW,eAAAC,cAAa,cAAc;AAyBlD,SAAS,mBAAmB,SAAwD;AACzF,QAAM,EAAE,OAAO,WAAW,SAAS,IAAI;AAEvC,QAAM,CAAC,OAAO,QAAQ,IAAIF,UAAS,EAAE;AACrC,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAS,KAAK;AACpD,QAAM,aAAa,OAA8B,IAAI;AACrD,QAAM,iBAAiB,OAAO,KAAK;AACnC,QAAM,kBAAkB,OAAO,IAAI;AAMnC,QAAM,qBAAqBE,aAAY,CAAC,UAAkB;AACxD,YAAQ,IAAI,iEAA0D,KAAK;AAC3E,aAAS,KAAK;AAGd,QAAI,WAAW,SAAS;AACtB,mBAAa,WAAW,OAAO;AAAA,IACjC;AAGA,QAAI,MAAM,UAAU,WAAW;AAC7B,cAAQ,IAAI,yEAAkE;AAC9E,qBAAe,IAAI;AACnB,qBAAe,UAAU;AAGzB,iBAAW,UAAU,WAAW,MAAM;AACpC,gBAAQ,IAAI,2EAAoE,KAAK;AACrF,iBAAS,KAAK;AACd,uBAAe,KAAK;AACpB,uBAAe,UAAU;AAAA,MAC3B,GAAG,KAAK;AAAA,IACV,WAAW,MAAM,WAAW,GAAG;AAC7B,cAAQ,IAAI,+DAAwD;AAEpE,qBAAe,KAAK;AACpB,qBAAe,UAAU;AACzB,UAAI,CAAC,gBAAgB,SAAS;AAC5B,iBAAS,EAAE;AAAA,MACb;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,8DAAuD;AAEnE,qBAAe,KAAK;AACpB,qBAAe,UAAU;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,OAAO,WAAW,QAAQ,CAAC;AAE/B,QAAM,cAAcA,aAAY,MAAM;AACpC,aAAS,EAAE;AACX,mBAAe,KAAK;AACpB,mBAAe,UAAU;AAEzB,QAAI,WAAW,SAAS;AACtB,mBAAa,WAAW,OAAO;AAAA,IACjC;AAEA,QAAI,CAAC,gBAAgB,SAAS;AAC1B,eAAS,EAAE;AAAA,IACb;AAAA,EACJ,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,UAAUA,aAAY,MAAM;AAChC,QAAI,WAAW,SAAS;AACtB,mBAAa,WAAW,OAAO;AAAA,IACjC;AAAA,EACF,GAAG,CAAC,CAAC;AAML,EAAAD,WAAU,MAAM;AAEd,oBAAgB,UAAU;AAI1B,WAAO;AAAA,EACT,GAAG,CAAC,OAAO,CAAC;AAMZ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AFrHA,SAAS,oBAAoB;AAC7B,SAAS,cAAAE,mBAAkB;AA8DpB,IAAM,wBAAwB,CAAC,UAAwC,CAAC,MAAmC;AAChH,QAAM,SAAS,UAAU;AACzB,QAAM;AAAA,IACJ,eAAeA,YAAW;AAAA,IAC1B,qBAAqB;AAAA,IACrB,cAAc;AAAA,IACd;AAAA,IACA;AAAA,EACF,IAAI;AAGJ,QAAM,CAAC,WAAW,YAAY,IAAIC,UAAqB,CAAC,CAAC;AACzD,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAS,IAAI;AAC3C,QAAM,CAAC,YAAY,aAAa,IAAIA,UAAiB,EAAE;AACvD,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAiB,EAAE;AACzD,QAAM,CAAC,eAAe,gBAAgB,IAAIA,UAAiB,EAAE;AAC7D,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAiB,KAAK;AAC9D,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAiB,KAAK;AAC9D,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,UAA0B,IAAI;AAC9E,QAAM,CAAC,oBAAoB,qBAAqB,IAAIA,UAAS,KAAK;AAClE,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAG1D,QAAM,EAAE,YAAY,kBAAkB,6BAA6B,IAAI,cAAc;AAAA,IACnF;AAAA,EACF,CAAC;AAGD,QAAM,EAAE,OAAO,YAAY,oBAAoB,sBAAsB,IAAI,mBAAmB;AAAA,IAC1F,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU,CAAC,UAAkB;AAE3B,qBAAe,GAAG,OAAO,YAAY,aAAa,eAAe,cAAc,YAAY;AAAA,IAC7F;AAAA,EACF,CAAC;AAGD,QAAM,iBAAiBC,aAAY,OAAO,OAAe,WAAW,aAAa,cAAsB,IAAI,OAAe,IAAI,QAAgB,IAAI,UAAkB,IAAI,SAAiB,OAAO,SAAiB,UAAU;AACzN,QAAI;AACF,iBAAW,IAAI;AAEf,UAAI;AAEJ,UAAI,oBAAoB;AAEtB,cAAMC,WAA+B;AAAA,UACnC,QAAQ,eAAe;AAAA,UACvB,MAAM,QAAQ;AAAA,UACd,OAAO,SAAS;AAAA,UAChB,SAAS,WAAW;AAAA,UACpB,QAAQ,WAAW,QAAS,SAAiB;AAAA,UAC7C,UAAU,WAAW,QAAS,WAAW,WAAY;AAAA,UACrD;AAAA,UACA;AAAA;AAAA,UAEA;AAAA,UACA,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,QAClC;AAEA,mBAAW,MAAM,aAAa,gBAAgBA,QAAO;AAAA,MACvD,OAAO;AAEL,mBAAW,MAAM,aAAa,sBAAsB,MAAM,WAAW,KAAK;AAAA,MAC5E;AAEA,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,YAAI,oBAAoB;AAEtB,gBAAM,iBAAiB,SAAS;AAChC,gBAAM,gBAAgB,eAAe,aAAa,CAAC;AACnD,gBAAM,QAAQ,eAAe,SAAS;AACtC,gBAAM,kBAAkB,eAAe,cAAc;AACrD,gBAAM,cAAc,eAAe,QAAQ;AAC3C,gBAAM,UAAU,eAAe,WAAW;AAE1C,uBAAa,aAAa;AAG1B,uCAA6B;AAAA,YAC3B;AAAA,YACA,OAAO,WAAW;AAAA,YAClB,SAAS,cAAc,KAAK,WAAW;AAAA,YACvC;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AAEL,gBAAM,oBAAoB,SAAS;AACnC,gBAAM,gBAAgB,kBAAkB,aAAa,CAAC;AACtD,gBAAM,QAAQ,kBAAkB,SAAS;AACzC,gBAAM,kBAAkB,kBAAkB,cAAc;AAExD,uBAAa,aAAa;AAG1B,uCAA6B;AAAA,YAC3B;AAAA,YACA,OAAO,WAAW;AAAA,YAClB,SAAS,OAAO,KAAK,WAAW;AAAA,YAChC,SAAS,OAAO;AAAA,UAClB,CAAC;AAAA,QACH;AAAA,MACF,OAAO;AACL,gBAAQ,MAAM,cAAc,SAAS,KAAK;AAC1C,qBAAa,CAAC,CAAC;AAAA,MACjB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,KAAK;AAChD,mBAAa,CAAC,CAAC;AAAA,IACjB,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,WAAW,aAAa,WAAW,OAAO,oBAAoB,YAAY,UAAU,4BAA4B,CAAC;AAGrH,EAAAC,WAAU,MAAM;AACd,UAAM,YAAY,WAAW,MAAM;AACjC,uBAAiB,CAAC;AAClB,qBAAe,GAAG,YAAY,YAAY,aAAa,eAAe,cAAc,YAAY;AAAA,IAClG,GAAG,GAAG;AAEN,WAAO,MAAM,aAAa,SAAS;AAAA,EACrC,GAAG,CAAC,YAAY,aAAa,eAAe,cAAc,cAAc,gBAAgB,CAAC;AAGzF,QAAM,oBAAoB,QAAQ,MAAM;AACtC,QAAI,oBAAoB;AAEtB,aAAO;AAAA,IACT,OAAO;AAEL,cAAQ,aAAa,CAAC,GAAG,OAAO,cAAY;AAC1C,YAAI,CAAC,YAAY,OAAO,aAAa,UAAU;AAC7C,iBAAO;AAAA,QACT;AAEA,cAAM,WAAW,GAAG,SAAS,aAAa,EAAE,IAAI,SAAS,YAAY,EAAE,GAAG,KAAK;AAC/E,cAAM,gBAAgB,SAAS,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MACxD,SAAS,SAAS,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MACrE,SAAS,SAAS,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MACrE,SAAS,WAAW,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AAE7F,cAAM,cAAc,CAAC,eAAe,SAAS,QAAQ,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AACxG,cAAM,eAAe,CAAC,gBAAgB,SAAS,SAAS,IAAI,YAAY,EAAE,SAAS,YAAY,YAAY,CAAC;AAC5G,cAAM,iBAAiB,CAAC,kBAAkB,SAAS,WAAW,IAAI,YAAY,EAAE,SAAS,cAAc,YAAY,CAAC;AACpH,cAAM,gBAAgB,iBAAiB,SAAS,SAAS,WAAW;AACpE,cAAM,gBAAgB,iBAAiB,SACjB,iBAAiB,YAAY,SAAS,YACtC,iBAAiB,cAAc,CAAC,SAAS;AAE/D,eAAO,iBAAiB,eAAe,gBAAgB,kBAChD,iBAAiB;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,WAAW,YAAY,YAAY,aAAa,eAAe,cAAc,cAAc,kBAAkB,CAAC;AAGlH,QAAM,QAAQ,QAAQ,MAAM;AAC1B,QAAI,CAAC,YAAa,QAAO;AAEzB,UAAM,iBAAiB,aAAa,CAAC;AACrC,UAAM,iBAAiB,eAAe;AACtC,UAAM,kBAAkB,eAAe,OAAO,OAAK,EAAE,QAAQ,EAAE;AAC/D,UAAM,oBAAoB,eAAe,OAAO,OAAK,CAAC,EAAE,QAAQ,EAAE;AAClE,UAAM,qBAAqB,eAAe,OAAO,OAAK,EAAE,SAAS,EAAE,MAAM,KAAK,MAAM,EAAE,EAAE;AACxF,UAAM,uBAAuB,eAAe,OAAO,OAAK,EAAE,WAAW,EAAE,QAAQ,KAAK,MAAM,EAAE,EAAE;AAE9F,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,WAAW,WAAW,CAAC;AAG3B,QAAM,UAA+B,QAAQ,OAAO;AAAA,IAClD,QAAQ;AAAA,IACR,MAAM,cAAc;AAAA,IACpB,OAAO,eAAe;AAAA,IACtB,SAAS,iBAAiB;AAAA,IAC1B,QAAQ,iBAAiB,QAAQ,eAAsB;AAAA,IACvD,UAAU,iBAAiB,QAAS,iBAAiB,WAAY;AAAA,IACjE;AAAA,IACA;AAAA,EACF,IAAI,CAAC,YAAY,YAAY,aAAa,eAAe,cAAc,cAAc,YAAY,QAAQ,CAAC;AAG1G,QAAM,qBAAqBF,aAAY,CAAC,aAAuB;AAC7D,wBAAoB,QAAQ;AAC5B,0BAAsB,IAAI;AAAA,EAC5B,GAAG,CAAC,CAAC;AAEL,QAAM,qBAAqBA,aAAY,CAAC,aAAuB;AAC7D,wBAAoB,QAAQ;AAC5B,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,qBAAqBA,aAAY,OAAO,aAAuB;AACnE,QAAI;AAEF,YAAM,WAAW,MAAM,aAAa,eAAe,SAAS,IAAI;AAAA,QAC9D,IAAI,SAAS;AAAA,QACb,UAAU,CAAC,SAAS;AAAA,MACtB,CAAC;AAED,UAAI,SAAS,SAAS;AACpB,uBAAe;AAAA,MACjB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,kCAAkC;AAAA,MACtE;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AAAA,IACxD;AAAA,EACF,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,wBAAwBA,aAAY,CAAC,oBAA8B;AACvE,sBAAkB,KAAK;AACvB,0BAAsB,KAAK;AAC3B,mBAAe;AAAA,EACjB,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,sBAAsBA,aAAY,CAAC,UAAkB;AACzD,YAAQ,MAAM,6BAA6B,KAAK;AAAA,EAClD,GAAG,CAAC,CAAC;AAEL,QAAM,0BAA0BA,aAAY,CAAC,QAAgB,eAAuB;AAElF,UAAM,WAAW,UAAU,KAAK,OAAK,EAAE,OAAO,UAAU;AACxD,QAAI,CAAC,SAAU;AAEf,YAAQ,QAAQ;AAAA,MACd,KAAK;AACH,2BAAmB,QAAQ;AAC3B;AAAA,MACF,KAAK;AACH,2BAAmB,QAAQ;AAC3B;AAAA,MACF,KAAK;AAEH,gBAAQ,IAAI,iDAA0C,cAAc,UAAU,SAAS;AACvF,eAAO,KAAK,cAAc,UAAU,SAAS;AAC7C;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,2BAAmB,QAAQ;AAC3B;AAAA,MACF,KAAK;AAEH,gBAAQ,IAAI,oBAAoB,UAAU;AAC1C;AAAA,MACF;AACE,gBAAQ,IAAI,mBAAmB,MAAM;AAAA,IACzC;AAAA,EACF,GAAG,CAAC,WAAW,oBAAoB,oBAAoB,oBAAoB,MAAM,CAAC;AAElF,QAAM,oBAAoBA,aAAY,MAAM;AAC1C,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,wBAAwBA,aAAY,MAAM;AAE9C,YAAQ,IAAI,mCAAmC;AAAA,EACjD,GAAG,CAAC,CAAC;AAEL,QAAM,sBAAsBA,aAAY,CAAC,eAAoC;AAC3E,kBAAc,WAAW,QAAQ,EAAE;AACnC,mBAAe,WAAW,SAAS,EAAE;AACrC,qBAAiB,WAAW,WAAW,EAAE;AACzC,oBAAgB,WAAW,UAAU,KAAK;AAC1C,oBAAgB,WAAW,aAAa,SAAa,WAAW,WAAW,WAAW,aAAc,KAAK;AACzG,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,gBAAgB,CAAC;AAErB,QAAM,qBAAqBA,aAAY,CAAC,gBAAwB;AAC9D,0BAAsB,WAAW;AAAA,EACnC,GAAG,CAAC,qBAAqB,CAAC;AAE1B,QAAM,qBAAqBA,aAAY,MAAM;AAC3C,0BAAsB,EAAE;AACxB,kBAAc,EAAE;AAChB,mBAAe,EAAE;AACjB,qBAAiB,EAAE;AACnB,oBAAgB,KAAK;AACrB,oBAAgB,KAAK;AACrB,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,uBAAuB,gBAAgB,CAAC;AAE5C,QAAM,4BAA4BA,aAAY,CAAC,SAAiB;AAC9D,qBAAiB,IAAI;AACrB,mBAAe,MAAM,YAAY,YAAY,aAAa,eAAe,cAAc,YAAY;AAAA,EACrG,GAAG,CAAC,kBAAkB,gBAAgB,YAAY,YAAY,aAAa,eAAe,cAAc,YAAY,CAAC;AAErH,QAAM,wBAAwBA,aAAY,OAAO,iBAAsC;AACrF,QAAI;AAEF,YAAM,gBAA+B;AAAA,QACnC,GAAG;AAAA,QACH,YAAY;AAAA;AAAA,MACd;AAEA,YAAM,WAAW,MAAM,aAAa,eAAe,aAAa;AAChE,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,uBAAe;AAAA,MACjB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,2BAA2B;AAAA,MAC/D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,6BAA6BA,aAAY,OAAO,iBAAsC;AAC1F,QAAI,CAAC,iBAAkB;AAEvB,QAAI;AACF,YAAM,WAAW,MAAM,aAAa,eAAe,iBAAiB,IAAI,YAAY;AACpF,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,uBAAe;AAAA,MACjB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,2BAA2B;AAAA,MAC/D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,kBAAkB,cAAc,CAAC;AAErC,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,eAAe;AAAA;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AGncA,SAAS,YAAAG,WAAU,aAAAC,YAAW,eAAAC,oBAA4B;AAI1D,SAAS,iBAAiB;AAC1B,SAAS,cAAAC,mBAAkB;AA0DpB,SAAS,mBAAmB,UAAqC,CAAC,GAA6B;AACpG,QAAM;AAAA,IACJ,eAAeA,YAAW;AAAA,IAC1B,kBAAkB;AAAA,IAClB,cAAc;AAAA,IACd;AAAA,IACA;AAAA,EACF,IAAI;AAGJ,QAAM,CAAC,QAAQ,SAAS,IAAIC,UAA6B,CAAC,CAAC;AAC3D,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAS,IAAI;AAC3C,QAAM,CAAC,YAAY,aAAa,IAAIA,UAAS,EAAE;AAC/C,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAS,KAAK;AACtD,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAS,KAAK;AAC5D,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAS,KAAK;AACtD,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAyC,EAAE,OAAO,IAAI,KAAK,GAAG,CAAC;AAC7G,QAAM,CAAC,QAAQ,SAAS,IAAIA,UAAS,WAAW;AAChD,QAAM,CAAC,WAAW,YAAY,IAAIA,UAAyB,MAAM;AACjE,QAAM,CAAC,eAAe,gBAAgB,IAAIA,UAA0C,IAAI;AACxF,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAS,KAAK;AAC5D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAc,IAAI;AAG5C,QAAM,EAAE,YAAY,kBAAkB,sBAAsB,6BAA6B,IAAI,cAAc;AAAA,IACzG;AAAA,IACA,eAAe;AAAA,EACjB,CAAC;AAGD,QAAM,EAAE,oBAAoB,sBAAsB,IAAI,mBAAmB;AAAA,IACvE,WAAW;AAAA,IACX,OAAO;AAAA,IACP,UAAU,CAAC,UAAkB;AAE3B,kBAAY,GAAG,OAAO,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AAAA,IACvG;AAAA,EACF,CAAC;AAGD,QAAM,cAAcC,aAAY,OAAO,OAAe,GAAG,cAAsB,IAAI,SAAiB,OAAO,YAAoB,OAAO,SAAiB,OAAO,YAA4C,EAAE,OAAO,IAAI,KAAK,GAAG,GAAG,cAAsB,aAAa,iBAAiC,WAAW;AAC/S,QAAI;AACF,iBAAW,IAAI;AAEf,UAAI;AAEJ,UAAI,iBAAiB;AAEnB,cAAM,UAAwB;AAAA,UAC5B,QAAQ,eAAe;AAAA,UACvB,QAAQ,WAAW,QAAS,SAAyB;AAAA,UACrD,WAAW,cAAc,QAAS,YAA0B;AAAA,UAC5D,UAAU,WAAW,QAAQ,SAAS,MAAM,IAAI;AAAA,UAChD,WAAW,UAAU,SAAS;AAAA,UAC9B,SAAS,UAAU,OAAO;AAAA;AAAA,UAE1B,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,UAChC;AAAA,QACF;AAEA,gBAAQ,IAAI,qDAA8C;AAAA,UACxD,aAAa;AAAA,UACb,UAAU,QAAQ;AAAA,UAClB,QAAQ,QAAQ;AAAA,UAChB,WAAW,QAAQ;AAAA,QACrB,CAAC;AAED,mBAAW,MAAM,UAAU,aAAa,OAAO;AAAA,MACjD,OAAO;AAEL,mBAAW,MAAM,UAAU,mBAAmB,MAAM,WAAW,KAAK;AAAA,MACtE;AAEA,UAAI,SAAS,WAAW,SAAS,MAAM;AAErC,YAAI;AACJ,YAAI;AACJ,YAAI;AAEJ,YAAI,MAAM,QAAQ,SAAS,IAAI,GAAG;AAEhC,uBAAa,SAAS;AACtB,kBAAQ,SAAS,KAAK;AACtB,4BAAkB;AAAA,QACpB,WAAW,SAAS,KAAK,QAAQ;AAE/B,uBAAa,SAAS,KAAK;AAC3B,kBAAQ,SAAS,KAAK,SAAS;AAC/B,4BAAkB,SAAS,KAAK,cAAc;AAAA,QAChD,OAAO;AACL,uBAAa,CAAC;AACd,kBAAQ;AACR,4BAAkB;AAAA,QACpB;AAEA,kBAAU,UAAU;AAGpB,qCAA6B;AAAA,UAC3B;AAAA,UACA,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,UAChC,SAAS,OAAO;AAAA,QAClB,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,0BAA0B,KAAK;AAAA,IAE/C,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,WAAW,OAAO,iBAAiB,4BAA4B,CAAC;AAGpE,QAAM,aAAaA,aAAY,YAAY;AACzC,QAAI,CAAC,YAAa;AAElB,QAAI;AACF,cAAQ,IAAI,yBAAyB;AACrC,YAAM,WAAW,MAAM,UAAU,cAAc;AAC/C,cAAQ,IAAI,yBAAyB,QAAQ;AAE7C,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,gBAAQ,IAAI,kBAAkB,SAAS,IAAI;AAC3C,iBAAS,SAAS,IAAI;AAAA,MACxB,OAAO;AACL,gBAAQ,MAAM,qBAAqB,QAAQ;AAAA,MAC7C;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAAA,IAE9C;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAGhB,EAAAC,WAAU,MAAM;AACd,gBAAY,GAAG,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AAAA,EAC5G,GAAG,CAAC,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS,CAAC;AAGhG,EAAAA,WAAU,MAAM;AACd,QAAI,aAAa;AACf,iBAAW;AAAA,IACb;AAAA,EACF,GAAG,CAAC,aAAa,UAAU,CAAC;AAG5B,QAAM,kBAAkBD,aAAY,CAAC,UAAiB;AACpD,qBAAiB,KAAK;AACtB,uBAAmB,IAAI;AAAA,EACzB,GAAG,CAAC,CAAC;AAEL,QAAM,kBAAkBA,aAAY,CAAC,UAAiB;AACpD,qBAAiB,KAAK;AACtB,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,oBAAoBA,aAAY,OAAO,YAAoB;AAC/D,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,YAAY,OAAO;AAEpD,UAAI,SAAS,SAAS;AACpB,cAAM,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AACrI,YAAI,aAAa;AACf,gBAAM,WAAW;AAAA,QACnB;AACA,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,wBAAwB;AAAA,MAC5D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,EAAE,SAAS,OAAO,OAAQ,MAAgB,QAAQ;AAAA,IAC3D;AAAA,EACF,GAAG,CAAC,aAAa,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,WAAW,WAAW,CAAC;AAE9J,QAAM,oBAAoBA,aAAY,OAAO,YAAoB;AAC/D,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,YAAY,OAAO;AAEpD,UAAI,SAAS,SAAS;AACpB,cAAM,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AACrI,YAAI,aAAa;AACf,gBAAM,WAAW;AAAA,QACnB;AACA,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,wBAAwB;AAAA,MAC5D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,0BAA0B,KAAK;AAC7C,aAAO,EAAE,SAAS,OAAO,OAAQ,MAAgB,QAAQ;AAAA,IAC3D;AAAA,EACF,GAAG,CAAC,aAAa,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,WAAW,WAAW,CAAC;AAE9J,QAAM,oBAAoBA,aAAY,OAAO,YAAoB;AAC/D,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,YAAY,OAAO;AAEpD,UAAI,SAAS,SAAS;AACpB,cAAM,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AACrI,YAAI,aAAa;AACf,gBAAM,WAAW;AAAA,QACnB;AACA,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,wBAAwB;AAAA,MAC5D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,aAAO,EAAE,SAAS,OAAO,OAAQ,MAAgB,QAAQ;AAAA,IAC3D;AAAA,EACF,GAAG,CAAC,aAAa,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,WAAW,WAAW,CAAC;AAE9J,QAAM,mBAAmBA,aAAY,CAAC,SAAiB;AACrD,yBAAqB,IAAI;AACzB,gBAAY,MAAM,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AAAA,EAC/G,GAAG,CAAC,sBAAsB,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS,CAAC;AAEnI,QAAM,qBAAqBA,aAAY,CAAC,gBAAwB;AAC9D,kBAAc,WAAW;AACzB,0BAAsB,WAAW;AAAA,EACnC,GAAG,CAAC,qBAAqB,CAAC;AAE1B,QAAM,sBAAsBA,aAAY,CAAC,eAAsC;AAC7E,YAAQ,IAAI,8CAAuC,UAAU;AAE7D,QAAI,YAAY,YAAY;AAG1B,YAAM,cAAc,WAAW;AAC/B,YAAM,kBAAkB,gBAAgB,UAAa,gBAAgB,QAAQ,QAAS,MAAM,QAAQ,WAAW,MAAM,IAAI,WAAW,OAAO,CAAC,IAAI,WAAW;AAC3J,cAAQ,IAAI,mCAA4B,eAAe;AACvD,sBAAgB,eAAe;AAAA,IACjC;AACA,QAAI,eAAe,YAAY;AAG7B,YAAM,iBAAiB,WAAW;AAClC,YAAM,qBAAqB,mBAAmB,UAAa,mBAAmB,QAAQ,QAAQ,WAAW;AACzG,cAAQ,IAAI,sCAA+B,kBAAkB;AAC7D,yBAAmB,kBAAkB;AAAA,IACvC;AACA,QAAI,cAAc,YAAY;AAG5B,YAAM,gBAAgB,WAAW;AACjC,YAAM,kBAAkB,kBAAkB,UAAa,kBAAkB,SAAS,kBAAkB,OAAO,QAAS,WAAW,UAAU,SAAS,KAAK;AACvJ,cAAQ,IAAI,mCAA4B,iBAAiB,SAAS,WAAW,QAAQ;AACrF,sBAAgB,eAAe;AAAA,IACjC;AACA,QAAI,WAAW,cAAc,UAAa,WAAW,YAAY,QAAW;AAC1E,yBAAmB;AAAA,QACjB,OAAO,WAAW,WAAW,SAAS,KAAK;AAAA,QAC3C,KAAK,WAAW,SAAS,SAAS,KAAK;AAAA,MACzC,CAAC;AAAA,IACH;AACA,QAAI,WAAW,WAAW,QAAW;AACnC,gBAAU,WAAW,MAAM;AAAA,IAC7B;AACA,QAAI,WAAW,cAAc,QAAW;AACtC,mBAAa,WAAW,SAAS;AAAA,IACnC;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,qBAAqBA,aAAY,MAAM;AAC3C,kBAAc,EAAE;AAChB,oBAAgB,KAAK;AACrB,uBAAmB,KAAK;AACxB,oBAAgB,KAAK;AACrB,uBAAmB,EAAE,OAAO,IAAI,KAAK,GAAG,CAAC;AACzC,cAAU,WAAW;AACrB,iBAAa,MAAM;AACnB,0BAAsB,EAAE;AACxB,yBAAqB,CAAC;AAAA,EACxB,GAAG,CAAC,uBAAuB,oBAAoB,CAAC;AAEhD,QAAM,aAAaA,aAAY,CAAC,WAAmB;AACjD,UAAM,gBAAwC;AAAA,MAC5C,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,UAAU;AAAA,MACV,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,aAAa;AAAA,IACf;AAEA,UAAM,YAAY,cAAc,MAAM,KAAK;AAC3C,UAAM,eAAe,WAAW,aAAa,cAAc,QAAQ,SAAS;AAE5E,cAAU,SAAS;AACnB,iBAAa,YAAY;AACzB,yBAAqB,CAAC;AAAA,EACxB,GAAG,CAAC,QAAQ,WAAW,oBAAoB,CAAC;AAE5C,QAAM,gBAAgBA,aAAY,YAAY;AAC5C,UAAM,YAAY,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS;AAAA,EACvI,GAAG,CAAC,aAAa,WAAW,aAAa,YAAY,cAAc,iBAAiB,cAAc,iBAAiB,QAAQ,SAAS,CAAC;AAErI,QAAM,eAAeA,aAAY,YAAY;AAC3C,QAAI,aAAa;AACf,YAAM,WAAW;AAAA,IACnB;AAAA,EACF,GAAG,CAAC,YAAY,WAAW,CAAC;AAE5B,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACnaA,SAAS,eAAAE,qBAAmB;AAiCrB,SAAS,yBAAyB;AAKvC,QAAM,wBAAwBA,cAAY,CACxC,SACA,YACA,YACA,mBACA,iBAA0B,CAAC,MACJ;AAEvB,UAAM,SAAS,IAAI,KAAK,UAAU;AAClC,UAAM,UAAU,IAAI,KAAK,UAAU;AAGnC,QAAI,UAAU,SAAS;AACrB,aAAO;AAAA,QACL,WAAW;AAAA,QACX,mBAAmB;AAAA,QACnB,WAAW,CAAC;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAGA,UAAM,YAAY,eAAe,OAAO,WAAS;AAE/C,UAAI,MAAM,cAAc,OAAQ,QAAO;AAGvC,YAAM,iBAAiB,CAAC,YAAY,UAAU;AAC9C,UAAI,CAAC,eAAe,SAAS,MAAM,MAAM,EAAG,QAAO;AAGnD,YAAM,aAAa,MAAM,WAAW,KAAK,UAAQ,KAAK,cAAc,QAAQ,EAAE;AAC9E,UAAI,CAAC,WAAY,QAAO;AAGxB,YAAM,cAAc,IAAI,KAAK,MAAM,YAAY;AAC/C,YAAM,cAAc,IAAI,KAAK,MAAM,YAAY;AAG/C,aACG,UAAU,eAAe,WAAW,eACpC,eAAe,WAAW,eAAe;AAAA,IAE9C,CAAC;AAGD,UAAM,sBAAsB,UAAU,OAAO,CAAC,OAAO,UAAU;AAC7D,YAAM,YAAY,MAAM,WAAW,KAAK,UAAQ,KAAK,cAAc,QAAQ,EAAE;AAC7E,aAAO,SAAS,WAAW,YAAY;AAAA,IACzC,GAAG,CAAC;AAGJ,UAAM,oBAAoB,KAAK,IAAI,GAAG,QAAQ,YAAY,mBAAmB;AAC7E,UAAM,YAAY,qBAAqB;AAGvC,QAAI,UAAU;AACd,QAAI,WAAW;AACb,gBAAU,cAAc,iBAAiB;AAAA,IAC3C,OAAO;AACL,gBAAU,QAAQ,iBAAiB,gCAAgC,iBAAiB;AAAA,IACtF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAML,QAAM,qBAAqBA,cAAY,CACrC,SACA,YACA,YACA,mBACA,iBAA0B,CAAC,MACf;AACZ,UAAM,SAAS,sBAAsB,SAAS,YAAY,YAAY,mBAAmB,cAAc;AACvG,WAAO,OAAO;AAAA,EAChB,GAAG,CAAC,qBAAqB,CAAC;AAM1B,QAAM,8BAA8BA,cAAY,CAC9C,SACA,WACA,SACA,iBAA0B,CAAC,MACwC;AACnE,UAAM,QAAQ,IAAI,KAAK,SAAS;AAChC,UAAM,MAAM,IAAI,KAAK,OAAO;AAC5B,UAAM,UAAU,CAAC;AAGjB,aAAS,OAAO,IAAI,KAAK,KAAK,GAAG,QAAQ,KAAK,KAAK,QAAQ,KAAK,QAAQ,IAAI,CAAC,GAAG;AAC9E,YAAM,UAAU,KAAK,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAC/C,YAAM,SAAS;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,cAAQ,KAAK;AAAA,QACX,MAAM;AAAA,QACN,WAAW,OAAO;AAAA,QAClB,WAAW,OAAO;AAAA,MACpB,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,qBAAqB,CAAC;AAM1B,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACxKA,SAAS,YAAAC,WAAU,aAAAC,YAAW,eAAAC,eAAa,WAAAC,gBAAe;;;ACA1D,SAAS,YAAAC,WAAU,eAAAC,qBAAmB;AACtC;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,OAEK;AACP,SAAS,iBAAiB;AAqCnB,IAAM,kBAAkB,CAAC,UAAkC,CAAC,MAA6B;AAC9F,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,EACnB,IAAI;AAEJ,QAAM,CAAC,WAAW,YAAY,IAAID,UAAS,KAAK;AAChD,QAAM,EAAE,SAAS,IAAI,UAAU;AAE/B,QAAM,cAAcC,cAAY,CAAC,UAA0B;AACzD,UAAM,YAAY,aAAa,KAAK;AACpC,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,QAAM,iBAAiBA,cAAY,CAAC,UAAe;AACjD,UAAM,YAAY,aAAa,KAAK;AACpC,UAAM,YAAY,aAAa,UAAU,IAAI;AAG7C,QAAI,eAAe,UAAU;AAE7B,QAAI,UAAU,iBAAiB;AAC7B,UAAI,UAAU,SAAS,QAAQ;AAC7B,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,cAAc;AAC1C,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,gBAAgB;AAC5C,wBAAgB;AAAA,MAClB,OAAO;AACL,wBAAgB;AAAA,MAClB;AAAA,IACF;AAEA,aAAS,WAAW,UAAU,OAAO,cAAc,CAAC;AAAA,EACtD,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,gBAAgBA,cAAY,OAAU,YAA8B;AACxE,iBAAa,IAAI;AAEjB,QAAI;AACF,YAAM,SAAS,MAAM,uBAAuB,OAAO;AAEnD,UAAI,OAAO,OAAO;AAChB,uBAAe,OAAO,KAAK;AAAA,MAC7B;AAEA,aAAO;AAAA,IACT,UAAE;AACA,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,QAAQA,cAAY,MAAM;AAC9B,QAAI,SAAS;AACX,cAAQ;AAAA,IACV;AAAA,EACF,GAAG,CAAC,OAAO,CAAC;AAEZ,QAAM,QAAQA,cAAY,MAAM;AAC9B,QAAI,SAAS;AACX,cAAQ;AAAA,IACV,WAAW,OAAO,WAAW,aAAa;AAAA,IAG1C;AAAA,EACF,GAAG,CAAC,OAAO,CAAC;AAEZ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAKO,IAAM,wBAAwB,MAAM;AACzC,QAAM,EAAE,SAAS,IAAI,UAAU;AAE/B,QAAM,cAAcA,cAAY,CAAC,UAAe;AAC9C,UAAM,YAAY,aAAa,KAAK;AACpC,UAAM,YAAY,aAAa,UAAU,IAAI;AAE7C,QAAI,eAAe,UAAU;AAC7B,QAAI,UAAU,iBAAiB;AAC7B,UAAI,UAAU,SAAS,QAAQ;AAC7B,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,cAAc;AAC1C,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,gBAAgB;AAC5C,wBAAgB;AAAA,MAClB,OAAO;AACL,wBAAgB;AAAA,MAClB;AAAA,IACF;AAEA,aAAS,WAAW,UAAU,OAAO,cAAc,CAAC;AACpD,WAAO;AAAA,EACT,GAAG,CAAC,QAAQ,CAAC;AAEb,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAMO,IAAM,kBAAkB,MAAM;AACnC,QAAM,EAAE,SAAS,IAAI,UAAU;AAE/B,QAAM,YAAYA,cAAY,CAAC,OAAe,YAAqB;AACjE,aAAS,SAAS,OAAO,SAAS,CAAC;AAAA,EACrC,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,cAAcA,cAAY,CAAC,OAAe,YAAqB;AACnE,aAAS,WAAW,OAAO,SAAS,GAAI;AAAA,EAC1C,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,cAAcA,cAAY,CAAC,OAAe,YAAqB;AACnE,aAAS,WAAW,OAAO,SAAS,GAAI;AAAA,EAC1C,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,WAAWA,cAAY,CAAC,OAAe,YAAqB;AAChE,aAAS,QAAQ,OAAO,SAAS,GAAI;AAAA,EACvC,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,cAAcA,cAAY,CAAC,UAAe;AAC9C,UAAM,YAAY,aAAa,KAAK;AACpC,UAAM,YAAY,aAAa,UAAU,IAAI;AAE7C,QAAI,eAAe,UAAU;AAC7B,QAAI,UAAU,iBAAiB;AAC7B,UAAI,UAAU,SAAS,QAAQ;AAC7B,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,cAAc;AAC1C,wBAAgB;AAAA,MAClB,WAAW,UAAU,SAAS,gBAAgB;AAC5C,wBAAgB;AAAA,MAClB,OAAO;AACL,wBAAgB;AAAA,MAClB;AAAA,IACF;AAEA,aAAS,WAAW,UAAU,OAAO,cAAc,CAAC;AACpD,WAAO;AAAA,EACT,GAAG,CAAC,QAAQ,CAAC;AAEb,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AD3MA,SAAS,aAAa,uBAAuB;AAC7C,SAAS,cAAAC,mBAAkB;AAiEpB,IAAM,uBAAuB,CAAC,UAAuC,CAAC,MAAkC;AAC7G,QAAM;AAAA,IACJ,eAAeA,YAAW;AAAA,IAC1B,oBAAoB;AAAA,IACpB,cAAc;AAAA,IACd;AAAA,IACA;AAAA,EACF,IAAI;AAGJ,QAAM,EAAE,YAAY,IAAI,sBAAsB;AAG9C,QAAM,CAAC,UAAU,WAAW,IAAIC,UAAoB,CAAC,CAAC;AACtD,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAS,IAAI;AAC3C,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAiB,KAAK;AAClE,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAiB,KAAK;AAC9D,QAAM,CAAC,oBAAoB,qBAAqB,IAAIA,UAAiB,KAAK;AAC1E,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAiB,KAAK;AAC9D,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAA4C,IAAI;AAC9F,QAAM,CAAC,mBAAmB,oBAAoB,IAAIA,UAAS,KAAK;AAChE,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAS,KAAK;AAC1D,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,UAAS,KAAK;AAC9D,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,UAAS,KAAK;AAG9D,QAAM,EAAE,YAAY,kBAAkB,6BAA6B,IAAI,cAAc;AAAA,IACnF;AAAA,EACF,CAAC;AAGD,QAAM,EAAE,OAAO,YAAY,oBAAoB,sBAAsB,IAAI,mBAAmB;AAAA,IAC1F,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU,CAAC,UAAkB;AAE3B,oBAAc,GAAG,OAAO,gBAAgB,cAAc,oBAAoB,YAAY;AAAA,IACxF;AAAA,EACF,CAAC;AAGD,QAAM,gBAAgBC,cAAY,OAAO,OAAe,WAAW,aAAa,cAAsB,IAAI,WAAmB,OAAO,SAAiB,OAAO,eAAuB,OAAO,SAAiB,UAAU;AACnN,QAAI;AACF,iBAAW,IAAI;AAEf,UAAI;AAEJ,UAAI,mBAAmB;AAErB,cAAMC,WAA0B;AAAA,UAC9B,QAAQ,eAAe;AAAA,UACvB,YAAY,aAAa,QAAQ,SAAS,QAAQ,IAAI;AAAA,UACtD,UAAU,WAAW,QAAQ,SAAS,MAAM,IAAI;AAAA,UAChD,WAAW,iBAAiB,aAAa,OAC/B,iBAAiB,iBAAiB,QAAQ;AAAA,UACpD,QAAQ,WAAW,QAAS,SAAmC;AAAA;AAAA,UAE/D,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,UAChC;AAAA,QACF;AAGA,YAAI,YAAY;AACd,qBAAW,MAAM,YAAY,uBAAuB,YAAYA,QAAO;AAAA,QACzE,OAAO;AAEL,qBAAW,MAAM,YAAY,eAAeA,QAAO;AAAA,QACrD;AAAA,MACF,OAAO;AAEL,mBAAW,MAAM,YAAY,qBAAqB,MAAM,WAAW,KAAK;AAAA,MAC1E;AAEA,UAAI,SAAS,WAAW,SAAS,MAAM;AAErC,YAAI;AACJ,YAAI;AACJ,YAAI;AAEJ,YAAI,MAAM,QAAQ,SAAS,IAAI,GAAG;AAEhC,yBAAe,SAAS;AACxB,kBAAQ,SAAS,KAAK;AACtB,4BAAkB;AAAA,QACpB,WAAW,SAAS,KAAK,UAAU;AAEjC,yBAAe,SAAS,KAAK;AAC7B,kBAAQ,SAAS,KAAK,SAAS;AAC/B,4BAAkB,SAAS,KAAK,cAAc;AAAA,QAChD,OAAO;AAEL,yBAAe,CAAC;AAChB,kBAAQ;AACR,4BAAkB;AAAA,QACpB;AAEA,oBAAY,YAAY;AAGxB,qCAA6B;AAAA,UAC3B;AAAA,UACA,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,UAChC,SAAS,OAAO;AAAA,QAClB,CAAC;AAAA,MACH,WAAW,gBAAgB,QAAQ,GAAG;AACpC,gBAAQ,MAAM,cAAc,SAAS,OAAO;AAC5C,oBAAY,CAAC,CAAC;AAAA,MAChB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,kBAAY,CAAC,CAAC;AAAA,IAEhB,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,WAAW,OAAO,mBAAmB,8BAA8B,UAAU,CAAC;AAGlF,EAAAC,WAAU,MAAM;AACd,UAAM,YAAY,WAAW,MAAM;AACjC,uBAAiB,CAAC;AAClB,oBAAc,GAAG,YAAY,gBAAgB,cAAc,oBAAoB,YAAY;AAAA,IAC7F,GAAG,GAAG;AAEN,WAAO,MAAM,aAAa,SAAS;AAAA,EACrC,GAAG,CAAC,gBAAgB,cAAc,oBAAoB,cAAc,gBAAgB,CAAC;AAGrF,QAAM,mBAAmBC,SAAQ,MAAM;AACrC,QAAI,mBAAmB;AAErB,aAAO;AAAA,IACT,OAAO;AAEL,cAAQ,YAAY,CAAC,GAAG,OAAO,aAAW;AACxC,YAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,iBAAO;AAAA,QACT;AAEA,cAAM,iBAAiB,QAAQ,QAAQ,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MACpE,QAAQ,eAAe,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MAC1E,QAAQ,WAAW,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AAG5F,cAAM,oBAAoB,cAAc,UAAW,QAAgB,UAAU,KAAK,QAAQ;AAC1F,cAAM,kBAAkB,mBAAmB,SACnB,qBAAqB,kBAAkB,SAAS,MAAM;AAG9E,cAAM,kBAAkB,YAAY,UAAW,QAAgB,QAAQ,KAAK;AAC5E,cAAM,gBAAgB,iBAAiB,SACjB,mBAAmB,gBAAgB,SAAS,MAAM;AAExE,cAAM,sBAAsB,uBAAuB,SACvB,uBAAuB,cAAc,QAAQ,YAAY,KACzD,uBAAuB,kBAAkB,QAAQ,cAAc,KAC/D,uBAAuB,eAAe,QAAQ,YAAY,KAAK,QAAQ,YAAY;AAE/G,cAAM,gBAAgB,iBAAiB,SACjB,iBAAiB,YAAY,QAAQ,YACrC,iBAAiB,cAAc,CAAC,QAAQ;AAE9D,eAAO,iBAAiB,mBAAmB,iBAAiB,uBAAuB;AAAA,MACrF,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,UAAU,YAAY,gBAAgB,cAAc,oBAAoB,cAAc,iBAAiB,CAAC;AAG5G,QAAM,QAAQA,SAAQ,MAAM;AAC1B,QAAI,CAAC,YAAa,QAAO;AAEzB,UAAM,gBAAgB,YAAY,CAAC;AACnC,UAAM,gBAAgB,cAAc;AACpC,UAAM,iBAAiB,cAAc,OAAO,OAAK,EAAE,QAAQ,EAAE;AAC7D,UAAM,mBAAmB,cAAc,OAAO,OAAK,CAAC,EAAE,QAAQ,EAAE;AAChE,UAAM,kBAAkB,cAAc,OAAO,OAAK,EAAE,YAAY,CAAC,EAAE;AACnE,UAAM,qBAAqB,cAAc,OAAO,OAAK,EAAE,cAAc,CAAC,EAAE;AACxE,UAAM,mBAAmB,cAAc,OAAO,OAAK,EAAE,YAAY,KAAK,EAAE,YAAY,CAAC,EAAE;AAGvF,UAAM,kBAAkB,cAAc,OAAO,CAAC,KAAK,YAAY;AAC7D,YAAM,aAAa,QAAQ,aAAa,QAAQ,aAAa;AAC7D,aAAO,MAAM;AAAA,IACf,GAAG,CAAC;AAGJ,UAAM,oBAAoB,cAAc,OAAO,OAAK,EAAE,aAAa,EAAE,YAAY,CAAC;AAClF,UAAM,eAAe,kBAAkB,SAAS,IAC5C,kBAAkB,OAAO,CAAC,KAAK,MAAM,OAAO,EAAE,aAAa,IAAI,CAAC,IAAI,kBAAkB,SACtF;AAEJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,UAAU,WAAW,CAAC;AAG1B,QAAM,UAA0BA,SAAQ,OAAO;AAAA,IAC7C,QAAQ;AAAA,IACR,YAAY,mBAAmB,QAAQ,SAAY,SAAS,cAAc;AAAA,IAC1E,WAAW,uBAAuB,aAAa,OACpC,uBAAuB,iBAAiB,QAAQ;AAAA,IAC3D,QAAQ,iBAAiB,QAAQ,SAAY;AAAA,EAC/C,IAAI,CAAC,YAAY,gBAAgB,oBAAoB,YAAY,CAAC;AAGlE,QAAM,oBAAoBH,cAAY,OAAO,YAAqB;AAChE,QAAI;AACF,iBAAW,IAAI;AAEf,YAAM,WAAW,MAAM,YAAY,WAAW,QAAQ,EAAE;AACxD,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,2BAAmB,SAAS,IAAI;AAChC,6BAAqB,IAAI;AAAA,MAC3B,WAAW,gBAAgB,QAAQ,GAAG;AACpC,gBAAQ,MAAM,oCAAoC,SAAS,OAAO;AAElE,2BAAmB,OAAO;AAC1B,6BAAqB,IAAI;AAAA,MAC3B;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AAEtD,yBAAmB,OAAO;AAE1B,2BAAqB,IAAI;AAAA,IAC3B,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,oBAAoBA,cAAY,CAAC,YAAqB;AAC1D,uBAAmB,OAAO;AAC1B,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,qBAAqBA,cAAY,OAAO,YAAqB;AACjE,QAAI;AACF,YAAM,aAAiC;AAAA,QACrC,IAAI,QAAQ;AAAA,QACZ,UAAU,CAAC,QAAQ;AAAA,MACrB;AAEA,YAAM,WAAW,MAAM,YAAY,cAAc,QAAQ,IAAI,UAAU;AAEvE,UAAI,SAAS,SAAS;AACpB,sBAAc;AAAA,MAChB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,iCAAiC;AAAA,MACrE;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,kCAAkC,KAAK;AAAA,IAEvD;AAAA,EACF,GAAG,CAAC,aAAa,CAAC;AAElB,QAAM,uBAAuBA,cAAY,CAAC,mBAA4B;AACpE,sBAAkB,KAAK;AACvB,yBAAqB,KAAK;AAC1B,kBAAc;AAAA,EAChB,GAAG,CAAC,aAAa,CAAC;AAElB,QAAM,qBAAqBA,cAAY,CAAC,UAAkB;AACxD,YAAQ,MAAM,4BAA4B,KAAK;AAAA,EACjD,GAAG,CAAC,CAAC;AAEL,QAAM,yBAAyBA,cAAY,CAAC,QAAgB,cAAsB;AAChF,UAAM,UAAU,SAAS,KAAK,OAAK,EAAE,OAAO,SAAS;AACrD,QAAI,CAAC,QAAS;AAEd,YAAQ,QAAQ;AAAA,MACd,KAAK;AACH,0BAAkB,OAAO;AACzB;AAAA,MACF,KAAK;AAEH,YAAI,OAAO,WAAW,aAAa;AACjC,gBAAM,cAAc,OAAO,SAAS;AAGpC,gBAAM,gBAAgB,YAAY,MAAM,oBAAoB;AAC5D,cAAI,eAAe;AAEjB,kBAAMI,cAAa,cAAc,CAAC;AAClC,mBAAO,SAAS,OAAO,cAAcA,WAAU,aAAa,SAAS;AAAA,UACvE,OAAO;AAEL,mBAAO,SAAS,OAAO,aAAa,SAAS;AAAA,UAC/C;AAAA,QACF;AACA;AAAA,MACF,KAAK;AACH,0BAAkB,OAAO;AACzB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,2BAAmB,OAAO;AAC1B;AAAA,MACF,KAAK;AAEH,2BAAmB,OAAO;AAC1B,4BAAoB,IAAI;AACxB;AAAA,MACF;AACE,gBAAQ,IAAI,mBAAmB,MAAM;AAAA,IACzC;AAAA,EACF,GAAG,CAAC,UAAU,mBAAmB,mBAAmB,kBAAkB,CAAC;AAEvE,QAAM,mBAAmBJ,cAAY,MAAM;AACzC,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,uBAAuBA,cAAY,MAAM;AAE7C,YAAQ,IAAI,mCAAmC;AAAA,EACjD,GAAG,CAAC,CAAC;AAEL,QAAM,sBAAsBA,cAAY,CAAC,eAA+B;AACtE,sBAAkB,WAAW,YAAY,SAAS,KAAK,KAAK;AAC5D,oBAAgB,WAAW,UAAU,SAAS,KAAK,KAAK;AACxD;AAAA,MACE,WAAW,cAAc,OAAO,aAChC,WAAW,cAAc,QAAQ,iBAAiB;AAAA,IACpD;AACA,oBAAgB,WAAW,UAAU,KAAK;AAC1C,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,gBAAgB,CAAC;AAErB,QAAM,qBAAqBA,cAAY,CAAC,gBAAwB;AAC9D,0BAAsB,WAAW;AAAA,EACnC,GAAG,CAAC,qBAAqB,CAAC;AAE1B,QAAM,qBAAqBA,cAAY,MAAM;AAC3C,0BAAsB,EAAE;AACxB,sBAAkB,KAAK;AACvB,oBAAgB,KAAK;AACrB,0BAAsB,KAAK;AAC3B,oBAAgB,KAAK;AACrB,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,uBAAuB,gBAAgB,CAAC;AAE5C,QAAM,4BAA4BA,cAAY,CAAC,SAAiB;AAC9D,qBAAiB,IAAI;AACrB,kBAAc,MAAM,YAAY,gBAAgB,cAAc,oBAAoB,YAAY;AAAA,EAChG,GAAG,CAAC,kBAAkB,eAAe,YAAY,gBAAgB,cAAc,oBAAoB,YAAY,CAAC;AAEhH,QAAM,uBAAuBA,cAAY,OAAO,gBAAoC;AAClF,QAAI;AACF,YAAM,WAAW,MAAM,YAAY,cAAc,WAAW;AAC5D,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,sBAAc;AAAA,MAChB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,0BAA0B;AAAA,MAC9D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,aAAa,CAAC;AAElB,QAAM,4BAA4BA,cAAY,OAAO,gBAAoC;AACvF,QAAI,CAAC,gBAAiB;AAEtB,QAAI;AACF,YAAM,WAAW,MAAM,YAAY,cAAc,gBAAgB,IAAI,WAAW;AAChF,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,sBAAc;AAAA,MAChB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,0BAA0B;AAAA,MAC9D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,iBAAiB,aAAa,CAAC;AAEnC,QAAM,sBAAsBA,cAAY,OAAO,cAAsB;AACnE,QAAI;AACF,iBAAW,IAAI;AACf,YAAM,WAAW,MAAM,YAAY,cAAc,SAAS;AAE1D,UAAI,SAAS,SAAS;AAEpB,oBAAY,UAAQ,KAAK,OAAO,OAAK,EAAE,OAAO,SAAS,CAAC;AACxD,4BAAoB,KAAK;AACzB,2BAAmB,IAAI;AAEvB,sBAAc;AAAA,MAChB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,0BAA0B;AAAA,MAC9D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,kBAAY,KAAK;AAAA,IACnB,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,eAAe,WAAW,CAAC;AAE/B,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,eAAe;AAAA;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AElhBA,SAAS,YAAAK,YAAU,eAAAC,qBAAmB;AACtC,SAAS,aAAAC,kBAAiB;AAoBnB,SAAS,uBAAmD;AACjE,QAAM,CAAC,OAAO,QAAQ,IAAIF,WAAmC,IAAI;AACjE,QAAM,EAAE,SAAS,IAAIE,WAAU;AAE/B,QAAM,0BAA0BD,cAAY,CAACE,WAAe;AAC1D,YAAQ,MAAM,uBAAuBA,MAAK;AAG1C,QAAIA,QAAO,UAAU,wBAAwBA,QAAO,SAAS,yBAAyB;AACpF,YAAM,oBAAuC;AAAA,QAC3C,SAASA,OAAM,WAAW;AAAA,QAC1B,oBAAoBA,OAAM;AAAA,QAC1B,gBAAgBA,OAAM;AAAA,QACtB,MAAMA,OAAM;AAAA,MACd;AAEA,eAAS,iBAAiB;AAC1B,4BAAsB,iBAAiB;AAAA,IACzC,OAAO;AAEL,eAAS,SAAS,SAASA,QAAO,WAAW,mBAAmB;AAAA,IAClE;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,wBAAwBF,cAAY,CAACE,WAA6B;AACtE,UAAM,EAAE,oBAAoB,eAAe,IAAIA;AAE/C,QAAI,UAAUA,OAAM;AACpB,QAAI,SAAS;AAGb,QAAI,uBAAuB,UAAU;AACnC,gBAAU;AACV,eAAS;AAAA,IACX,WAAW,uBAAuB,WAAW;AAC3C,gBAAU;AACV,eAAS;AAAA,IACX,WAAW,uBAAuB,aAAa;AAC7C,gBAAU;AACV,eAAS;AAAA,IACX,WAAW,uBAAuB,YAAY;AAC5C,gBAAU;AACV,eAAS;AAAA,IACX,WAAW,kBAAkB,CAAC,CAAC,QAAQ,EAAE,SAAS,cAAc,GAAG;AACjE,gBAAU,4BAA4B,cAAc;AACpD,eAAS;AAAA,IACX;AAGA,aAAS,SAAS,sBAAsB,SAAS,GAAG,OAAO;AAAA;AAAA,EAAO,MAAM,KAAK,SAAS,GAAI;AAAA,EAC5F,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,aAAaF,cAAY,MAAM;AACnC,aAAS,IAAI;AAAA,EACf,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACvFA,SAAS,YAAAG,YAAU,aAAAC,YAAW,eAAAC,eAAa,WAAAC,gBAAe;AAI1D,SAAS,gBAAgB;AACzB,SAAS,cAAAC,mBAAkB;AAsDpB,IAAM,oBAAoB,CAAC,UAAoC,CAAC,MAA+B;AACpG,UAAQ,IAAI,0DAAmD,OAAO;AACtE,QAAM;AAAA,IACJ,eAAeA,YAAW;AAAA,IAC1B,iBAAiB;AAAA,IACjB,cAAc;AAAA,EAChB,IAAI;AAGJ,QAAM,EAAE,YAAY,IAAI,sBAAsB;AAG9C,QAAM,CAAC,OAAO,QAAQ,IAAIC,WAAiB,CAAC,CAAC;AAC7C,QAAM,CAAC,SAAS,UAAU,IAAIA,WAAS,IAAI;AAC3C,QAAM,CAAC,YAAY,aAAa,IAAIA,WAAiB,KAAK;AAC1D,QAAM,CAAC,cAAc,eAAe,IAAIA,WAAiB,KAAK;AAC9D,QAAM,CAAC,cAAc,eAAe,IAAIA,WAAsB,IAAI;AAClE,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,WAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,WAAS,KAAK;AAC1D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,WAAS,KAAK;AAG1D,QAAM,EAAE,YAAY,kBAAkB,6BAA6B,IAAI,cAAc;AAAA,IACnF;AAAA,EACF,CAAC;AAGD,QAAM,EAAE,OAAO,YAAY,oBAAoB,sBAAsB,IAAI,mBAAmB;AAAA,IAC1F,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU,CAAC,UAAkB;AAC3B,cAAQ,IAAI,4DAAqD,KAAK;AACtE,cAAQ,IAAI,iDAA0C,EAAE,YAAY,aAAa,CAAC;AAClF,cAAQ,IAAI,qDAA8C,cAAc;AAExE,iBAAW,GAAG,OAAO,YAAY,YAAY;AAAA,IAC/C;AAAA,EACF,CAAC;AAGD,UAAQ,IAAI,+CAAwC;AAAA,IAClD,YAAY,MAAM;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAGD,QAAM,aAAaC,cAAY,OAAO,OAAe,GAAG,cAAsB,IAAI,OAAe,OAAO,SAAiB,UAAU;AACjI,YAAQ,IAAI,+DAAwD,EAAE,MAAM,aAAa,MAAM,OAAO,CAAC;AACvG,YAAQ,IAAI,oDAA6C,UAAU;AACnE,YAAQ,IAAI,mEAA4D,cAAc;AACtF,QAAI;AACF,iBAAW,IAAI;AACf,cAAQ,IAAI,sDAA+C;AAE3D,UAAI;AAEJ,UAAI,gBAAgB;AAElB,cAAMC,WAA2B;AAAA,UAC/B,QAAQ,eAAe;AAAA,UACvB,MAAM,SAAS,QAAS,OAAe;AAAA,UACvC,QAAQ,WAAW,QAAS,SAAmC;AAAA,UAC/D,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,QAClC;AAEA,gBAAQ,IAAI,kEAA2DA,QAAO;AAC9E,gBAAQ,IAAI,mDAA4C,WAAW;AACnE,gBAAQ,IAAI,kDAA2C,OAAO,WAAW;AACzE,gBAAQ,IAAI,oDAA6C,aAAa,MAAM;AAC5E,mBAAW,MAAM,SAAS,YAAYA,QAAO;AAAA,MAC/C,OAAO;AAEL,mBAAW,MAAM,SAAS,kBAAkB,MAAM,WAAW,KAAK;AAAA,MACpE;AAEA,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,gBAAQ,IAAI,4DAAqD,SAAS,IAAI;AAG9E,YAAI,WAAW,OAAO;AAEtB,YAAI,MAAM,QAAQ,SAAS,IAAI,GAAG;AAEhC,sBAAY,SAAS;AACrB,kBAAS,SAAiB,YAAY,SAAS,UAAU;AACzD,4BAAmB,SAAiB,YAAY,cAAc,KAAK,KAAK,QAAQ,WAAW,KAAK;AAAA,QAClG,OAAO;AAEL,sBAAY,SAAS,KAAK,SAAS,CAAC;AACpC,kBAAQ,SAAS,KAAK,SAAS;AAC/B,4BAAkB,SAAS,KAAK,cAAc;AAAA,QAChD;AAEA,gBAAQ,IAAI,oDAA6C;AAAA,UACvD,YAAY,UAAU;AAAA,UACtB;AAAA,UACA;AAAA,UACA,mBAAmB,MAAM,QAAQ,SAAS,IAAI,IAAI,iBAAiB;AAAA,QACrE,CAAC;AACD,iBAAS,SAAS;AAGlB,qCAA6B;AAAA,UAC3B;AAAA,UACA,OAAO,WAAW;AAAA,UAClB,SAAS,OAAO,KAAK,WAAW;AAAA,UAChC,SAAS,OAAO;AAAA,QAClB,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ,MAAM,cAAc,SAAS,KAAK;AAC1C,iBAAS,CAAC,CAAC;AAAA,MACb;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAC5C,eAAS,CAAC,CAAC;AAAA,IAEb,UAAE;AACA,cAAQ,IAAI,sEAA+D;AAC3E,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,WAAW,OAAO,gBAAgB,4BAA4B,CAAC;AAGnE,EAAAC,WAAU,MAAM;AACd,YAAQ,IAAI,uEAAgE,EAAE,YAAY,YAAY,aAAa,CAAC;AACpH,UAAM,YAAY,WAAW,MAAM;AACjC,cAAQ,IAAI,qEAA8D;AAE1E,iBAAW,GAAG,YAAY,YAAY,YAAY;AAAA,IACpD,GAAG,GAAG;AAEN,WAAO,MAAM;AACX,cAAQ,IAAI,mEAA4D;AACxE,mBAAa,SAAS;AAAA,IACxB;AAAA,EACF,GAAG,CAAC,YAAY,YAAY,YAAY,CAAC;AAGzC,QAAM,gBAAgBC,SAAQ,MAAM;AAClC,QAAI,gBAAgB;AAElB,aAAO;AAAA,IACT,OAAO;AAEL,cAAQ,SAAS,CAAC,GAAG,OAAO,UAAQ;AAClC,YAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACrC,iBAAO;AAAA,QACT;AAEA,cAAM,WAAW,GAAG,KAAK,aAAa,EAAE,IAAI,KAAK,YAAY,EAAE,GAAG,KAAK;AACvE,cAAM,gBAAgB,SAAS,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,MACxD,KAAK,SAAS,IAAI,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,KACjE,KAAK,UAAU,QAAQ,KAAK,SAAS,KAAK,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC,KACzF,KAAK,QAAQ,QAAQ,KAAK,OAAO,KAAK,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AAE3G,cAAM,cAAc,eAAe,SAAS,KAAK,SAAS;AAC1D,cAAM,gBAAgB,iBAAiB,SACjB,iBAAiB,YAAY,KAAK,YAClC,iBAAiB,cAAc,CAAC,KAAK;AAE3D,eAAO,iBAAiB,eAAe;AAAA,MACzC,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,OAAO,YAAY,YAAY,cAAc,cAAc,CAAC;AAGhE,QAAM,QAAQA,SAAQ,MAAM;AAC1B,QAAI,CAAC,YAAa,QAAO;AAEzB,UAAM,aAAa,SAAS,CAAC;AAC7B,UAAM,aAAa,WAAW;AAC9B,UAAM,cAAc,WAAW,OAAO,OAAK,EAAE,QAAQ,EAAE;AACvD,UAAM,gBAAgB,WAAW,OAAO,OAAK,CAAC,EAAE,QAAQ,EAAE;AAC1D,UAAM,gBAAgB,WAAW,OAAO,OAAK,EAAE,aAAa,EAAE;AAC9D,UAAM,kBAAkB,WAAW,OAAO,OAAK,CAAC,EAAE,aAAa,EAAE;AAEjE,WAAO,EAAE,YAAY,aAAa,eAAe,eAAe,gBAAgB;AAAA,EAClF,GAAG,CAAC,OAAO,WAAW,CAAC;AAGvB,QAAM,UAA2BA,SAAQ,OAAO;AAAA,IAC9C,QAAQ;AAAA,IACR,MAAM,eAAe,QAAQ,SAAY;AAAA,IACzC,QAAQ,iBAAiB,QAAQ,SAAY;AAAA,EAC/C,IAAI,CAAC,YAAY,YAAY,YAAY,CAAC;AAG1C,QAAM,iBAAiBH,cAAY,CAAC,SAAe;AACjD,oBAAgB,IAAI;AACpB,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,iBAAiBA,cAAY,CAAC,SAAe;AACjD,oBAAgB,IAAI;AACpB,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,qBAAqBA,cAAY,OAAO,SAAe;AAC3D,QAAI;AACF,YAAM,WAAW,KAAK,WAClB,MAAM,SAAS,yBAAyB,KAAK,EAAE,IAC/C,MAAM,SAAS,uBAAuB,KAAK,EAAE;AAEjD,UAAI,SAAS,SAAS;AACpB,mBAAW;AAAA,MACb,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,8BAA8B;AAAA,MAClE;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,+BAA+B,KAAK;AAAA,IAEpD;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AAEf,QAAM,oBAAoBA,cAAY,CAAC,gBAAsB;AAC3D,sBAAkB,KAAK;AACvB,sBAAkB,KAAK;AACvB,eAAW;AAAA,EACb,GAAG,CAAC,UAAU,CAAC;AAEf,QAAM,kBAAkBA,cAAY,CAAC,UAAkB;AACrD,YAAQ,MAAM,yBAAyB,KAAK;AAAA,EAC9C,GAAG,CAAC,CAAC;AAEL,QAAM,sBAAsBA,cAAY,CAAC,QAAgB,WAAmB;AAC1E,UAAM,OAAO,MAAM,KAAK,OAAK,EAAE,OAAO,MAAM;AAC5C,QAAI,CAAC,KAAM;AAEX,YAAQ,QAAQ;AAAA,MACd,KAAK;AACH,uBAAe,IAAI;AACnB;AAAA,MACF,KAAK;AACH,uBAAe,IAAI;AACnB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,2BAAmB,IAAI;AACvB;AAAA,MACF;AACE,gBAAQ,IAAI,mBAAmB,MAAM;AAAA,IACzC;AAAA,EACF,GAAG,CAAC,OAAO,gBAAgB,gBAAgB,kBAAkB,CAAC;AAE9D,QAAM,gBAAgBA,cAAY,MAAM;AACtC,sBAAkB,IAAI;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,oBAAoBA,cAAY,MAAM;AAE1C,YAAQ,IAAI,mCAAmC;AAAA,EACjD,GAAG,CAAC,CAAC;AAEL,QAAM,sBAAsBA,cAAY,CAAC,eAAgC;AACvE,kBAAc,WAAW,QAAQ,KAAK;AACtC,oBAAgB,WAAW,UAAU,KAAK;AAC1C,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,gBAAgB,CAAC;AAErB,QAAM,qBAAqBA,cAAY,CAAC,gBAAwB;AAC9D,YAAQ,IAAI,gEAAyD,WAAW;AAChF,YAAQ,IAAI,gEAAyD,OAAO,qBAAqB;AACjG,0BAAsB,WAAW;AAAA,EACnC,GAAG,CAAC,qBAAqB,CAAC;AAE1B,QAAM,qBAAqBA,cAAY,MAAM;AAC3C,0BAAsB,EAAE;AACxB,kBAAc,KAAK;AACnB,oBAAgB,KAAK;AACrB,qBAAiB,CAAC;AAAA,EACpB,GAAG,CAAC,uBAAuB,gBAAgB,CAAC;AAE5C,QAAM,4BAA4BA,cAAY,CAAC,SAAiB;AAC9D,qBAAiB,IAAI;AACrB,eAAW,MAAM,YAAY,YAAY,YAAY;AAAA,EACvD,GAAG,CAAC,kBAAkB,YAAY,YAAY,YAAY,YAAY,CAAC;AAEvE,QAAM,oBAAoBA,cAAY,OAAO,aAA8B;AACzE,QAAI;AACF,YAAM,WAAW,MAAM,SAAS,WAAW,QAAQ;AACnD,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,mBAAW;AAAA,MACb,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,uBAAuB;AAAA,MAC3D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AAEf,QAAM,yBAAyBA,cAAY,OAAO,aAA8B;AAC9E,QAAI,CAAC,aAAc;AAEnB,QAAI;AACF,YAAM,WAAW,MAAM,SAAS,qBAAqB,aAAa,IAAI,QAAQ;AAC9E,UAAI,SAAS,SAAS;AACpB,0BAAkB,KAAK;AACvB,mBAAW;AAAA,MACb,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,uBAAuB;AAAA,MAC3D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,cAAc,UAAU,CAAC;AAE7B,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,eAAe;AAAA;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AC3YO,SAAS,cAA4B;AAC1C,QAAM,EAAE,KAAK,IAAI,QAAQ;AAEzB,QAAM,OAAO,MAAM;AAEnB,SAAO;AAAA,IACL;AAAA,IACA,SAAS,SAAS;AAAA,IAClB,YAAY,SAAS;AAAA,IACrB,eAAe,SAAS;AAAA,IACxB,eAAe,SAAS;AAAA;AAAA,IAGxB,gBAAgB,SAAS,WAAW,SAAS,cAAc,SAAS;AAAA,IACpE,mBAAmB,SAAS,WAAW,SAAS,cAAc,SAAS;AAAA,IACvE,qBAAqB,SAAS,WAAW,SAAS;AAAA,IAClD,kBAAkB,SAAS,WAAW,SAAS;AAAA,IAC/C,wBAAwB,SAAS,WAAW,SAAS;AAAA,IACrD,gBAAgB,SAAS,WAAW,SAAS;AAAA,IAC7C,eAAe,SAAS,WAAW,SAAS;AAAA,EAC9C;AACF;AAMO,SAAS,uBAAgC;AAC9C,QAAM,EAAE,kBAAkB,IAAI,YAAY;AAC1C,SAAO;AACT;AAEO,SAAS,yBAAkC;AAChD,QAAM,EAAE,oBAAoB,IAAI,YAAY;AAC5C,SAAO;AACT;AAEO,SAAS,oBAA6B;AAC3C,QAAM,EAAE,eAAe,IAAI,YAAY;AACvC,SAAO;AACT;AAEO,SAAS,sBAA+B;AAC7C,QAAM,EAAE,iBAAiB,IAAI,YAAY;AACzC,SAAO;AACT;AAEO,SAAS,4BAAqC;AACnD,QAAM,EAAE,uBAAuB,IAAI,YAAY;AAC/C,SAAO;AACT;AAEO,SAAS,oBAA6B;AAC3C,QAAM,EAAE,eAAe,IAAI,YAAY;AACvC,SAAO;AACT;AAEO,SAAS,mBAA4B;AAC1C,QAAM,EAAE,cAAc,IAAI,YAAY;AACtC,SAAO;AACT;","names":["useCallback","clearAuthData","useCallback","useState","useEffect","useCallback","useState","useCallback","isActive","isExpired","isTrial","error","useEffect","useCallback","action","useState","useCallback","useEffect","useState","useEffect","useCallback","useState","useCallback","useState","useEffect","useCallback","PAGINATION","useState","useCallback","filters","useEffect","useState","useEffect","useCallback","PAGINATION","useState","useCallback","useEffect","useCallback","useState","useEffect","useCallback","useMemo","useState","useCallback","PAGINATION","useState","useCallback","filters","useEffect","useMemo","merchantId","useState","useCallback","useToasts","error","useState","useEffect","useCallback","useMemo","PAGINATION","useState","useCallback","filters","useEffect","useMemo"]}
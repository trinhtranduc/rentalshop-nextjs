{"version":3,"sources":["../src/auth.ts","../src/password.ts","../src/middleware.ts"],"sourcesContent":["import { prisma } from '@rentalshop/database';\nimport { comparePassword, hashPassword } from './password';\nimport { generateToken } from './jwt';\nimport { getSubscriptionError } from '@rentalshop/utils';\nimport type { LoginCredentials, RegisterData, AuthResponse, AuthUser } from './types';\n\nexport const loginUser = async (credentials: LoginCredentials): Promise<AuthResponse> => {\n  const user = await prisma.user.findUnique({\n    where: { email: credentials.email },\n    include: {\n      merchant: true,\n      outlet: true,\n    },\n  });\n\n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n\n  const isValidPassword = await comparePassword(credentials.password, user.password);\n  if (!isValidPassword) {\n    throw new Error('Invalid credentials');\n  }\n\n  if (!user.isActive) {\n    throw new Error('Account is deactivated');\n  }\n\n  // Check subscription status before allowing login\n  // This prevents users with expired/cancelled subscriptions from logging in\n  const subscriptionError = await getSubscriptionError({\n    role: user.role,\n    merchant: user.merchant\n  });\n  \n  if (subscriptionError) {\n    console.log('üîç LOGIN: Subscription check failed:', subscriptionError.message);\n    throw subscriptionError; // This will be caught and return 402 status\n  }\n\n  const token = generateToken({\n    userId: user.id, // Use id (number) for JWT token consistency\n    email: user.email,\n    role: user.role,\n  });\n\n  return {\n    user: {\n      id: user.id, // Return id to frontend (number)\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      name: `${user.firstName} ${user.lastName}`,\n      role: user.role,\n      phone: user.phone || undefined,\n      merchantId: user.merchantId ? Number(user.merchantId) : undefined,\n      outletId: user.outletId ? Number(user.outletId) : undefined,\n      merchant: user.merchant ? {\n        id: user.merchant.id, // Return merchant id to frontend (number)\n        name: user.merchant.name,\n        description: user.merchant.description || undefined,\n      } : undefined,\n      outlet: user.outlet ? {\n        id: user.outlet.id, // Return outlet id to frontend (number)\n        name: user.outlet.name,\n        address: user.outlet.address || undefined,\n      } : undefined,\n    },\n    token,\n  };\n};\n\nexport const registerUser = async (data: RegisterData): Promise<AuthResponse> => {\n  const existingUser = await prisma.user.findUnique({\n    where: { email: data.email },\n  });\n\n  if (existingUser) {\n    throw new Error('User already exists');\n  }\n\n  const hashedPassword = await hashPassword(data.password);\n\n  const user = await prisma.user.create({\n    data: {\n      email: data.email,\n      password: hashedPassword,\n      firstName: data.firstName || data.name?.split(' ')[0] || '',\n      lastName: data.lastName || data.name?.split(' ').slice(1).join(' ') || '',\n      phone: data.phone,\n      role: data.role || 'OUTLET_STAFF',\n    },\n  });\n\n  const token = generateToken({\n    userId: user.id, // Use id (number) for JWT token consistency\n    email: user.email,\n    role: user.role,\n  });\n\n  return {\n    user: {\n      id: user.id, // Return id to frontend (number)\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      name: `${user.firstName} ${user.lastName}`,\n      role: user.role,\n      phone: user.phone || undefined,\n      merchantId: user.merchantId ? Number(user.merchantId) : undefined,\n      outletId: user.outletId ? Number(user.outletId) : undefined,\n    },\n    token,\n  };\n}; ","import * as bcrypt from 'bcryptjs';\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\nexport const comparePassword = async (\n  password: string,\n  hashedPassword: string\n): Promise<boolean> => {\n  return bcrypt.compare(password, hashedPassword);\n}; ","// ============================================================================\n// CONSOLIDATED MIDDLEWARE - CLEAN, SINGLE PURPOSE\n// ============================================================================\n// This file provides clean middleware functions that use the core auth functions\n// No duplication, single source of truth\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { \n  authenticateRequest,\n  getUserScope,\n  hasPermission,\n  canAccessResource,\n  validateScope,\n  Permission,\n  Resource,\n  UserScope,\n  AuthorizedRequest,\n  createAuthError,\n  createScopeError,\n  createPermissionError\n} from './core';\n\n// ============================================================================\n// MIDDLEWARE TYPES\n// ============================================================================\n\nexport interface AuthorizationOptions {\n  permission?: Permission;\n  resource?: Resource;\n  action?: 'view' | 'manage';\n  scope?: { merchantId?: number; outletId?: number };\n  requireActiveSubscription?: boolean;\n}\n\n// ============================================================================\n// BASIC AUTHENTICATION MIDDLEWARE\n// ============================================================================\n\n/**\n * Higher-order function that wraps API route handlers with authentication only\n * Use this when you only need authentication, not authorization\n */\nexport function withAuth<T = any>(\n  handler: (request: NextRequest, user: any, ...args: any[]) => Promise<NextResponse<T>>\n) {\n  return async (request: NextRequest, ...args: any[]): Promise<NextResponse<T>> => {\n    const authResult = await authenticateRequest(request);\n    \n    if (!authResult.success) {\n      return authResult.response as NextResponse<T>;\n    }\n\n    return handler(request, authResult.user, ...args);\n  };\n}\n\n/**\n * Optional authentication middleware\n * Returns user if token is valid, but doesn't fail if no token provided\n */\nexport async function optionalAuth(request: NextRequest): Promise<any | null> {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return null;\n    }\n\n    const authResult = await authenticateRequest(request);\n    return authResult.success ? authResult.user : null;\n  } catch (error) {\n    console.error('Optional authentication error:', error);\n    return null;\n  }\n}\n\n// ============================================================================\n// AUTHORIZATION MIDDLEWARE\n// ============================================================================\n\n/**\n * Comprehensive authorization check for API routes\n * Combines authentication, permission checking, and scope validation\n */\nexport function authorizeRequest(\n  user: any,\n  options: AuthorizationOptions = {}\n): { \n  authorized: boolean; \n  error?: NextResponse;\n  userScope: UserScope;\n} {\n  const userScope = getUserScope(user);\n  \n  // Check permission if specified\n  if (options.permission && !hasPermission(user, options.permission)) {\n    return {\n      authorized: false,\n      error: createPermissionError(options.permission),\n      userScope\n    };\n  }\n  \n  // Check resource access if specified\n  if (options.resource && !canAccessResource(user, options.resource, options.action || 'view')) {\n    return {\n      authorized: false,\n      error: createPermissionError(`${options.resource}.${options.action || 'view'}`),\n      userScope\n    };\n  }\n  \n  // Check scope if specified\n  if (options.scope) {\n    const scopeCheck = validateScope(userScope, options.scope);\n    if (!scopeCheck.valid) {\n      return {\n        authorized: false,\n        error: scopeCheck.error,\n        userScope\n      };\n    }\n  }\n  \n  return { authorized: true, userScope };\n}\n\n/**\n * Higher-order function for API route handlers with authorization\n * This provides the cleanest API for route handlers\n */\nexport function withAuthAndAuthz<T = any>(\n  options: AuthorizationOptions = {},\n  handler: (request: AuthorizedRequest, ...args: any[]) => Promise<NextResponse<T>>\n) {\n  return async (request: NextRequest, ...args: any[]): Promise<NextResponse<T>> => {\n    // Authenticate\n    const authResult = await authenticateRequest(request);\n    if (!authResult.success) {\n      return authResult.response as NextResponse<T>;\n    }\n\n    // Authorize\n    const authzResult = authorizeRequest(authResult.user, options);\n    if (!authzResult.authorized) {\n      return authzResult.error! as NextResponse<T>;\n    }\n\n    // Call handler with authorized request\n    const authorizedRequest: AuthorizedRequest = {\n      request,\n      user: authResult.user,\n      userScope: authzResult.userScope\n    };\n\n    return handler(authorizedRequest, ...args);\n  };\n}\n\n// ============================================================================\n// CONVENIENCE MIDDLEWARE FUNCTIONS\n// ============================================================================\n\n/**\n * Admin-only middleware\n */\nexport const withAdminAuth = withAuthAndAuthz.bind(null, { permission: 'system.manage' });\n\n/**\n * User management middleware\n */\nexport const withUserManagementAuth = withAuthAndAuthz.bind(null, { permission: 'users.manage' });\n\n/**\n * Product management middleware\n */\nexport const withProductManagementAuth = withAuthAndAuthz.bind(null, { permission: 'products.manage' });\n\n/**\n * Product export middleware (only ADMIN, MERCHANT, OUTLET_ADMIN)\n */\nexport const withProductExportAuth = withAuthAndAuthz.bind(null, { permission: 'products.export' });\n\n/**\n * Order management middleware (full CRUD)\n */\nexport const withOrderManagementAuth = withAuthAndAuthz.bind(null, { permission: 'orders.manage' });\n\n/**\n * Order creation middleware\n */\nexport const withOrderCreateAuth = withAuthAndAuthz.bind(null, { permission: 'orders.create' });\n\n/**\n * Order view middleware\n */\nexport const withOrderViewAuth = withAuthAndAuthz.bind(null, { permission: 'orders.view' });\n\n/**\n * Order update middleware\n */\nexport const withOrderUpdateAuth = withAuthAndAuthz.bind(null, { permission: 'orders.update' });\n\n/**\n * Order delete middleware (only ADMIN, MERCHANT, OUTLET_ADMIN)\n */\nexport const withOrderDeleteAuth = withAuthAndAuthz.bind(null, { permission: 'orders.delete' });\n\n/**\n * Order export middleware (only ADMIN, MERCHANT, OUTLET_ADMIN)\n */\nexport const withOrderExportAuth = withAuthAndAuthz.bind(null, { permission: 'orders.export' });\n\n/**\n * Customer management middleware\n */\nexport const withCustomerManagementAuth = withAuthAndAuthz.bind(null, { permission: 'customers.manage' });\n\n/**\n * Customer export middleware (only ADMIN, MERCHANT, OUTLET_ADMIN)\n */\nexport const withCustomerExportAuth = withAuthAndAuthz.bind(null, { permission: 'customers.export' });\n\n/**\n * Billing management middleware\n */\nexport const withBillingManagementAuth = withAuthAndAuthz.bind(null, { permission: 'billing.manage' });\n\n/**\n * View-only middleware (for read operations)\n */\nexport const withViewAuth = withAuthAndAuthz.bind(null, { action: 'view' });\n\n// ============================================================================\n// SCOPE-SPECIFIC MIDDLEWARE\n// ============================================================================\n\n/**\n * Middleware that requires specific merchant scope\n */\nexport function withMerchantScope(merchantId: number) {\n  return withAuthAndAuthz.bind(null, { \n    scope: { merchantId },\n    resource: 'merchant',\n    action: 'view'\n  });\n}\n\n/**\n * Middleware that requires specific outlet scope\n */\nexport function withOutletScope(outletId: number) {\n  return withAuthAndAuthz.bind(null, { \n    scope: { outletId },\n    resource: 'outlet',\n    action: 'view'\n  });\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS FOR ROUTE HANDLERS\n// ============================================================================\n\n/**\n * Extract user scope from authorized request\n * This is the SECURITY-CRITICAL function for database operations\n */\nexport function getUserScopeFromRequest(authorizedRequest: AuthorizedRequest): UserScope {\n  return authorizedRequest.userScope;\n}\n\n/**\n * Build secure database where clause from user scope\n * This ensures data isolation at the database level\n */\nexport function buildSecureWhereClause(\n  authorizedRequest: AuthorizedRequest,\n  additionalWhere: any = {}\n): any {\n  const { userScope } = authorizedRequest;\n  \n  // System admins can access everything (no additional restrictions)\n  if (userScope.canAccessSystem) {\n    return additionalWhere;\n  }\n  \n  const where = { ...additionalWhere };\n  \n  // Apply merchant isolation\n  if (userScope.merchantId) {\n    where.merchantId = userScope.merchantId;\n  }\n  \n  // Apply outlet isolation\n  if (userScope.outletId) {\n    where.outletId = userScope.outletId;\n  }\n  \n  return where;\n}\n\n/**\n * Validate that a resource belongs to the user's scope\n * This should be called before performing operations on specific resources\n */\nexport async function validateResourceBelongsToUser(\n  authorizedRequest: AuthorizedRequest,\n  resourceType: 'merchant' | 'outlet' | 'product' | 'order' | 'customer',\n  resourceId: number\n): Promise<{ valid: boolean; error?: NextResponse }> {\n  const { userScope } = authorizedRequest;\n  \n  // System admins can access everything\n  if (userScope.canAccessSystem) {\n    return { valid: true };\n  }\n  \n  // For now, return valid - in a real implementation, you would:\n  // 1. Query the database to get the resource\n  // 2. Check if it belongs to the user's merchant/outlet\n  // 3. Return validation result\n  \n  // This is a placeholder - implement based on your specific needs\n  return { valid: true };\n}\n"],"mappings":"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","names":[]}
# Cursor Rules for Rental Shop Next.js Monorepo

## 🎯 DRY Principles & Best Practices

### **ALWAYS FOLLOW DRY (Don't Repeat Yourself)**

#### **1. Configuration Management**
- ✅ Use shared base configurations (`tsconfig.base.json`, `tsup.config.base.ts`)
- ✅ Extend base configs in packages, don't duplicate settings
- ✅ Keep package-specific configs minimal (3-5 lines max)
- ❌ Never duplicate TypeScript or build configurations

#### **2. Component Development**
- ✅ Create reusable components in `packages/ui/src/components/`
- ✅ Use shared components across all apps (`@rentalshop/ui`)
- ✅ Follow consistent component structure with proper TypeScript types
- ❌ Don't create duplicate components in individual apps

#### **3. Utility Functions**
- ✅ Centralize common functions in `packages/utils/src/`
- ✅ Use shared utilities everywhere (`@rentalshop/utils`)
- ✅ Create domain-specific utilities in appropriate packages
- ❌ Don't duplicate utility functions across packages

#### **4. Type Definitions**
- ✅ Define types once in `packages/database/src/types.ts`
- ✅ Import types from shared packages (`@rentalshop/database`)
- ✅ Use consistent naming conventions (PascalCase for interfaces)
- ❌ Don't redefine types in multiple places

### **Configuration Best Practices**

#### **TypeScript Configuration**
```typescript
// ✅ GOOD: Package tsconfig.json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"]
}

// ❌ BAD: Duplicating full config
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "esnext",
    // ... 20+ lines of duplicated config
  }
}
```

#### **Build Configuration**
```typescript
// ✅ GOOD: Package tsup.config.ts
import { createBaseConfig } from '../../tsup.config.base';
export default createBaseConfig('src/index.ts', ['external-deps']);

// ❌ BAD: Duplicating full config
export default defineConfig({
  entry: ['src/index.ts'],
  format: ['esm', 'cjs'],
  dts: true,
  // ... 15+ lines of duplicated config
});
```

### **Code Organization Rules**

#### **File Structure**
```
packages/
├── ui/src/components/     # ✅ Shared UI components
├── auth/src/              # ✅ Authentication logic
├── database/src/          # ✅ Database utilities
└── utils/src/             # ✅ Common utilities

apps/
├── client/app/            # ✅ Client-specific pages
├── admin/app/             # ✅ Admin-specific pages
└── api/app/api/           # ✅ API endpoints
```

#### **Import Patterns**
```typescript
// ✅ GOOD: Import from shared packages
import { Button, Card } from '@rentalshop/ui';
import { loginUser } from '@rentalshop/auth';
import { prisma } from '@rentalshop/database';
import { formatDate } from '@rentalshop/utils';

// ❌ BAD: Import from individual apps
import { Button } from '../../../components/Button';
```

### **Component Development Rules**

#### **Component Structure**
```typescript
// ✅ GOOD: Consistent component structure
// packages/ui/src/components/button.tsx
import React from 'react';
import { cn } from '../lib/cn';
import { buttonVariants } from './button.variants';
import type { ButtonProps } from './button.types';

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';
```

#### **Component Usage**
```typescript
// ✅ GOOD: Use shared components
// apps/client/app/login/page.tsx
import { Button, Input, Card } from '@rentalshop/ui';

export default function LoginPage() {
  return (
    <Card>
      <Input type="email" placeholder="Email" />
      <Button variant="primary">Login</Button>
    </Card>
  );
}

// ❌ BAD: Create app-specific components
export default function LoginPage() {
  return (
    <div className="card">
      <input type="email" />
      <button className="btn-primary">Login</button>
    </div>
  );
}
```

### **API Development Rules**

#### **API Route Structure**
```typescript
// ✅ GOOD: Consistent API structure
// apps/api/app/api/auth/login/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { loginUser } from '@rentalshop/auth';
import { validateLoginInput } from '@rentalshop/utils';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = validateLoginInput(body);
    const result = await loginUser(validatedData);
    
    return NextResponse.json(result);
  } catch (error) {
    return NextResponse.json(
      { error: error.message },
      { status: 400 }
    );
  }
}
```

#### **Database Operations**
```typescript
// ✅ GOOD: Use shared database client
// packages/auth/src/auth.ts
import { prisma } from '@rentalshop/database';

export const loginUser = async (credentials: LoginCredentials) => {
  const user = await prisma.user.findUnique({
    where: { email: credentials.email }
  });
  // ... rest of logic
};

// ❌ BAD: Create separate database connections
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();
```

### **Type Safety Rules**

#### **Type Definitions**
```typescript
// ✅ GOOD: Centralized types
// packages/database/src/types.ts
export interface User {
  id: string;
  email: string;
  name: string;
  role: UserRole;
}

// ✅ GOOD: Import everywhere
import type { User } from '@rentalshop/database';

// ❌ BAD: Redefine types
interface User {
  id: string;
  email: string;
  // ... duplicated definition
}
```

#### **Validation Schemas**
```typescript
// ✅ GOOD: Shared validation
// packages/utils/src/validation.ts
import { z } from 'zod';

export const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

// ✅ GOOD: Use everywhere
import { loginSchema } from '@rentalshop/utils';

// ❌ BAD: Duplicate schemas
const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});
```

### **Performance Rules**

#### **Bundle Optimization**
```typescript
// ✅ GOOD: External dependencies
// packages/ui/tsup.config.ts
export default createBaseConfig('src/index.tsx', [
  'react',
  'react-dom',
  'lucide-react'
]);

// ✅ GOOD: Tree shaking
// packages/ui/src/index.tsx
export { Button } from './components/button';
export { Card } from './components/card';
// Only export what's needed

// ❌ BAD: Bundle everything
export * from './components';
```

#### **Import Optimization**
```typescript
// ✅ GOOD: Specific imports
import { Button } from '@rentalshop/ui';

// ❌ BAD: Import everything
import * as UI from '@rentalshop/ui';
```

### **Error Handling Rules**

#### **Consistent Error Handling**
```typescript
// ✅ GOOD: Shared error class
// packages/utils/src/errors.ts
export class AppError extends Error {
  constructor(
    message: string,
    public statusCode: number = 500,
    public code?: string
  ) {
    super(message);
    this.name = 'AppError';
  }
}

// ✅ GOOD: Use everywhere
import { AppError } from '@rentalshop/utils';
throw new AppError('User not found', 404, 'USER_NOT_FOUND');

// ❌ BAD: Inconsistent error handling
throw new Error('User not found');
return { error: 'User not found' };
```

### **Documentation Rules**

#### **Code Documentation**
```typescript
// ✅ GOOD: JSDoc comments
/**
 * Authenticates a user with email and password
 * @param credentials - User login credentials
 * @returns Promise with user data and JWT token
 * @throws {AppError} When credentials are invalid
 */
export const loginUser = async (credentials: LoginCredentials): Promise<AuthResponse> => {
  // Implementation
};

// ❌ BAD: No documentation
export const loginUser = async (credentials) => {
  // Implementation
};
```

### **Security Rules**

#### **Input Validation**
```typescript
// ✅ GOOD: Validate all inputs
import { loginSchema } from '@rentalshop/utils';

export async function POST(request: NextRequest) {
  const body = await request.json();
  const validatedData = loginSchema.parse(body);
  // ... rest of logic
}

// ❌ BAD: No validation
export async function POST(request: NextRequest) {
  const body = await request.json();
  // Use body directly without validation
}
```

#### **Environment Variables**
```bash
# ✅ GOOD: Use consistent naming
DATABASE_URL="postgresql://..."
JWT_SECRET="your-secret"
NEXTAUTH_SECRET="your-secret"

# ❌ BAD: Inconsistent naming
DB_URL="postgresql://..."
SECRET_KEY="your-secret"
AUTH_SECRET="your-secret"
```

### **Testing Rules**

#### **Test Structure**
```typescript
// ✅ GOOD: Consistent test structure
// packages/utils/src/__tests__/date.test.ts
import { formatDate } from '../date';

describe('formatDate', () => {
  it('should format date correctly', () => {
    const date = new Date('2024-01-01');
    expect(formatDate(date)).toBe('01/01/2024');
  });
});

// ❌ BAD: Inconsistent test structure
test('formatDate works', () => {
  // Test without proper structure
});
```

### **Git Workflow Rules**

#### **Commit Messages**
```bash
# ✅ GOOD: Conventional commits
feat(ui): add new product card component
fix(api): resolve authentication bug
docs(readme): update installation instructions

# ❌ BAD: Inconsistent commits
added new component
fixed bug
updated docs
```

### **Maintenance Rules**

#### **Dependency Management**
```json
// ✅ GOOD: Use workspace dependencies
{
  "dependencies": {
    "@rentalshop/ui": "workspace:*",
    "@rentalshop/auth": "workspace:*",
    "@rentalshop/database": "workspace:*",
    "@rentalshop/utils": "workspace:*"
  }
}

// ❌ BAD: Use version numbers
{
  "dependencies": {
    "@rentalshop/ui": "1.0.0",
    "@rentalshop/auth": "1.0.0"
  }
}
```

### **Code Quality Rules**

#### **Linting and Formatting**
- ✅ Always run `yarn lint` before committing
- ✅ Use Prettier for consistent formatting
- ✅ Follow TypeScript strict mode
- ❌ Don't disable linting rules without justification

#### **Type Safety**
- ✅ Use strict TypeScript configuration
- ✅ Define proper types for all functions
- ✅ Use type guards for runtime validation
- ❌ Don't use `any` type without justification

### **Review Checklist**

Before submitting any code, ensure:

- [ ] No duplicated configurations
- [ ] Uses shared components and utilities
- [ ] Follows consistent naming conventions
- [ ] Includes proper TypeScript types
- [ ] Has appropriate error handling
- [ ] Includes tests for new functionality
- [ ] Updates documentation if needed
- [ ] Follows security best practices
- [ ] Optimized for performance
- [ ] Follows DRY principles

### **Remember**

**ALWAYS prioritize:**
1. **DRY (Don't Repeat Yourself)** - Never duplicate code or configurations
2. **Shared Resources** - Use packages for reusable code
3. **Consistency** - Follow established patterns
4. **Type Safety** - Use TypeScript effectively
5. **Performance** - Optimize bundles and imports
6. **Security** - Validate inputs and handle errors properly

**NEVER:**
- Duplicate configurations across packages
- Create app-specific versions of shared components
- Redefine types that already exist
- Skip input validation
- Use `any` type without justification
- Commit without running linting and tests
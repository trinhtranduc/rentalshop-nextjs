#!/bin/bash

# Stress Test Runner for RentalShop
# Runs comprehensive stress tests for 1M order dataset

echo "🚀 RentalShop Stress Test Suite"
echo "📊 Target: 1 Million Orders Dataset"
echo "=" | head -c 60 && echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check prerequisites
check_prerequisites() {
    echo -e "${BLUE}🔍 Checking prerequisites...${NC}"
    
    # Check if server is running
    if ! curl -s http://localhost:3000/api/orders > /dev/null; then
        echo -e "${RED}❌ Server not running on localhost:3000${NC}"
        echo "Please start the server first:"
        echo "  yarn dev"
        exit 1
    fi
    
    # Check if tools are installed
    if ! command -v artillery &> /dev/null; then
        echo -e "${YELLOW}⚠️  Artillery not installed. Installing...${NC}"
        npm install -g artillery
    fi
    
    if ! command -v k6 &> /dev/null; then
        echo -e "${YELLOW}⚠️  k6 not installed. Please install k6:${NC}"
        echo "  brew install k6  # macOS"
        echo "  or download from https://k6.io/docs/getting-started/installation/"
        exit 1
    fi
    
    if ! command -v autocannon &> /dev/null; then
        echo -e "${YELLOW}⚠️  Autocannon not installed. Installing...${NC}"
        npm install -g autocannon
    fi
    
    echo -e "${GREEN}✅ All prerequisites met${NC}"
}

# Generate test data
generate_test_data() {
    echo -e "${BLUE}📊 Generating test data...${NC}"
    node generate-test-data.js
    echo -e "${GREEN}✅ Test data generated${NC}"
}

# Run Artillery tests
run_artillery_tests() {
    echo -e "${BLUE}🚀 Running Artillery stress tests...${NC}"
    echo "This will take approximately 15 minutes..."
    
    artillery run artillery-config.yml --output artillery-results.json
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Artillery tests completed${NC}"
        
        # Generate report
        artillery report artillery-results.json --output artillery-report.html
        echo -e "${GREEN}📊 Artillery report: artillery-report.html${NC}"
    else
        echo -e "${RED}❌ Artillery tests failed${NC}"
    fi
}

# Run k6 tests
run_k6_tests() {
    echo -e "${BLUE}🚀 Running k6 stress tests...${NC}"
    echo "This will take approximately 12 minutes..."
    
    k6 run k6-order-stress-test.js --out json=k6-results.json
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ k6 tests completed${NC}"
        echo -e "${GREEN}📊 k6 results: k6-results.json${NC}"
    else
        echo -e "${RED}❌ k6 tests failed${NC}"
    fi
}

# Run Autocannon tests
run_autocannon_tests() {
    echo -e "${BLUE}🚀 Running Autocannon stress tests...${NC}"
    echo "This will take approximately 10 minutes..."
    
    node autocannon-stress-test.js
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Autocannon tests completed${NC}"
    else
        echo -e "${RED}❌ Autocannon tests failed${NC}"
    fi
}

# Generate final report
generate_final_report() {
    echo -e "${BLUE}📊 Generating final stress test report...${NC}"
    
    cat > stress-test-report.md << EOF
# RentalShop Stress Test Report

## Test Overview
- **Date**: $(date)
- **Target Dataset**: 1 Million Orders
- **Test Duration**: ~37 minutes total
- **Tools Used**: Artillery.js, k6, Autocannon

## Test Results

### Artillery.js Results
- **Configuration**: artillery-config.yml
- **Results**: artillery-results.json
- **Report**: artillery-report.html

### k6 Results
- **Script**: k6-order-stress-test.js
- **Results**: k6-results.json

### Autocannon Results
- **Script**: autocannon-stress-test.js
- **Output**: Console output above

## Performance Metrics

### Expected Performance (with optimizations)
- **Basic queries**: < 100ms
- **Complex queries**: < 500ms
- **Large datasets (10k records)**: < 1000ms
- **Memory usage**: < 500MB for most queries

### Vercel Compatibility
- **Hobby Plan**: ✅ For datasets < 10k orders
- **Pro Plan**: ✅ For datasets < 100k orders
- **Enterprise Plan**: ✅ For any dataset size

## Recommendations

1. **Database Optimization**
   - Use proper indexes
   - Implement query caching
   - Optimize pagination

2. **API Optimization**
   - Use select instead of include
   - Implement cursor-based pagination
   - Add response caching

3. **Deployment Strategy**
   - Choose appropriate Vercel plan
   - Monitor performance in production
   - Set up alerting for slow queries

## Next Steps

1. Review test results
2. Address any performance issues
3. Deploy to production with monitoring
4. Set up continuous performance testing

---
*Generated by RentalShop Stress Test Suite*
EOF

    echo -e "${GREEN}✅ Final report generated: stress-test-report.md${NC}"
}

# Main execution
main() {
    echo -e "${GREEN}🚀 Starting comprehensive stress test suite${NC}"
    echo ""
    
    # Check prerequisites
    check_prerequisites
    echo ""
    
    # Generate test data
    generate_test_data
    echo ""
    
    # Ask user which tests to run
    echo -e "${YELLOW}Which tests would you like to run?${NC}"
    echo "1) All tests (recommended)"
    echo "2) Artillery only"
    echo "3) k6 only"
    echo "4) Autocannon only"
    echo "5) Skip tests"
    read -p "Enter your choice (1-5): " choice
    
    case $choice in
        1)
            echo -e "${BLUE}🚀 Running all stress tests...${NC}"
            echo ""
            run_artillery_tests
            echo ""
            run_k6_tests
            echo ""
            run_autocannon_tests
            ;;
        2)
            run_artillery_tests
            ;;
        3)
            run_k6_tests
            ;;
        4)
            run_autocannon_tests
            ;;
        5)
            echo -e "${YELLOW}⏭️  Skipping stress tests${NC}"
            ;;
        *)
            echo -e "${RED}❌ Invalid choice${NC}"
            exit 1
            ;;
    esac
    
    echo ""
    generate_final_report
    
    echo ""
    echo -e "${GREEN}🎉 Stress test suite completed!${NC}"
    echo -e "${BLUE}📊 Check the generated reports for detailed results${NC}"
}

# Run main function
main "$@"

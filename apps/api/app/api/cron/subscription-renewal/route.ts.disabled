import { handleApiError } from '@rentalshop/utils';
// ============================================================================
// SUBSCRIPTION RENEWAL CRON JOB API ENDPOINT
// ============================================================================

import { NextRequest, NextResponse } from 'next/server';
import { createSubscriptionRenewalManager, DEFAULT_RENEWAL_CONFIG } from '@rentalshop/utils';
import {API} from '@rentalshop/constants';

// ============================================================================
// POST /api/cron/subscription-renewal - Run subscription renewal process
// ============================================================================
export async function POST(request: NextRequest) {
  try {
    // Verify this is a legitimate cron request
    const authHeader = request.headers.get('authorization');
    const cronSecret = process.env.CRON_SECRET;
    
    if (!cronSecret || authHeader !== `Bearer ${cronSecret}`) {
      return NextResponse.json(
        { success: false, code: 'UNAUTHORIZED', message: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log('üîÑ Starting subscription renewal cron job...');

    // Create renewal manager with configuration
    const renewalConfig = {
      ...DEFAULT_RENEWAL_CONFIG,
      paymentGateway: {
        stripe: process.env.STRIPE_SECRET_KEY ? {
          secretKey: process.env.STRIPE_SECRET_KEY,
          publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',
          webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',
          currency: 'USD',
          country: 'US'
        } : undefined,
        paypal: process.env.PAYPAL_CLIENT_ID ? {
          clientId: process.env.PAYPAL_CLIENT_ID,
          clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',
          environment: (process.env.PAYPAL_ENVIRONMENT as 'sandbox' | 'production') || 'sandbox',
          currency: 'USD',
          country: 'US'
        } : undefined,
        defaultGateway: 'STRIPE'
      }
    };

    const renewalManager = createSubscriptionRenewalManager(renewalConfig as any);

    // Process renewals
    const stats = await renewalManager.processRenewals();

    console.log('‚úÖ Subscription renewal cron job completed:', stats);

    return NextResponse.json({
      success: true,
      data: stats,
      message: `Processed ${stats.totalProcessed} subscriptions: ${stats.successful} successful, ${stats.failed} failed, ${stats.skipped} skipped`
    });
  } catch (error) {
    console.error('‚ùå Error in subscription renewal cron job:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: 'Subscription renewal cron job failed',
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: API.STATUS.INTERNAL_SERVER_ERROR }
    );
  }
}

// ============================================================================
// GET /api/cron/subscription-renewal - Health check
// ============================================================================
export async function GET(request: NextRequest) {
  return NextResponse.json({
    success: true,
    message: 'Subscription renewal cron job is healthy',
    timestamp: new Date().toISOString()
  });
}

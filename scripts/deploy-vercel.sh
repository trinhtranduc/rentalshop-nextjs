#!/bin/bash

# ============================================================================
# üöÄ VERCEL DEPLOYMENT SCRIPT
# ============================================================================
# Script t·ª± ƒë·ªông deploy Rental Shop l√™n Vercel
# Author: AI Assistant
# Date: 2025
# ============================================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ============================================================================
# FUNCTIONS
# ============================================================================

print_header() {
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}   $1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

check_command() {
    if ! command -v $1 &> /dev/null; then
        print_error "$1 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        echo "  C√†i ƒë·∫∑t b·∫±ng: npm install -g $1"
        exit 1
    fi
}

# ============================================================================
# PRE-DEPLOYMENT CHECKS
# ============================================================================

print_header "1. KI·ªÇM TRA Y√äU C·∫¶U"

# Check Vercel CLI
print_info "Ki·ªÉm tra Vercel CLI..."
check_command "vercel"
print_success "Vercel CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"

# Check if logged in
print_info "Ki·ªÉm tra ƒëƒÉng nh·∫≠p Vercel..."
if ! vercel whoami &> /dev/null; then
    print_warning "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p Vercel"
    print_info "ƒêang m·ªü trang ƒëƒÉng nh·∫≠p..."
    vercel login
fi
print_success "ƒê√£ ƒëƒÉng nh·∫≠p Vercel"

# Check Node/Yarn
print_info "Ki·ªÉm tra Node.js v√† Yarn..."
check_command "node"
check_command "yarn"
print_success "Node.js v√† Yarn ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"

# ============================================================================
# BUILD TEST
# ============================================================================

print_header "2. TEST BUILD LOCAL"

print_info "ƒêang build t·∫•t c·∫£ apps..."
if yarn build; then
    print_success "Build th√†nh c√¥ng! ‚ú®"
else
    print_error "Build th·∫•t b·∫°i. Vui l√≤ng s·ª≠a l·ªói tr∆∞·ªõc khi deploy."
    exit 1
fi

# ============================================================================
# DATABASE CHECK
# ============================================================================

print_header "3. KI·ªÇM TRA DATABASE"

print_warning "‚ö†Ô∏è  QUAN TR·ªåNG: Vercel KH√îNG h·ªó tr·ª£ SQLite!"
print_info "B·∫°n c·∫ßn PostgreSQL database ƒë·ªÉ deploy production."
echo ""
print_info "C√°c l·ª±a ch·ªçn:"
echo "  1. Neon PostgreSQL (Khuy√™n d√πng) - https://neon.tech"
echo "  2. Vercel Postgres - https://vercel.com/storage/postgres"
echo "  3. Supabase - https://supabase.com"
echo ""

read -p "$(echo -e ${YELLOW}B·∫°n ƒë√£ c√≥ PostgreSQL database ch∆∞a? [y/N]:${NC} )" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_error "Vui l√≤ng t·∫°o PostgreSQL database tr∆∞·ªõc khi ti·∫øp t·ª•c"
    print_info "Xem h∆∞·ªõng d·∫´n t·∫°i: VERCEL_DEPLOYMENT_GUIDE_VI.md"
    exit 1
fi

read -p "$(echo -e ${YELLOW}Nh·∫≠p DATABASE_URL (PostgreSQL):${NC} )" DATABASE_URL

if [ -z "$DATABASE_URL" ]; then
    print_error "DATABASE_URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    exit 1
fi

# Validate PostgreSQL URL
if [[ ! $DATABASE_URL =~ ^postgresql:// ]]; then
    print_error "DATABASE_URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'postgresql://'"
    exit 1
fi

print_success "Database URL h·ª£p l·ªá"

# ============================================================================
# MIGRATE DATABASE
# ============================================================================

print_header "4. MIGRATE DATABASE SCHEMA"

print_info "ƒêang push schema l√™n database production..."
if DATABASE_URL="$DATABASE_URL" npx prisma db push --accept-data-loss; then
    print_success "Schema ƒë√£ ƒë∆∞·ª£c migrate th√†nh c√¥ng"
else
    print_error "Migrate th·∫•t b·∫°i"
    exit 1
fi

print_info "Generate Prisma Client..."
npx prisma generate
print_success "Prisma Client ƒë√£ ƒë∆∞·ª£c generate"

# ============================================================================
# GENERATE SECRETS
# ============================================================================

print_header "5. GENERATE SECRETS"

print_info "ƒêang generate JWT_SECRET v√† NEXTAUTH_SECRET..."

JWT_SECRET=$(openssl rand -hex 32)
NEXTAUTH_SECRET=$(openssl rand -hex 32)

print_success "Secrets ƒë√£ ƒë∆∞·ª£c generate"
echo "  JWT_SECRET: ${JWT_SECRET:0:10}...${JWT_SECRET: -10}"
echo "  NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:0:10}...${NEXTAUTH_SECRET: -10}"

# ============================================================================
# DEPLOY SELECTION
# ============================================================================

print_header "6. CH·ªåN ·ª®NG D·ª§NG DEPLOY"

echo "Ch·ªçn ·ª©ng d·ª•ng ƒë·ªÉ deploy:"
echo "  1. API Server only"
echo "  2. Client App only"
echo "  3. Admin Dashboard only"
echo "  4. T·∫•t c·∫£ (API ‚Üí Client ‚Üí Admin)"
echo ""
read -p "$(echo -e ${YELLOW}L·ª±a ch·ªçn [1-4]:${NC} )" -n 1 -r DEPLOY_CHOICE
echo ""

# ============================================================================
# DEPLOYMENT FUNCTIONS
# ============================================================================

deploy_api() {
    print_header "DEPLOYING API SERVER"
    
    cd apps/api
    
    print_info "ƒêang deploy API server..."
    if vercel --prod --yes; then
        print_success "API Server ƒë√£ deploy th√†nh c√¥ng!"
        
        # Get deployment URL
        API_URL=$(vercel inspect --json | grep -o '"url":"[^"]*' | cut -d'"' -f4 | head -1)
        echo "  URL: https://$API_URL"
        
        print_warning "‚ö†Ô∏è  B·∫°n c·∫ßn set environment variables tr√™n Vercel Dashboard:"
        echo ""
        echo "  DATABASE_URL=$DATABASE_URL"
        echo "  JWT_SECRET=$JWT_SECRET"
        echo "  NEXTAUTH_SECRET=$NEXTAUTH_SECRET"
        echo "  NEXTAUTH_URL=https://$API_URL"
        echo ""
        print_info "Xem chi ti·∫øt t·∫°i: VERCEL_ENV_TEMPLATE.md"
    else
        print_error "Deploy API th·∫•t b·∫°i"
        exit 1
    fi
    
    cd ../..
}

deploy_client() {
    print_header "DEPLOYING CLIENT APP"
    
    cd apps/client
    
    print_info "ƒêang deploy Client app..."
    if vercel --prod --yes; then
        print_success "Client App ƒë√£ deploy th√†nh c√¥ng!"
        
        # Get deployment URL
        CLIENT_URL=$(vercel inspect --json | grep -o '"url":"[^"]*' | cut -d'"' -f4 | head -1)
        echo "  URL: https://$CLIENT_URL"
        
        print_warning "‚ö†Ô∏è  B·∫°n c·∫ßn set environment variables tr√™n Vercel Dashboard:"
        echo ""
        echo "  NEXT_PUBLIC_API_URL=https://<api-url>"
        echo "  NEXTAUTH_SECRET=$NEXTAUTH_SECRET"
        echo "  NEXTAUTH_URL=https://$CLIENT_URL"
        echo ""
    else
        print_error "Deploy Client th·∫•t b·∫°i"
        exit 1
    fi
    
    cd ../..
}

deploy_admin() {
    print_header "DEPLOYING ADMIN DASHBOARD"
    
    cd apps/admin
    
    print_info "ƒêang deploy Admin dashboard..."
    if vercel --prod --yes; then
        print_success "Admin Dashboard ƒë√£ deploy th√†nh c√¥ng!"
        
        # Get deployment URL
        ADMIN_URL=$(vercel inspect --json | grep -o '"url":"[^"]*' | cut -d'"' -f4 | head -1)
        echo "  URL: https://$ADMIN_URL"
        
        print_warning "‚ö†Ô∏è  B·∫°n c·∫ßn set environment variables tr√™n Vercel Dashboard:"
        echo ""
        echo "  NEXT_PUBLIC_API_URL=https://<api-url>"
        echo "  NEXTAUTH_SECRET=$NEXTAUTH_SECRET"
        echo "  NEXTAUTH_URL=https://$ADMIN_URL"
        echo ""
    else
        print_error "Deploy Admin th·∫•t b·∫°i"
        exit 1
    fi
    
    cd ../..
}

# ============================================================================
# EXECUTE DEPLOYMENT
# ============================================================================

case $DEPLOY_CHOICE in
    1)
        deploy_api
        ;;
    2)
        deploy_client
        ;;
    3)
        deploy_admin
        ;;
    4)
        deploy_api
        echo ""
        deploy_client
        echo ""
        deploy_admin
        ;;
    *)
        print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
        exit 1
        ;;
esac

# ============================================================================
# POST-DEPLOYMENT
# ============================================================================

print_header "üéâ DEPLOYMENT HO√ÄN T·∫§T!"

print_success "C√°c b∆∞·ªõc ti·∫øp theo:"
echo ""
echo "  1. Set environment variables tr√™n Vercel Dashboard"
echo "     ‚Üí https://vercel.com/dashboard"
echo ""
echo "  2. Redeploy sau khi set env vars:"
echo "     cd apps/api && vercel --prod --force"
echo "     cd apps/client && vercel --prod --force"
echo "     cd apps/admin && vercel --prod --force"
echo ""
echo "  3. Update CORS_ORIGINS trong API v·ªõi Client & Admin URLs"
echo ""
echo "  4. Test deployment:"
echo "     curl https://<api-url>/api/health"
echo ""

print_info "Xem h∆∞·ªõng d·∫´n chi ti·∫øt t·∫°i:"
echo "  - VERCEL_DEPLOYMENT_GUIDE_VI.md (Ti·∫øng Vi·ªát)"
echo "  - VERCEL_ENV_TEMPLATE.md (Environment Variables)"
echo ""

print_success "Ch√∫c m·ª´ng b·∫°n ƒë√£ deploy th√†nh c√¥ng! üöÄ"


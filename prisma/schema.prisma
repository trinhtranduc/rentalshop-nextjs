generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          String     @default("OUTLET_STAFF")
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  merchantId    Int?
  outletId      Int?
  deletedAt     DateTime?
  auditLogs     AuditLog[]
  createdOrders Order[]
  outlet        Outlet?    @relation(fields: [outletId], references: [id])
  merchant      Merchant?  @relation(fields: [merchantId], references: [id])

  @@unique([merchantId, email])
  @@unique([merchantId, phone])
  @@index([email])
  @@index([merchantId])
  @@index([outletId])
  @@index([deletedAt])
}

model Merchant {
  id                 Int           @id @default(autoincrement())
  name               String
  email              String        @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  businessType       String?
  taxId              String?
  website            String?
  description        String?
  planId             Int?
  subscriptionStatus String        @default("trial")
  totalRevenue       Float         @default(0)
  lastActiveAt       DateTime?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  categories         Category[]
  customers          Customer[]
  Plan               Plan?         @relation(fields: [planId], references: [id])
  outlets            Outlet[]
  payments           Payment[]
  products           Product[]
  subscription       Subscription?
  users              User[]

  @@index([name])
  @@index([email])
  @@index([subscriptionStatus])
  @@index([planId])
}

model Outlet {
  id          Int           @id @default(autoincrement())
  name        String
  address     String?
  description String?
  isActive    Boolean       @default(true)
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  merchantId  Int
  phone       String?
  city        String?
  country     String?
  state       String?
  zipCode     String?
  orders      Order[]
  merchant    Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products    OutletStock[]
  users       User[]

  @@index([merchantId])
  @@index([name])
  @@index([isDefault])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  Int
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([merchantId, name])
  @@index([merchantId])
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  barcode     String?       @unique
  totalStock  Int           @default(0)
  rentPrice   Float
  salePrice   Float?
  deposit     Float         @default(0)
  images      String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  merchantId  Int
  categoryId  Int
  orderItems  OrderItem[]
  outletStock OutletStock[]
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  merchant    Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([categoryId])
  @@index([barcode])
  @@index([name])
}

model OutletStock {
  id        Int      @id @default(autoincrement())
  stock     Int      @default(0)
  available Int      @default(0)
  renting   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  outletId  Int
  outlet    Outlet   @relation(fields: [outletId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, outletId])
  @@index([outletId, available])
  @@index([productId])
}

model Customer {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  dateOfBirth DateTime?
  idNumber    String?
  idType      String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  Int
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([merchantId, phone])
  @@unique([merchantId, email], map: "unique_merchant_email")
  @@index([merchantId, firstName, lastName])
}

model Order {
  id                Int         @id @default(autoincrement())
  orderNumber       String      @unique
  orderType         String
  status            String      @default("RESERVED")
  totalAmount       Float
  depositAmount     Float       @default(0)
  securityDeposit   Float       @default(0)
  damageFee         Float       @default(0)
  lateFee           Float       @default(0)
  discountType      String?
  discountValue     Float       @default(0)
  discountAmount    Float       @default(0)
  pickupPlanAt      DateTime?
  returnPlanAt      DateTime?
  pickedUpAt        DateTime?
  returnedAt        DateTime?
  rentalDuration    Int?
  isReadyToDeliver  Boolean     @default(false)
  collateralType    String?
  collateralDetails String?
  notes             String?
  pickupNotes       String?
  returnNotes       String?
  damageNotes       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  outletId          Int
  customerId        Int?
  createdById       Int
  createdBy         User        @relation(fields: [createdById], references: [id])
  outlet            Outlet      @relation(fields: [outletId], references: [id])
  customer          Customer?   @relation(fields: [customerId], references: [id])
  orderItems        OrderItem[]
  payments          Payment[]

  @@index([status, outletId])
  @@index([customerId, createdAt(sort: Desc)])
  @@index([pickupPlanAt, returnPlanAt])
  @@index([orderNumber])
  @@index([isReadyToDeliver, outletId])
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  quantity   Int     @default(1)
  unitPrice  Float
  totalPrice Float
  deposit    Float   @default(0)
  orderId    Int
  productId  Int
  notes      String?
  rentalDays Int?
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])

  @@index([orderId, productId])
}

model Payment {
  id             Int           @id @default(autoincrement())
  amount         Float
  currency       String        @default("USD")
  method         String
  type           String
  status         String        @default("PENDING")
  reference      String?
  transactionId  String?
  invoiceNumber  String?
  description    String?
  notes          String?
  failureReason  String?
  metadata       String?
  processedAt    DateTime?
  processedBy    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderId        Int?
  subscriptionId Int?
  merchantId     Int?
  merchant       Merchant?     @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  order          Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, status])
  @@index([subscriptionId, status])
  @@index([merchantId, status])
  @@index([status])
  @@index([type])
  @@index([method])
  @@index([currency])
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String
  basePrice     Float
  currency      String         @default("USD")
  trialDays     Int            @default(14)
  limits        String         @default("{\"outlets\": 0, \"users\": 0, \"products\": 0, \"customers\": 0}") // JSON object: {"outlets": 5, "users": 10, "products": 100, "customers": 500}
  features      String         @default("[]") // JSON array: ["feature1", "feature2", "feature3"]
  isActive      Boolean        @default(true)
  isPopular     Boolean        @default(false)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  Merchant      Merchant[]
  subscriptions Subscription[]

  @@index([isActive])
  @@index([sortOrder])
  @@index([deletedAt])
}

model Subscription {
  id                 Int       @id @default(autoincrement())
  merchantId         Int       @unique
  planId             Int
  status             String    @default("trial")
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialStart         DateTime?
  trialEnd           DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  cancelReason       String?
  amount             Float
  currency           String    @default("USD")
  interval           String    @default("month")
  intervalCount      Int       @default(1)
  period             Int       @default(1)
  discount           Float     @default(0)
  savings            Float     @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  payments           Payment[]
  merchant           Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  plan               Plan      @relation(fields: [planId], references: [id])

  @@index([merchantId])
  @@index([planId])
  @@index([status])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  entityType String
  entityId   String
  action     String
  details    String
  userId     Int?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}



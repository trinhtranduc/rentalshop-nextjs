// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_LOCAL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CLIENT") // CLIENT, MERCHANT, OUTLET_STAFF, ADMIN
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  merchant    Merchant?
  admin       Admin?
  outletStaff OutletStaff?
  rentals     Rental[]
  payments    Payment[]
  notifications Notification[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  sessions    Session[]

  @@map("users")
}

// Business Management
model Merchant {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  businessLicense String?
  address     String
  description String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  outlets Outlet[]

  @@map("merchants")
}

model Outlet {
  id          String   @id @default(cuid())
  merchantId  String
  name        String
  address     String
  description String?
  phone       String
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchant    Merchant     @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  outletStaff OutletStaff[]
  products    Product[]
  rentals     Rental[]

  @@map("outlets")
}

model OutletStaff {
  id        String   @id @default(cuid())
  userId    String   @unique
  outletId  String
  role      String   @default("STAFF") // STAFF, MANAGER
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  outlet Outlet @relation(fields: [outletId], references: [id], onDelete: Cascade)

  @@map("outlet_staff")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  level     String   @default("STAFF") // STAFF, MANAGER, SUPER_ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Product Management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  outletId    String
  categoryId  String
  name        String
  description String?
  barcode     String?  @unique // Product barcode for scanning
  stock       Int      @default(0) // Total available stock
  renting     Int      @default(0) // Currently being rented
  available   Int      @default(0) // Available for rent (stock - renting)
  rentPrice   Float    // Daily rental price
  salePrice   Float?   // Sale price (optional - for products that can be sold)
  deposit     Float    @default(0) // Security deposit
  images      String   // JSON string of image URLs
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  outlet   Outlet   @relation(fields: [outletId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  rentals  Rental[]

  @@map("products")
}

// Rental Management
model Rental {
  id          String   @id @default(cuid())
  userId      String
  outletId    String
  productId   String
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float    // Total rental cost
  deposit     Float    // Security deposit amount
  status      String   @default("PENDING") // PENDING, CONFIRMED, ACTIVE, COMPLETED, CANCELLED, OVERDUE
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  outlet  Outlet  @relation(fields: [outletId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  payments Payment[]

  @@map("rentals")
}

// Payment Management
model Payment {
  id        String   @id @default(cuid())
  rentalId  String
  userId    String
  amount    Float
  method    String   // CASH, BANK_TRANSFER, CREDIT_CARD, DIGITAL_WALLET
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  reference String?  // External payment reference
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rental Rental  @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // INFO, SUCCESS, WARNING, ERROR
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Authentication & Security
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
} 
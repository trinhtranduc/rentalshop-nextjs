// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      String   @default("OUTLET_STAFF")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  outletId   String?
  outlet     Outlet?   @relation(fields: [outletId], references: [id])

  @@index([email])
  @@index([merchantId])
  @@index([outletId])
}

model Merchant {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users      User[]
  outlets    Outlet[]
  products   Product[]
  customers  Customer[]
  categories Category[]

  @@index([name])
}

model Outlet {
  id          String   @id @default(cuid())
  name        String
  address     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  users      User[]
  products   OutletStock[]
  orders     Order[]

  @@index([merchantId])
  @@index([name])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products   Product[]

  @@unique([merchantId, name])
  @@index([merchantId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  barcode     String?  @unique
  totalStock  Int      @default(0)  // Total stock across all outlets
  rentPrice   Float
  salePrice   Float?
  deposit     Float    @default(0)
  images      String?  // JSON array of image URLs
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  outletStock OutletStock[]
  orderItems OrderItem[]

  @@index([merchantId, name])
  @@index([merchantId, categoryId])
  @@index([barcode])
  @@index([isActive])
}

model OutletStock {
  id        String   @id @default(cuid())
  stock     Int      @default(0)  // Total stock at this outlet
  available Int      @default(0)  // Available for rent/sale
  renting   Int      @default(0)  // Currently being rented
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  outletId  String
  outlet    Outlet  @relation(fields: [outletId], references: [id], onDelete: Cascade)

  @@unique([productId, outletId])
  @@index([outletId, available])
  @@index([productId])
}

model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@index([merchantId, firstName, lastName])
  @@index([merchantId, phone])
  @@index([email])
}

model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  orderType     String   // RENT, SALE, RENT_TO_OWN
  status        String   @default("PENDING") // PENDING, CONFIRMED, ACTIVE, COMPLETED, CANCELLED, OVERDUE, DAMAGED
  totalAmount   Float
  depositAmount Float    @default(0)  // Tiền cọc (Deposit)
  securityDeposit Float  @default(0)  // Tiền thế chân (Security Deposit)
  damageFee     Float    @default(0)  // Phí hư hỏng (Damage Fee)
  lateFee       Float    @default(0)  // Phí trễ hạn (Late Fee)
  
  // Rental specific
  pickupPlanAt  DateTime?  // Ngày nhận hàng (Pickup Date)
  returnPlanAt  DateTime?  // Ngày trả hàng (Return Date)
  pickedUpAt    DateTime?  // Ngày thực tế nhận hàng
  returnedAt    DateTime?  // Ngày thực tế trả hàng
  rentalDuration Int?      // Số ngày thuê (Rental Duration in days)
  
  // Collateral information
  collateralType String?   // Thế chân bằng tiền/giấy tờ (Cash/Document Collateral)
  collateralDetails String? // Chi tiết thế chấp (ID Card, Passport, etc.)
  
  // Notes
  notes         String?   // Ghi chú chung (General Notes)
  pickupNotes   String?   // Ghi chú khi nhận hàng
  returnNotes   String?   // Ghi chú khi trả hàng
  damageNotes   String?   // Ghi chú về hư hỏng
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  outletId   String
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@index([status, outletId])
  @@index([customerId, createdAt(sort: Desc)])
  @@index([pickupPlanAt, returnPlanAt])
  @@index([orderNumber])
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int      @default(1)
  unitPrice   Float    // Tiền thuê hàng ngày (Daily Rental Rate)
  totalPrice  Float    // Tổng tiền thuê (Total Rental Fee)
  rentalDays  Int?     // Số ngày thuê (Rental Duration)
  notes       String?  // Ghi chú cho sản phẩm này
  
  // Relations
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId, productId])
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  method    String   // CASH, BANK_TRANSFER, CREDIT_CARD, DIGITAL_WALLET
  type      String   // DEPOSIT, RENTAL_FEE, DAMAGE_FEE, LATE_FEE, REFUND
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  reference String?  // Payment reference number
  notes     String?  // Ghi chú thanh toán
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, status])
  @@index([orderId, type])
  @@index([status])
  @@index([type])
} 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  publicId   Int       @unique
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  phone      String?
  role       String    @default("OUTLET_STAFF")
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  merchantId String?
  outletId   String?
  outlet     Outlet?   @relation(fields: [outletId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  createdOrders Order[] // Orders created by this user

  @@unique([merchantId, email])
  @@unique([merchantId, phone])
  @@index([email])
  @@index([merchantId])
  @@index([outletId])
  @@index([publicId])
}

model Merchant {
  id          String     @id @default(cuid())
  publicId    Int        @unique
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[]
  customers   Customer[]
  outlets     Outlet[]
  products    Product[]
  users       User[]

  @@index([name])
  @@index([publicId])
}

model Outlet {
  id          String        @id @default(cuid())
  publicId    Int           @unique
  name        String
  address     String?
  phone       String?
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  merchantId  String
  orders      Order[]
  merchant    Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products    OutletStock[]
  users       User[]

  @@index([merchantId])
  @@index([name])
  @@index([publicId])
}

model Category {
  id          String    @id @default(cuid())
  publicId    Int       @unique
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  String
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([merchantId, name])
  @@index([merchantId])
  @@index([publicId])
}

model Product {
  id          String        @id @default(cuid())
  publicId    Int           @unique
  name        String
  description String?
  barcode     String?       @unique
  totalStock  Int           @default(0)
  rentPrice   Float
  salePrice   Float?
  deposit     Float         @default(0)
  images      String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  merchantId  String
  categoryId  String
  orderItems  OrderItem[]
  outletStock OutletStock[]
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  merchant    Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([categoryId])
  @@index([barcode])
  @@index([name])
  @@index([publicId])
}

model OutletStock {
  id        String   @id @default(cuid())
  stock     Int      @default(0)
  available Int      @default(0)
  renting   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  outletId  String
  outlet    Outlet   @relation(fields: [outletId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, outletId])
  @@index([outletId, available])
  @@index([productId])
}

model Customer {
  id          String    @id @default(cuid())
  publicId    Int       @unique
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  dateOfBirth DateTime?
  idNumber    String?
  idType      String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  String
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([merchantId, phone])
  @@unique([merchantId, email], map: "unique_merchant_email") // Only applies when email is not null
  @@index([merchantId, firstName, lastName])
  @@index([publicId])
}

model Order {
  id                String      @id @default(cuid())
  publicId          Int         @unique
  orderNumber       String      @unique
  orderType         String
  status            String      @default("RESERVED")
  totalAmount       Float
  depositAmount     Float       @default(0)
  securityDeposit   Float       @default(0)
  damageFee         Float       @default(0)
  lateFee           Float       @default(0)
  discountType      String?     // 'amount' or 'percentage'
  discountValue     Float       @default(0)
  discountAmount    Float       @default(0)
  pickupPlanAt      DateTime?
  returnPlanAt      DateTime?
  pickedUpAt        DateTime?
  returnedAt        DateTime?
  rentalDuration    Int?
  isReadyToDeliver  Boolean     @default(false)
  collateralType    String?
  collateralDetails String?
  notes             String?
  pickupNotes       String?
  returnNotes       String?
  damageNotes       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  outletId          String
  customerId        String?
  createdById       String      // Who created this order
  customer          Customer?   @relation(fields: [customerId], references: [id])
  outlet            Outlet      @relation(fields: [outletId], references: [id])
  createdBy         User        @relation(fields: [createdById], references: [id])
  orderItems        OrderItem[]
  payments          Payment[]

  @@index([status, outletId])
  @@index([customerId, createdAt(sort: Desc)])
  @@index([pickupPlanAt, returnPlanAt])
  @@index([orderNumber])
  @@index([publicId])
  @@index([isReadyToDeliver, outletId])
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int     @default(1)
  unitPrice  Float
  totalPrice Float
  deposit    Float   @default(0)
  orderId    String
  productId  String
  notes      String?
  rentalDays Int?
  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, productId])
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  method    String
  type      String
  status    String   @default("PENDING")
  reference String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, status])
  @@index([orderId, type])
  @@index([status])
  @@index([type])
}
